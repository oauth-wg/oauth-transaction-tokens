{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-03-25T00:17:40.389146+00:00",
  "repo": "oauth-wg/oauth-transaction-tokens",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "Nested TraTs",
      "description": "Nested Transaction Token related issues",
      "color": "3DE397"
    },
    {
      "name": "pre-adoption",
      "description": "",
      "color": "D449DC"
    },
    {
      "name": "PR57",
      "description": "",
      "color": "5319e7"
    },
    {
      "name": "IETF120-discuss",
      "description": "",
      "color": "f9d0c4"
    },
    {
      "name": "pre-last-call",
      "description": "Issues that need to be addressed before we go for last call",
      "color": "5319e7"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOJt_WwM5orgPO",
      "title": "Should we allow Access Tokens to be included in a TraT",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/1",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Including Access Tokens may facilitate token theft.",
      "createdAt": "2023-06-14T07:21:15Z",
      "updatedAt": "2023-10-03T19:22:45Z",
      "closedAt": "2023-10-03T19:22:44Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Access tokens are not included in the transaction tokens. They are only present in the request from the external endpoint workload to the Transaction Token Service.",
          "createdAt": "2023-07-06T20:39:34Z",
          "updatedAt": "2023-07-06T20:39:34Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed, do we have text to preclude that now?",
          "createdAt": "2023-07-07T08:21:21Z",
          "updatedAt": "2023-07-07T08:21:21Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Issue addressed in security considerations.",
          "createdAt": "2023-10-03T19:22:45Z",
          "updatedAt": "2023-10-03T19:22:45Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "I_kwDOJt_WwM5orirG",
      "title": "Document layout",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/2",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Perhaps have a shorter introduction section (first paragraph only) and move the rest to an Overview section to be consistent with other OAuth docs?",
      "createdAt": "2023-06-14T07:27:56Z",
      "updatedAt": "2023-08-01T01:09:40Z",
      "closedAt": "2023-08-01T01:09:40Z",
      "comments": []
    },
    {
      "number": 3,
      "id": "I_kwDOJt_WwM5osWt5",
      "title": "Security Consideration: Mutual Authentication of the TraT Request",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/3",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The requirement that clients must be pre-registered feels like it perpetuates the problem we see with workload identities, where the client identity may not be known ahead of time. This is not unlike the problems we see with wallets and the need for some way to let clients authenticate without being pre-registered. \r\n\r\nI wonder if we can remove this requirement and instead rely on some form of authentication where the trust is in the credential issuer. For example, with SPIFFE, there is an authority that issues the credential to the workload, so as long as the client presents a credential issued by the authority, it could be trusted (provided the authority is trusted). ",
      "createdAt": "2023-06-14T09:28:39Z",
      "updatedAt": "2023-10-03T19:23:45Z",
      "closedAt": "2023-10-03T19:23:44Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm thinking we should just rely on SPIFFE / SPIRE to solve this issue and not have to address it in the transaction tokens draft.",
          "createdAt": "2023-07-06T20:38:48Z",
          "updatedAt": "2023-07-06T20:38:48Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "There is other work in the pipeline to remove the need for client registration. Perhaps we should reference it here? \r\n\r\n1.https://vcstuff.github.io/draft-looker-oauth-attestation-based-client-authentication/draft-looker-oauth-attestation-based-client-authentication.html\r\n2.https://mattrglobal.github.io/draft-looker-oauth-client-id-scheme/draft-looker-oauth-client-id-scheme.html",
          "createdAt": "2023-07-07T08:23:46Z",
          "updatedAt": "2023-07-07T08:23:46Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Current spec removes client pre-registration and references SPIFFE - closing issue.",
          "createdAt": "2023-10-03T19:23:45Z",
          "updatedAt": "2023-10-03T19:23:45Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOJt_WwM5otiT0",
      "title": "Need to describe how claims are transcribed",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/4",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Describe how to show that claims are transcribed (namespaced) both withing and across trust domains. ",
      "createdAt": "2023-06-14T12:18:59Z",
      "updatedAt": "2023-10-03T19:25:21Z",
      "closedAt": "2023-10-03T19:25:21Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Would this be more of a concern for the identity chaining draft rather than the transaction tokens draft?",
          "createdAt": "2023-07-06T20:38:03Z",
          "updatedAt": "2023-07-06T20:38:03Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I was expecting to see it in the transaction token draft because I think this will be the more common use case - most workloads will operate within a trust boundary, and crossing it will be less frequent. We can the reference it in the Identity Chaing draft and make any tweaks we need to make there (hopefully we can just inherit it all from the transaction token draft).",
          "createdAt": "2023-07-07T08:20:38Z",
          "updatedAt": "2023-07-07T08:20:38Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "The azc claim in the latest draft describes how to represent transcribed claims. ",
          "createdAt": "2023-10-03T19:25:21Z",
          "updatedAt": "2023-10-03T19:25:21Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOJt_WwM5qklid",
      "title": "Short lived tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/6",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need additional guidance on batch or long-lived sessions - more than 30% of workloads run for more than 5 minutes and not solving for them is problematic. One approach is to remove the requirement on short lived or leave it to the implementor to decide what short lived means, Another is to recommend the use of standards like SSF/CAEP as a mitigation for long-lived tokens where the security properties matter. ",
      "createdAt": "2023-07-04T13:51:09Z",
      "updatedAt": "2023-10-06T16:21:25Z",
      "closedAt": "2023-10-06T16:21:25Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed that we cannot have a token lifetime that won't meet the needs of a significant number of workload requests.  We need a recommendation in the spec though in order to mitigate replay attacks. Just curious: In the \"30% workloads > 5 minutes\" statement, are we talking about a process that handles multiple requests, or 30% requests lasting more than 5 minutes?",
          "createdAt": "2023-07-06T20:37:30Z",
          "updatedAt": "2023-07-06T20:37:30Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't have that detail about the data point. From personal experience, I have seen batch jobs run for hours (23-24 hours in some cases). ",
          "createdAt": "2023-07-07T08:25:52Z",
          "updatedAt": "2023-07-07T08:25:52Z"
        },
        {
          "author": "naveencm4u1",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Will it not cause security issues If we keep the tokens active for a longer time in a batch job where someone internal can access those tokens?",
          "createdAt": "2023-07-07T19:02:05Z",
          "updatedAt": "2023-07-07T19:02:05Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Even in long lived batch jobs, individual RPCs will be short-lived. The external authorization token that impersonates or delegates authority from users can be long lived, in order to generate new Transaction Tokens",
          "createdAt": "2023-07-11T00:16:40Z",
          "updatedAt": "2023-07-11T00:16:40Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOJt_WwM5qkmFJ",
      "title": "TX=Transmit",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/7",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I wonder if we should just call these Transaction Tokens or TTs (although is some orgs TT = Trouble Ticket). Tx is commonly used to signify Transmit in the comms industry, and finding folks with that background will not be unusual in the IETF.",
      "createdAt": "2023-07-04T13:52:31Z",
      "updatedAt": "2023-08-01T01:09:28Z",
      "closedAt": "2023-08-01T01:09:28Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "From our Slack conversation, perhaps TxT Token?",
          "createdAt": "2023-07-07T08:26:44Z",
          "updatedAt": "2023-07-07T08:26:44Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOJt_WwM5qknIy",
      "title": "Robotic Prinicpal = Machine (or perhaps specifically Workload)?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/8",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It's been a challenge to find a consistent and commonly understood term for non-human identities (synthetic identities have their own meaning, machine identities implies a machine, device identities imply devices and workloads imply software). I like the Gartner taxonomy that classifies workload and device identities as subset of the machine identity realm. PErhaps we can use that term consistently and help frame the conversation in language the industry is adopting elsewhere?",
      "createdAt": "2023-07-04T13:55:15Z",
      "updatedAt": "2023-09-29T16:31:17Z",
      "closedAt": "2023-09-29T16:31:17Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed.",
          "createdAt": "2023-07-06T20:28:37Z",
          "updatedAt": "2023-07-06T20:28:37Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOJt_WwM5qkvYj",
      "title": "Tx-Token Service -> Tx-Token endpoint?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/10",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Is the Tx-Token Service really just another endpoint?",
      "createdAt": "2023-07-04T14:14:05Z",
      "updatedAt": "2023-08-01T01:11:21Z",
      "closedAt": "2023-08-01T01:11:21Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed [here](https://hackmd.io/@rpc-sec-wg/notes-20232107). Closing since we decided to call it a service in the end.",
          "createdAt": "2023-08-01T01:11:21Z",
          "updatedAt": "2023-08-01T01:11:21Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOJt_WwM5qkwwq",
      "title": "Security Considerations: Leaf vs Nested Tx-Tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/11",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Nested TraTs"
      ],
      "body": "Add section giving guidance on security properties of nested vs leaf tokens.",
      "createdAt": "2023-07-04T14:17:42Z",
      "updatedAt": "2023-10-03T19:34:14Z",
      "closedAt": "2023-10-03T19:34:14Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "No longer relevant with removal of nested tokens.",
          "createdAt": "2023-10-03T19:34:14Z",
          "updatedAt": "2023-10-03T19:34:14Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOJt_WwM5qkxiM",
      "title": "Leaf Tx-Token Claims",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/12",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "How is the workload identity captured in the leaf tokens and other subsequent tokens (sub_id is reserved for the original subject, how is the workload ids represented)?",
      "createdAt": "2023-07-04T14:19:13Z",
      "updatedAt": "2023-10-03T19:36:39Z",
      "closedAt": "2023-10-03T19:36:38Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in latest version of the spec",
          "createdAt": "2023-10-03T19:36:38Z",
          "updatedAt": "2023-10-03T19:36:38Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOJt_WwM5rZFsz",
      "title": "Txt token Header ",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/21",
      "state": "CLOSED",
      "author": "naveencm4u1",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I assume the token is sent in the header. Do we have any recommendations for the header name?",
      "createdAt": "2023-07-12T20:48:47Z",
      "updatedAt": "2024-02-01T22:48:57Z",
      "closedAt": "2024-02-01T22:48:57Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "In what situations would we have multiple tokens such that leveraging the Authorization header is not sufficient? My preference would be to leverage the Authorization header. Receiving entities can distinguish token types based on the JWT Header. ",
          "createdAt": "2023-09-05T18:56:46Z",
          "updatedAt": "2023-09-05T18:56:46Z"
        },
        {
          "author": "naveencm4u1",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@gffletch It is mainly in the transition phase. In our case, we want to pass both Access Token and Transaction Token until all the downstream are ready.",
          "createdAt": "2023-09-05T20:35:56Z",
          "updatedAt": "2023-09-05T20:35:56Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "This topic has come up again so re-opening the issue as it's something I think we need to address in the specification.",
          "createdAt": "2023-10-31T11:11:58Z",
          "updatedAt": "2023-10-31T11:11:58Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Duplicate of #49 ",
          "createdAt": "2023-11-14T00:12:51Z",
          "updatedAt": "2023-11-14T00:12:51Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe, this issue can be closed as well?",
          "createdAt": "2024-01-30T11:54:40Z",
          "updatedAt": "2024-01-30T11:54:40Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOJt_WwM5sqqbb",
      "title": "tid and azc are introduced without calling out they're being defined",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/22",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We should point out in 5.2.2 that \"tid\" and \"azc\" are being defined there. (From Dr. Kelley W Burgin)",
      "createdAt": "2023-07-26T20:36:02Z",
      "updatedAt": "2023-09-29T16:29:47Z",
      "closedAt": "2023-09-29T16:29:47Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOJt_WwM5sqrFw",
      "title": "tid claim is required (section 5.2.2), but what about calls that aren't app specific",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/23",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Dr. Kelley W Burgin\r\n",
      "createdAt": "2023-07-26T20:38:23Z",
      "updatedAt": "2023-10-06T16:21:14Z",
      "closedAt": "2023-10-06T16:21:14Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Kelly, can you clarify? The 'tid' claim; now 'txn' is just an identifier for the transaction.",
          "createdAt": "2023-09-27T13:35:51Z",
          "updatedAt": "2023-09-27T13:35:51Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Clarify this in the draft.",
          "createdAt": "2023-09-29T16:10:51Z",
          "updatedAt": "2023-09-29T16:10:51Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOJt_WwM5sqroH",
      "title": "What does the AS do with the values in \"azc\"?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/24",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Dr. Kelley W. Burgin\r\nSection 6.2: What does the AS do with the values in \u201cazc\u201d? Are they included in the transaction token? Can I put anything I want in \u201cazc\u201d?",
      "createdAt": "2023-07-26T20:40:16Z",
      "updatedAt": "2023-08-09T18:20:08Z",
      "closedAt": "2023-08-09T18:20:08Z",
      "comments": []
    },
    {
      "number": 30,
      "id": "I_kwDOJt_WwM5vVD62",
      "title": "azc content recommendations?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/30",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tulshi"
      ],
      "labels": [],
      "body": "              Are there any recommendations on the type of data to include or not include in `azc`? Or is it up to the individuals to encrypt if there is any sensitive data in it?\r\n\r\n_Originally posted by @naveencm4u1 in https://github.com/SGNL-ai/transaction-tokens/pull/29#discussion_r1296765403_\r\n            ",
      "createdAt": "2023-08-25T23:51:30Z",
      "updatedAt": "2023-10-18T04:10:18Z",
      "closedAt": "2023-10-18T04:10:17Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I think details about the transaction itself (e.g. a RAR structure) could be put in the 'azc' but in their own sub-object. Generally, my thoughts have been the primary contents is the context of the transaction itself. Who requested the token, the purpose of the transaction, maybe other context that should be immutable (e.g. source IP address, device identifier, time of day, type of authorization token [bearer vs sender-constrained], ...)",
          "createdAt": "2023-09-05T18:53:39Z",
          "updatedAt": "2023-09-05T18:53:39Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I feel some of this information (requester, source IP, device ID) may be more interesting from an offline analysis point of view, rather than the transaction processing point of view. If so, the TraT service should just log this information instead of putting it into the TraT in order to prevent token bloat. If it is needed for transaction processing, it can always be included in the `azc` field.",
          "createdAt": "2023-09-25T18:45:03Z",
          "updatedAt": "2023-09-25T18:45:03Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So for me, a minimum set is...\nRequesting Entity (GW, Application, etc)\nPurpose of the transaction (to allow for \"downscoping\")\nSubject of the transaction (user/machine id)\n\nI do think that preserving other context of the transaction is useful from any risk engine that might be used by a downstream workload. But maybe we can separate that out. \n\n{\n  'iss'\n  ...\n  'azc'\n  'cxt' /* OPTIONAL: context of the transaction */\n  'azd' /* OPTIONAL: Authorization details */\n}\n\nThe 'azd' claim would allow for the additional information like what can be provided in RAR.\n\nThe 'cxt' claim would allow for capturing other contextual details of the transaction. As optional, it can be left out to reduce token bloat.",
          "createdAt": "2023-09-27T13:11:37Z",
          "updatedAt": "2023-09-27T13:11:37Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds reasonable. We have the subject `sub_id` claim. Should we add a sub-container or just have specific fields for the originator and purpose claims?",
          "createdAt": "2023-09-27T17:05:23Z",
          "updatedAt": "2023-09-27T17:05:23Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "It would be good to show how, in a replacement txn-token, the identity of the previous sub_id is preserved. The replacement token may have a new sub_id that represent the workload that requested the replacement token.",
          "createdAt": "2023-10-03T19:42:09Z",
          "updatedAt": "2023-10-03T19:42:09Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed in PR #43 ",
          "createdAt": "2023-10-18T04:10:17Z",
          "updatedAt": "2023-10-18T04:10:17Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOJt_WwM5xDCy8",
      "title": "Change tid claim name",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/31",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "PieterKas"
      ],
      "labels": [],
      "body": "Implementation feedback. The \"tid\" claim clashes with a claim commonly used in AAD for the tenant ID. Perhaps we can use an alternative like idt, txi, txnid, txn_id or tti?",
      "createdAt": "2023-09-14T13:50:16Z",
      "updatedAt": "2023-10-05T23:26:11Z",
      "closedAt": "2023-10-05T23:26:11Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in the identity chaining call. Recommendation is to use the 'txn' claim name as defined in RFC 8417.",
          "createdAt": "2023-09-15T16:15:05Z",
          "updatedAt": "2023-09-15T16:15:05Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Add reference to SET add RFC 8417",
          "createdAt": "2023-09-29T16:14:51Z",
          "updatedAt": "2023-09-29T16:14:51Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOJt_WwM5xLPpk",
      "title": "IANA considerations for txn_token type",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/32",
      "state": "CLOSED",
      "author": "arndt-s",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I believe we should add an IANA consideration and propose to register `urn:ietf:params:oauth:token-type:txn_token`.",
      "createdAt": "2023-09-15T16:48:29Z",
      "updatedAt": "2023-09-22T16:40:00Z",
      "closedAt": "2023-09-22T16:40:00Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for this email and adding the issues to GitHub. I will update the\r\nspec shortly.\r\n\r\nOn Fri, Sep 15, 2023 at 9:48\u202fAM Arndt Schwenkschuster <\r\n***@***.***> wrote:\r\n\r\n> I believe we should add an IANA consideration and propose to register\r\n> urn:ietf:params:oauth:token-type:txn_token.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/SGNL-ai/transaction-tokens/issues/32>, or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG2NFDHWDE7USMWVPDLX2SBGPANCNFSM6AAAAAA42CJ2YU>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n",
          "createdAt": "2023-09-15T22:58:17Z",
          "updatedAt": "2023-09-15T22:58:17Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOJt_WwM5xLQCF",
      "title": "IANA considerations for azc claim",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/33",
      "state": "CLOSED",
      "author": "arndt-s",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I believe we should add an IANA consideration to propose the registration of azc claim.\r\nA list of registered claims can be found here: https://www.iana.org/assignments/jwt/jwt.xhtml#claims",
      "createdAt": "2023-09-15T16:49:47Z",
      "updatedAt": "2023-09-22T16:40:00Z",
      "closedAt": "2023-09-22T16:40:00Z",
      "comments": []
    },
    {
      "number": 34,
      "id": "I_kwDOJt_WwM5xW0Ii",
      "title": "Clarification on the aud claim in Txn-Token format and examples",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/34",
      "state": "CLOSED",
      "author": "appsdesh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> A Trust Domain must have an identifier that is used as the aud (audience) value in Txn-Tokens. The format of this identifier is a universal resource identifier. Each Trust Domain has exactly one Txn-Token Service\r\n\r\nLet's clarify the `aud` claim in examples of [the Txn Token format section ](https://www.ietf.org/archive/id/draft-tulshibagwale-oauth-transaction-tokens-03.html#name-txn-token-format)",
      "createdAt": "2023-09-18T21:53:44Z",
      "updatedAt": "2023-11-14T00:11:43Z",
      "closedAt": "2023-11-14T00:11:43Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Decision: update the example.\r\n\r\nMove context out, add aud.",
          "createdAt": "2023-10-06T16:20:49Z",
          "updatedAt": "2023-10-06T16:20:49Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this issue has been resolved.",
          "createdAt": "2023-11-14T00:11:43Z",
          "updatedAt": "2023-11-14T00:11:43Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOJt_WwM5xW1Gr",
      "title": "How do internal services authorize the Transaction Tokens?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/35",
      "state": "CLOSED",
      "author": "appsdesh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Can we clarify in the examples how do internal services authorize the Transaction tokens?\r\n1. Are all the internal services bootstrapped with the token service public key?\r\n2. How do internal services know the boundaries of the trust domain or whether is it part of it?",
      "createdAt": "2023-09-18T21:57:27Z",
      "updatedAt": "2024-02-01T22:48:39Z",
      "closedAt": "2024-02-01T22:48:39Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "You can use something like SPIFFE to establish internal trust between services. The public key for the TraT service can be delivered as a part of the trust bundle.",
          "createdAt": "2023-09-21T23:22:51Z",
          "updatedAt": "2023-09-21T23:22:51Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So one though is that if the Transaction Token has an \u2018iss\u2019 claim then the public key should be discoverable. I don\u2019t think that has to be the only way to obtain the public key but it is one way systems could do it. This obviously doesn\u2019t need to be done on every request.",
          "createdAt": "2023-09-23T21:04:56Z",
          "updatedAt": "2023-09-23T21:04:56Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposal: make the iss claim mandatory and then reference existing mechanisms to discover public keys (maybe from jwks?). Also allow for other mechanisms to discover. General idea is to use the iss claim to discover the public key.",
          "createdAt": "2023-10-06T16:15:44Z",
          "updatedAt": "2023-10-06T16:15:44Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't like to make iss claim mandatory. If all services operate within the same trust boundary, they already know their trusted authorization server and an iss claim would just add clutter and unnecessary data to the token. Also it would mean that one had to already trust some data within the transaction token before being able to validate its signature. This could lead to a rogue component to send requests to an internal service with carefully crafted transaction tokens with an iss pointing to another server the rogue component has control over. To prevent injecting rogue iss, the internal service would need to validate the provided iss value with a preconfigured list of allowed ones.\r\n\r\nIn our environment (trust boundary) where we are using internal tokens for transactions, the internal services have the authorization server's host name configured. Internal services can decide to pull (and cache) the jwks from the well-known url and validate the tokens locally or they can use the token introspection endpoint of the authorization server for validating the token. Validating the internal/transaction tokens with token introspection is useful for some sensitive operations and has the benefit that this validation can fail if for instance the access token the transaction token was derived from got revoked or the authentication context associated with the tokens got flagged.\r\n",
          "createdAt": "2023-10-26T07:52:17Z",
          "updatedAt": "2023-10-26T07:52:17Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "@obfuscoder 's point about all services in the same trust domain know the issuer and putting the `iss` field adds clutter is valid. We can make that field optional in the draft. I believe it is required right now. [Section 5.2.1](https://www.ietf.org/archive/id/draft-tulshibagwale-oauth-transaction-tokens-01.html#name-common-claims).\r\n\r\nEven if we made this claim optional, we should still note the point about validating the `iss` claim so that it prevents external issuers from being trusted by internal services in the Security Considerations section.",
          "createdAt": "2023-10-26T20:45:02Z",
          "updatedAt": "2023-10-26T20:45:02Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "As the required iss claim is now replaced with the required aud claim, there should be some validation guidelines for this parameter.\r\n\r\nIn the absence of the iss claim, discovery is not available and either SPIFFE or preconfigured URLs of the TTS and/or its JWKS is possible.",
          "createdAt": "2024-01-30T11:53:25Z",
          "updatedAt": "2024-01-30T11:53:25Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "we have made `iss` optional now, after much discussion, so closing this issue.",
          "createdAt": "2024-02-01T22:48:39Z",
          "updatedAt": "2024-02-01T22:48:39Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOJt_WwM5ysCEy",
      "title": "Do we still need the \"Leaf-TXN\" token concept.",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/40",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "PieterKas"
      ],
      "labels": [],
      "body": "Now that nested tokens are removed, should we retain the leaf txn concept?\r\n\r\nSuggestion is to remove all mention of \"leaf-txn token\" throughout the doc.",
      "createdAt": "2023-10-03T13:22:37Z",
      "updatedAt": "2023-10-11T17:25:40Z",
      "closedAt": "2023-10-11T17:25:40Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Decision to remove.",
          "createdAt": "2023-10-06T16:10:17Z",
          "updatedAt": "2023-10-06T16:10:17Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this PR was merged. Closing the issue, but please reopen if I am mistaken.",
          "createdAt": "2023-10-11T17:25:40Z",
          "updatedAt": "2023-10-11T17:25:40Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOJt_WwM50J9VG",
      "title": "It would be good to show how, in a replacement txn-token, the identity of the previous sub_id is preserved. The replacement token may have a new sub_id that represent the workload that requested the replacement token.",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/44",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "pre-adoption"
      ],
      "body": "              It would be good to show how, in a replacement txn-token, the identity of the previous sub_id is preserved. The replacement token may have a new sub_id that represent the workload that requested the replacement token.\r\n\r\n_Originally posted by @PieterKas in https://github.com/SGNL-ai/transaction-tokens/issues/30#issuecomment-1745613590_\r\n            ",
      "createdAt": "2023-10-18T04:09:25Z",
      "updatedAt": "2024-03-25T23:32:34Z",
      "closedAt": "2024-03-25T23:32:34Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close this since it was addressed in PR #71?",
          "createdAt": "2024-03-19T22:38:51Z",
          "updatedAt": "2024-03-19T22:38:51Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOJt_WwM51GAj8",
      "title": "\"sender constrained\" language needs improvement",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/48",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The language in section [Sender Constrained Tokens](https://www.ietf.org/archive/id/draft-tulshibagwale-oauth-transaction-tokens-01.html#name-sender-constrained-tokens) needs to refer to the RFC and specify how to use them with Txn-Tokens",
      "createdAt": "2023-10-26T23:19:03Z",
      "updatedAt": "2024-02-02T16:49:42Z",
      "closedAt": "2024-02-02T16:49:42Z",
      "comments": []
    },
    {
      "number": 49,
      "id": "I_kwDOJt_WwM51GBCr",
      "title": "Using Txn-Tokens securely",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/49",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pre-adoption"
      ],
      "body": "We need to add in the [Security Considerations](https://www.ietf.org/archive/id/draft-tulshibagwale-oauth-transaction-tokens-01.html#name-security-considerations) section, information on how services may use Txn-Tokens securely, by possibly using them in conjunction with SPIFFE or other service-to-service security mechanisms.\r\n\r\n(based on feedback by Kai Lehmann (@obfuscoder))",
      "createdAt": "2023-10-26T23:21:58Z",
      "updatedAt": "2024-01-29T19:00:18Z",
      "closedAt": "2024-01-29T19:00:18Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "#21 talks about the same issue, but this is a broader statement.",
          "createdAt": "2023-11-14T00:14:05Z",
          "updatedAt": "2023-11-14T00:14:05Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "We will use a new header named \"Txn-Token\"",
          "createdAt": "2024-01-19T17:41:24Z",
          "updatedAt": "2024-01-19T17:42:49Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOJt_WwM52d2ec",
      "title": "Separate transaction tokens from JWT",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/50",
      "state": "OPEN",
      "author": "jricher",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To me, the real value here is the semantics around the payload, and less directly tied to the JWT format as its container. In particular, it seems like the payload could benefit from some of the disclosure capabilities of things like SD-JWT to allow the system to mask certain values from some parties within the trust domain.\r\n\r\nConsequently, perhaps the document should focus on the payload and semantics, or explicitly show ties to both JWT and SD-JWT (and maybe CWT and others?) from the payload definition.",
      "createdAt": "2023-11-10T12:29:35Z",
      "updatedAt": "2024-03-22T13:28:59Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "That is an interesting restructuring to the doc. Basically a conceptual section and then bindings to particular formats allowing for profiles to other encodings? Is that the general idea?",
          "createdAt": "2023-11-11T04:28:00Z",
          "updatedAt": "2023-11-11T04:28:00Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "Are we considering opaque token formats as an alternative as well? Those formats could not be verified (e.g. signature check) by the workloads locally, but would require incorporating Token Introspection to get the data. For performance reasons, the format should at least be defined as self contained and verifiable locally. CWT as well as (SD-)JWT would have these properties. In the IETF meeting protobuf was mentioned. As far as I know, protobuf does not have this property, so I don't see it as a fitting candidate.\r\n\r\nWe also need to consider interoperability. If the spec allowed for multiple formats (or even leaves the format out of the specification), generic libraries/frameworks to implement the protocol would need to support not just one but a lot of formats or even make the format (serialization/deserialization) pluggable. Although this might be a good idea anyway, it tends to be more complex.\r\n\r\nIn regards to selective disclosure: The purpose of the transaction token is to pass it along the transaction call chain. So if there is specific data of the original presented Access Token not to be disclosed in the transaction token, the TTS would simply not add it in the transaction token when issuing it. Although a workload can choose to exchange the transaction token for another one, the purpose was to narrow the scope to further limit the access which the new transaction token could be used for. At this point the new transaction token could contain even less information than the original transaction token. I don't think that there should be more information disclosed at this point. That's why I don't think that SD-JWTs would have an application here.\r\n\r\nOn the other hand, I do see an application for a transaction token which contains specific information for specific workloads along the call chain. I can see some similarities to Rich Authorization Requests (RAR) where there can be PII/resource identifiers in the transaction token which should only be visible to some workloads even if the transaction token is passed along through all participating workloads.\r\n",
          "createdAt": "2024-03-22T13:28:46Z",
          "updatedAt": "2024-03-22T13:28:59Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "I_kwDOJt_WwM52iZ-T",
      "title": "Should the azd claim be mandatory or optional",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/52",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pre-adoption"
      ],
      "body": "I\u2019m wondering if we should move the `azd` claim to the Optional section as there may be some cases where it\u2019s not required. I\u2019d hate for systems to have to process and empty `azd` object. We might be able to leave it in the MUST category if we add text that says if there are no `azd` claims then the object MUST NOT be included in the transaction token.",
      "createdAt": "2023-11-11T04:51:17Z",
      "updatedAt": "2024-02-01T22:33:10Z",
      "closedAt": "2024-02-01T22:33:10Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Since we no longer have an optional and mandatory section, I shall close this issue. Please reopen if you think this needs to be addressed.",
          "createdAt": "2024-02-01T22:33:10Z",
          "updatedAt": "2024-02-01T22:33:10Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOJt_WwM529ErC",
      "title": "Transaction Tokens for S2S calls",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/53",
      "state": "CLOSED",
      "author": "dteleguin",
      "authorAssociation": "NONE",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "> Cryptographically protected Txn-Tokens ensure that downstream workloads cannot make unauthorized modifications to such information, and cannot make spurious calls without the presence of an external trigger.\r\n\r\nWhat about legitimate (non-spurious) calls without the presence of an external trigger?\r\n\r\nA transaction might be initiated by an internal component (e.g. triggered by a scheduler). In this case, there will be no external context (`req_ctx`) and no user (human) identity. However, transaction details (`purp` and `azd`) might still be relevant.\r\n\r\nCan TX Tokens cover this use case as well? The benefits will be unified token issuance and verification process for both external- and internal-initiated transactions. The only alternative in the OAuth world I could think of is the Client Credentials Grant, but it doesn't specify how to push transaction-specific data. Also, the result will be an Access Token and not a Txn-Token, which assumes that downstream workloads must be able to understand both.\r\n\r\nMaybe slightly unrelated, but it is also a bit unclear how should we communicate the desired `azd` and `purp` to the Txn-Token Service? Or is it assumed that everything should be derived from the external token + `rctx`?",
      "createdAt": "2023-11-15T22:58:21Z",
      "updatedAt": "2024-06-14T15:27:25Z",
      "closedAt": "2024-06-14T15:27:25Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Transaction Tokens can definitely be used with legitimate calls that don't have an external trigger. The key element from an authorization perspective, is \"who is allowed to request an transaction token\" and \"for what purpose(s)\". If any service can request a transaction token, then it's important to limit the scope of how that transaction token can be used. In other words, we wouldn't want the logging service to be able to request a transaction service for the purpose of transferring crypto from a user's account.\r\n\r\nI would argue that there is still a `req_ctx` in this case, it may just contain different claims. I would expect downstream systems to want to know the originating workload that requested the transaction token.\r\n\r\nAs for `azd`, I agree that there are use cases where that needs to be specified to the Transaction Token service.\r\n\r\nGreat points on areas where we need to enhance the specification.",
          "createdAt": "2023-12-07T14:46:42Z",
          "updatedAt": "2023-12-07T14:46:42Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "Reviewing this issue, I can see a relation with #62. As it has been established that requesting Txn-Tokens without an external trigger is needed. however, the current spec requires an Access token to be presented in the subject_token parameter and the question is, how an internal batch process would obtain this. @dteguin (and me in the related issue #62) mentioned Client credentials grant for obtaining the AT. However, client credentials grant based ATs may not be related to users referred to with the sub claim, so it may be a challenge to issue Txn-Tokens with a user-related sub when the client credentials grant based AT does not contain one.\r\n\r\nIn #62 I gave an example where a batch processor might be able to present an expired Txn-Token, but there are still scenarios where no AT can be presented in the subject_token parameter or where the presented subject_token does not contain the information necessary to fill and issue the Txn-Token. This information needs to be provided somehow to the TTS. If this information must be part of the subject_token or somehow be obtainable by the TTS via parts of the subject_token content, it should at least be mentioned in the spec.\r\n\r\nPersonally, I'd like to see an option where the TTS can be called without a subject_token as input and instead providing the necessary information via additional parameters (e.g. sub within the req_ctx). It goes without saying, that this type of Token issuance should only be allowed to a very limited set of authenticated clients which have a special trust relationship with the TTS.",
          "createdAt": "2024-01-30T11:49:00Z",
          "updatedAt": "2024-01-30T11:49:00Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that the `subject_token` can be an optional field in the TraT request. We should update the spec to say so. We can discuss this issue on Friday 2/2",
          "createdAt": "2024-02-01T23:44:44Z",
          "updatedAt": "2024-02-01T23:44:44Z"
        },
        {
          "author": "dteleguin",
          "authorAssociation": "NONE",
          "body": "As per RFC 8639, `subject_token` and `subject_token_type` are [required](https://datatracker.ietf.org/doc/html/rfc8693#name-request). Do you think we can \"override\" that in this spec @tulshi ?",
          "createdAt": "2024-02-01T23:49:30Z",
          "updatedAt": "2024-02-01T23:49:30Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "We could agree on some placeholder to avoid being non-compliant with the RFC8693 (in the event that there is no input token)",
          "createdAt": "2024-02-02T00:06:41Z",
          "updatedAt": "2024-02-02T00:06:41Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "There is this \"N_A\" which could be reused here?",
          "createdAt": "2024-02-02T05:51:22Z",
          "updatedAt": "2024-02-02T05:51:22Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm still wondering if we'd want to send in a subject_token all the time rather than have this spec override the Token Exchange spec. We need a 'sub' as part of the TraT so why not use the subject_type to provide it. The `subject_token` value  could be something simple like a String and then the subject_token_type could be urn:...:workload_id",
          "createdAt": "2024-02-20T19:48:04Z",
          "updatedAt": "2024-02-20T19:48:04Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Are the updates to draft 01 sufficient to close this issue? or do we need additional text?",
          "createdAt": "2024-03-19T22:40:16Z",
          "updatedAt": "2024-03-19T22:40:16Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "@gffletch The current draft mentions that the subject_token represents the subject and it could either be a token or simple string. However, the current draft does not say, what should be the subject_token_type if the subject_token contains a simple string. My suggestion would be to register a URN at IANA for this and name it urn:ietf:params:oauth:token-type:subject\r\n",
          "createdAt": "2024-03-22T16:53:03Z",
          "updatedAt": "2024-03-22T16:53:23Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@obfuscoder My original intent was to make this out of scope for the specification as the only entity that needs to understand a subject_token_type value is the Transaction Token Service. If the deployment wants to define a urn:x-example:params:oauth:token-type:email to identify a subject_token value of \"foo@bar.com\" then that is totally fine. I don't think this is an area where specification is required. \r\n\r\nI'm open to options and ways to better support use cases where transaction tokens are needing to be \"minted\" without any existing \"access token\".\r\n\r\nOne such use case could be a service that uses mTLS to unique identify a user (e.g. per user certificate) and then wants to specify that user as the subject of the transaction token. How does the requesting workload specify the \"subject\" (CN of the certificate?) to the Transaction Token Service?",
          "createdAt": "2024-03-29T19:18:31Z",
          "updatedAt": "2024-03-29T19:18:31Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the self-signed token addition to the draft addresses this issue. Please reopen if not addressed fully.",
          "createdAt": "2024-06-14T15:27:25Z",
          "updatedAt": "2024-06-14T15:27:25Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "I_kwDOJt_WwM55gcQk",
      "title": "RFC 9493 and sub_id formats",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/56",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "PR57"
      ],
      "body": "I suspect in many cases the AS that issues an access_token used to obtain an Txn-Token is going to be different than the Transaction Token Service. In that context, the issuer of the 'subject' of the transaction token is different than the issuer of the transaction token itself. \r\n\r\nSection 3.2.3 of RFC 9493 allows for the specification of an issuer and sub within the `sub_id` object. \r\n\r\nShould we require this format? or just leave out of scope of the specification what values are present in the `sub_id` claim of the transaction token?",
      "createdAt": "2023-12-12T21:04:09Z",
      "updatedAt": "2024-02-01T22:47:02Z",
      "closedAt": "2024-02-01T22:47:02Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would definitely not require that format. \r\n\r\nAnd would again suggest that RFC 9493 isn't needed in the Txn-Token context and [JWT's subject](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.2) good enough. ",
          "createdAt": "2023-12-20T21:41:16Z",
          "updatedAt": "2023-12-20T21:41:16Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "My concern with relying on the JWT's subject is that the Transaction Token is issued by the Transaction Token Service which is potentially different than the AS that say issued the access token from which the `sub` claim is determined. In that context, I think the Transaction Token should carry the issuer of the `sub` claim which means the default `sub` and `iss` claims of the JWT are not sufficient.\r\n\r\nOr if the entity requesting the Transaction token is the service that receives inbound mail, and that service wants a transaction token with a purpose of `mail.inbox.delivery`, is the Transaction Token Service the correct issuer of the `sub` which is an email address?",
          "createdAt": "2023-12-20T22:16:47Z",
          "updatedAt": "2023-12-20T22:16:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I feel like there might be an undue emphasis on a relationship between `iss` and `sub` that doesn't truly exist. RFC7519 only mentions uniqueness in the context of an issuer https://www.rfc-editor.org/rfc/rfc7519#section-4.1.2 but not ownership or correctness or semantic meaning. \r\n",
          "createdAt": "2023-12-21T00:12:05Z",
          "updatedAt": "2023-12-21T00:12:36Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "In the context of OpenID and id_tokens there is a clear relationship between the `iss` and the `sub` such that the globally unique identification is the combination of `iss` and `sub`. I've always viewed the relationship of those two claims in that light. Maybe that is an OpenID Connect centric view.",
          "createdAt": "2023-12-21T00:57:54Z",
          "updatedAt": "2023-12-21T00:57:54Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I am somewhat familiar with OpenID Connect ;) But this isn't OpenID Connect. With a Transaction Token the subject just needs to be identified within a single trust domain. ",
          "createdAt": "2023-12-21T13:56:46Z",
          "updatedAt": "2023-12-21T13:56:46Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So that assumes that the `sub` claim MUST be unique within the single trust domain as identified by the `aud` claim.  This might require the Transaction Token Service (TTS) to do some sort of identifier transformation as well as requiring both the AS and the TTS to both be authoritative for the `sub` claim value. This is easy if the AS is managing the transaction token request endpoint but if the TTS is it's own service and deployed in a distributed way, would that still be true?\r\n\r\nI can see the TTS being authoritative for the single trust domain but not necessarily for the `sub` identifier. However, I'm ok with moving in the direction you are suggesting Brian; I just want to make sure we aren't prohibiting some deployments by making that simplification.",
          "createdAt": "2023-12-21T15:41:55Z",
          "updatedAt": "2023-12-21T15:41:55Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "From discussion...\n\n1. 'iss' claim is optional\n2. be clear that there is no relationship between iss and sub claim\n3. sub is unique within context of the 'aud' or trust domain\n4. go back just supporting the `sub` claim (no sub_id)",
          "createdAt": "2024-01-19T17:37:18Z",
          "updatedAt": "2024-01-19T17:37:18Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Added a new commit to PR #57 to address this issue.",
          "createdAt": "2024-01-24T13:21:17Z",
          "updatedAt": "2024-01-24T13:21:17Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "A few months ago, I also suggested to support the sub claim as per JWT RFC. As the current spec has replaced sub_id with sub, I appreciate that the sub claim is supported now.",
          "createdAt": "2024-01-30T11:26:38Z",
          "updatedAt": "2024-01-31T07:08:56Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Kai,\r\nThanks so much for your input in this process.\r\n\r\nAtul\r\n\r\nOn Tue, Jan 30, 2024 at 3:26\u202fAM Kai Lehmann ***@***.***>\r\nwrote:\r\n\r\n> A few months ago, I also suggested to support the sub claim as per JWT\r\n> RFC. As the current spec has replaced sub_id with sub. I appreciate that\r\n> the sub claim is supported now.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/issues/56#issuecomment-1916638607>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG5Y4DBPQOKJBPKGHRLYRDKHTAVCNFSM6AAAAABASDKZWWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSMJWGYZTQNRQG4>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n",
          "createdAt": "2024-01-31T00:51:53Z",
          "updatedAt": "2024-01-31T00:51:53Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Since we have removed sub_ids now, I will close this issue.",
          "createdAt": "2024-02-01T22:47:02Z",
          "updatedAt": "2024-02-01T22:47:02Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOJt_WwM56AT6_",
      "title": "Authorization details presentation and processing",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/58",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "PR57"
      ],
      "body": "PR #57 raised a number of issues around processing of authorization details\r\n\r\n1. How are these details determined by the Transaction Token Service (i.e. where do they come from)?\r\n2. Should all the `azd` claims be visible to all workloads? or should they be restricted to a subset of workloads?\r\n3. Who is authoritative for specifying the claims of the `azd` object\r\n",
      "createdAt": "2023-12-18T15:20:21Z",
      "updatedAt": "2024-02-01T22:32:29Z",
      "closedAt": "2024-02-01T22:32:29Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Some thoughts:\r\n\r\n1.  I think the spec should be un-opinionated about how the TraT service generates the value of `azd` claim. I can see in some instances that the requester has more control over what goes into the claim, and in some cases, the TraT service has more control.\r\n2. A TraT service could implement selective disclosure, although we could recommend in the spec that one should implement it by encrypting certain fields. Stating this makes the actual mechanism for selective disclosure outside the scope of the spec.\r\n3. I believe the TraT service MUST be authoritative for the claims of the `azd` object, because it is signing the TraT.",
          "createdAt": "2023-12-18T17:42:51Z",
          "updatedAt": "2023-12-18T17:42:51Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding (1) -- I think we still need a way for the client to pass in data to the TTS that it can use to generate the values. Even if how all that works is out of scope for the specificatio.\r\n\r\nRegarding (2) and (3) -- I'm ok with leaving the rules out of scope for the specification. The TTS will be authoritative for the resulting `azd` object and whether it should be protected in some way or not.\r\n\r\nI am curious to hear from others as to their thoughts.",
          "createdAt": "2023-12-18T18:31:58Z",
          "updatedAt": "2023-12-18T18:31:58Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggestion to rename `authz_details` to `request_details` and then add a processing rule to the effect of... \"The TTS SHOULD propagate the data from the `request_details` object into claims in the `azd` object as authorized by the TTS authorization policy for the requesting client\"",
          "createdAt": "2024-01-12T17:26:50Z",
          "updatedAt": "2024-01-12T17:26:50Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been fixed AFAIK. Please reopen the issue if it hasn't been fixed by George's PR.",
          "createdAt": "2024-02-01T22:32:29Z",
          "updatedAt": "2024-02-01T22:32:29Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOJt_WwM56AUh2",
      "title": "Use of base64url encoding for request_context and authz_details",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/59",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "PR57"
      ],
      "body": "Should we call out a specific encoding for these JSON objects? ",
      "createdAt": "2023-12-18T15:21:31Z",
      "updatedAt": "2024-01-12T17:55:08Z",
      "closedAt": "2024-01-12T17:55:07Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems fine, re-open if we discover issues with the current PR language",
          "createdAt": "2024-01-12T17:55:07Z",
          "updatedAt": "2024-01-12T17:55:07Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOJt_WwM56AVNO",
      "title": "Use of `actor_token` and `actor_token_type`",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/60",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "PR57"
      ],
      "body": "Should we allow the use of `actor_token` and `actor_token_type` to be used as a means of client authentication for the Transaction Token Service? If not, should explicitly prohibit the use of these parameters in the profile of the Token Exchange spec.",
      "createdAt": "2023-12-18T15:22:56Z",
      "updatedAt": "2024-02-01T22:31:14Z",
      "closedAt": "2024-02-01T22:31:14Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Since RFC8693 (Token Exchange) refers to the `actor_token` as \"A security token that represents the identity of the acting party\", we should not use it in the TraT request. I thought we wanted to have some way to convey the inbound token to the TraT service, and that's why we were using `actor_token`, but that is inconsistent with RFC8693. I think we should neither require nor disallow the use of `actor_token` because some implementations may want that for client auth, and some implementations may want to do something else (e.g. mTLS) for client auth.",
          "createdAt": "2023-12-18T17:53:07Z",
          "updatedAt": "2023-12-18T17:53:07Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "This is kind of what the spec says today. It's not required and up to the implementation. It is just referenced as an example. However, I'm fine removing the example and just being silent in the spec on the topic.",
          "createdAt": "2023-12-18T18:18:37Z",
          "updatedAt": "2023-12-18T18:18:37Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Recommendation to update example and be silent on use of `actor_token` and `actor_token_type`. Add a section to Security Considerations to talk about client authentication and add some non-normative examples.",
          "createdAt": "2024-01-12T17:48:13Z",
          "updatedAt": "2024-01-12T17:48:13Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Removed the additional text regarding possible client authentication methods and just left it that the client MUST authenticate itself to the Transaction Token Service and that the specific client authentication method is out of scope for this specification.",
          "createdAt": "2024-01-24T13:39:37Z",
          "updatedAt": "2024-01-24T13:39:37Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOJt_WwM56AWSf",
      "title": "How is the `purp` claim of the Txn-Token defined?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/61",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "PR57"
      ],
      "body": "In PR #57, the token exchange `scope` parameter is profiled to carry the purpose or intent of the transaction and its value is copied into the `purp` claim of the resulting Txn-Token. \r\n\r\nIs this how we want to handle the 'purp' claim?",
      "createdAt": "2023-12-18T15:25:19Z",
      "updatedAt": "2024-02-01T22:30:57Z",
      "closedAt": "2024-02-01T22:30:57Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I propose that the draft should allow value of the `scope` claim in the TraT request be independent of the `purp` claim in the TraT, because the requesting service may not know sufficient details about how the TraT is actually going to be used. For example, the requester may say the `scope` is \"buy stock\", whereas the `purp` claim could have a value like \"equity trade\"",
          "createdAt": "2023-12-18T17:47:43Z",
          "updatedAt": "2023-12-18T17:47:43Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, so allow the TTS to transform the input scope to the appropriate value (if necessary). I'm ok with that.",
          "createdAt": "2023-12-18T18:28:57Z",
          "updatedAt": "2023-12-18T18:28:57Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Recommended change that the TTS MUST take the value of the `scope` parameter to determine the `purp` claim of the TraT.",
          "createdAt": "2024-01-12T17:32:59Z",
          "updatedAt": "2024-01-12T17:32:59Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on this feedback, the `purp` claim is being made REQUIRED.",
          "createdAt": "2024-01-24T13:35:18Z",
          "updatedAt": "2024-01-24T13:35:18Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "I_kwDOJt_WwM58ELrW",
      "title": "Long-living Access Token needed for internal batch processes/offline tasks?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/62",
      "state": "OPEN",
      "author": "obfuscoder",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current spec states:\r\n\r\n\"Even for long-running \"batch\" jobs, a longer lived access token should be used to initiate the request to the batch endpoint. It then obtains short-lived Txn-Tokens that may be used to authorize the call to downstream services in the call-chain.\"\r\n\r\nI assume the reasoning behind this is that there would be no need to define a Txn-Token Request without an original Access Token. However, I think that creating long-living Access Tokens just for the purpose of exchanging them for short-lived Txn-Tokens and then throwing them away can be considered wasteful (energy costs). Every internally originating job would need at least two calls instead of just one to obtain the Txn-Token.\r\n\r\nKeeping those long-living Access Tokens around to re-use them for longer time is usually not useful for batch processes as those processes operate on a lot of user accounts in quick succession. Maintaining all those Access Tokens in memory is often not feasible. Neither is a storage system. I also think that using long-living Access Tokens in this scenario can add security risks. Those Access Tokens could leak and another party could use them to create Txn-Tokens or access resources the Access Token was meant for.\r\n\r\nIn our own implementation of a Txn-Service, the Txn-Service (Token Exchange) is also providing the Token endpoint and allows specific internal clients to use the Client Credentials Grant Type (mTLS client certificates) to obtain Txn-Tokens right away. The necessary input parameters are essentially a combination of the Token Request based on Client Credentials Grant and Token Exchange with a Txn-Token profile.\r\n\r\nIs it possible to extend the Txn-Token Service interface to allow Txn-Token Requests without the Access Token as input? This would essentially mean to define a Txn-Token profile for the Token endpoint in addition to the Token Exchange protocol.",
      "createdAt": "2024-01-15T08:11:42Z",
      "updatedAt": "2025-02-17T10:07:59Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So a couple of thoughts here:\r\n\r\n1. I believe the Txn-Token Service (TTS) must be able to issue Txn-Tokens without a previously issued access_token. Think about a use case where email is being delivered to a mail box. SMTP does not carry the access token that authorized the sending of the email. In that context, the in-bound email server needs to be able to request a Txn-Token for the purpose of delivering the email to the specified inbox.\r\n2. The general intent for keeping Txn-Tokens very short lived is to remove the need for revocation. Revocation is difficult for any token system (see the issuer-holder-verifier efforts in this space). Given that the vast majority of transactions complete in a very short timeframe, keeping the life-time of the Txn-Token short makes a lot of sense.\r\n3. There are some edge cases where a longer lived Txn-Token may be beneficial or required.  Say for instance a user asks for their account to be deleted (GDPR) and the Txn-Token needs to live for multiple days? even though the underlying identity system may have cleaned up the user identifier data. That said, these edge cases should be vetted very carefully as there is a security risk if a Txn-Token lives for a long time and hence can be replayed potentially in compromising ways.",
          "createdAt": "2024-01-29T16:43:21Z",
          "updatedAt": "2024-01-29T16:43:21Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "The use cases you mention are pretty much what we had to implement.\r\n\r\n1. For incoming mails we have a mail delivery agent which wants to use the mail storage system service to store the mail in the user mailbox. In order to write to the mailbox of a user, the delivery agent needs a Txn-Token with the sub of the user. The delivery agent asks the TTS about a Txn-Token and presents its client credentials and the mail address of the recipient/user. The TTS allows issuing Txn-Tokens to the delivery agent. There is no long-living access token involved. The issued Txn-Token is short lived (1 minute in our deployments).\r\n\r\n3. Whenever a user cancels their contract, we have to keep the data for some time (number of days depending on type of data, legal restrictions, etc.) after the delete operations are performed. The delayed delete operation is done by batch processes. Now, instead of creating and storing long-living access tokens which could be leaked and abused elsewhere, we decided to retain the short-lived Txn-Tokens and allow only those batch processes to ask the TTS to issue new Txn-Tokens for already expired Txn-Tokens to perform the actual delete operation which requires a valid and not expired Txn-Token when calling the storage system services.\r\n\r\nSo my argument is against using (and potentially abusing) long-living access tokens, and instead for allowing expired Txn-Tokens to be presented to the TTS to re-issue Txn-Tokens for the purpose of finalizing a delayed operation.",
          "createdAt": "2024-01-30T11:17:56Z",
          "updatedAt": "2024-01-30T11:18:24Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I do not think we should allow the use of expired TraTs to authorize the issuance of new TraTs. This can be abused for token replay attacks, and negates the security we get through short-lived TraTs.",
          "createdAt": "2024-02-01T22:30:26Z",
          "updatedAt": "2024-02-01T22:30:26Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "@tulshi Good point. In order to get a new TraTs, the caller needs proper client authentication (e.g. SPIFFE, mTLS, or Basic Auth credentials). My point was to only allow specific authenticated clients the exchange of expired TraTs. It is true that if those clients get hacked themselves (and the client authentication can be done by an attacker) new TraTs can be created and abused.\r\n\r\nHowever, longer living TraTs have also the risk of being abused with replay attacks. I think the risk for replay attacks with longer living TraTs is even higher as an attacker would just need to get hold of the long-living TraTs and does not have the need to renew it.\r\n",
          "createdAt": "2024-02-02T05:46:46Z",
          "updatedAt": "2024-02-02T05:46:46Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Using an expired Txn-Token has some interesting properties. Assuming the `purp` claim is narrowly scoped, the TTS should NOT issue a new Txn-Token with a different `purp` value. \n\nI would probably recommend creating very specific `purp` values for this use case and then only allowing specific clients to request a Txn-Token where the `subject_token` value is the expired Txn-Token. This is currently allowed within the spec... the question might be whether we want to explicitly encourage or discourage such behavior.\n\nIn my mind, using an expired Txn-Token is a bit like requesting a replacement Txn-Token except the processing rules are even more strict.",
          "createdAt": "2024-03-19T22:48:04Z",
          "updatedAt": "2024-03-19T22:48:04Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "Indeed, the spec does not say anything about whether and how the TTS is validating the txn token before issuing a replacement txn-token. So presenting an already expired txn-token can be accepted based on the authenticated client, purpose and scope. After all, it can be a specifically defined policy.\r\n\r\nI recommend that we at least acknowledge this case in the spec and give guidance when to use it. As we also have the case of not presenting any token when requesting a txn-token (see #53), I think that as long as a workload is in possession of a txn-token - even if it is expired - we should recommend to present it when requesting replacement txn-tokens. It should be the decision of the TTS whether to accept the expired txn-token and not of the workload (the workload could just take the subject from the expired token and present it as the subject_token to the TTS).\r\n\r\nOne additional aspect came to our attention. There are actually two cases for expired txn-tokens:\r\n\r\n1. The exp claim says it is expired, but the signature is still valid\r\n2. The signature is not valid (anymore) as the key used to sign the token is not available anymore\r\n\r\nDepending on how frequently a TTS is rotating its key material, the second case might occur for such long running processes like deleting account data several weeks after the customer has cancelled their contract. For instance our TTS implementation is rotating the keys daily. Only the next, current and previous signing keys are provided to workloads (via JWKS uri). Even if a workload is not able to verify the signature of a txn-token it received several weeks ago, the TTS might still be able to keep the old key material for a longer period so that it can at least validate the signature of those txn-tokens.\r\n",
          "createdAt": "2024-03-22T16:46:59Z",
          "updatedAt": "2024-03-22T16:46:59Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "Should this issue be consolided together with #111 ",
          "createdAt": "2025-02-17T10:07:56Z",
          "updatedAt": "2025-02-17T10:07:56Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "I_kwDOJt_WwM58EStr",
      "title": "audience REQUIRED for just one trust domain?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/63",
      "state": "CLOSED",
      "author": "obfuscoder",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This issue is somewhat related to the aud claim comment I made earlier via mail to the authors.\r\n\r\nThe spec states that audience parameter is REQUIRED in the Txn-Token request. It contains the trust domain. To my understanding, every trust domain has a single (logical) Txn-Service. A Txn-Service is usually configured to only issue Txn-Tokens to one and only one trust domain. Also the authenticating clients which the Txn-Service accepts in incoming requests are part of that trust domain. After all, they have been registered within that trust domain. It might be possible that the Txn-Service is used in multiple trust domains. In those scenarios I fully agree that the audience parameter is REQUIRED. My guess is, though, that the most deployed setup will incorporate a single trust domain.",
      "createdAt": "2024-01-15T08:30:44Z",
      "updatedAt": "2024-02-02T19:00:53Z",
      "closedAt": "2024-02-02T19:00:53Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So, with the move to bind the `sub` claim to the trust domain identified by the `aud` claim, I believe we should keep it to be required. I also think that there will be deployments with multiple Transaction Token Services (each using their own unique signing keys) that service a single trust domain. \r\n\r\nWhat is the benefit of making the `aud` claim optional?",
          "createdAt": "2024-01-29T14:07:40Z",
          "updatedAt": "2024-01-29T14:07:40Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "> What is the benefit of making the aud claim optional?\r\n\r\nMostly brevity reasons. Also, if it is defined as REQUIRED, it will be enforced by 3rd party libraries which a company might want to integrate in their components/services. This essentially forces the company (albeit using Txn-Tokens within their trust domain only internally) to define and set the aud claim without added benefit.\r\n\r\nHaving aud REQUIRED also implies that the value needs to be validated somehow. I think this aspect should be mentioned in the spec, if it is really required. So every Token service must have the audience parameter validated as well as every service/worker receiving a Txn-Token must validate the aud claim against a configured accepted value (or list of values).\r\n",
          "createdAt": "2024-01-30T10:06:57Z",
          "updatedAt": "2024-01-30T10:06:57Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think `aud` is required to prevent a TraT from being reused in a domain its not supposed to be used in.",
          "createdAt": "2024-02-01T19:27:23Z",
          "updatedAt": "2024-02-01T19:27:45Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as per discussion in meeting on 2/2/24: https://hackmd.io/@rpc-sec-wg/Hk0ggi5ca",
          "createdAt": "2024-02-02T19:00:53Z",
          "updatedAt": "2024-02-02T19:00:53Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "I_kwDOJt_WwM59nfI7",
      "title": "Trust domain/audience claim format URI or StringOrUri?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/66",
      "state": "CLOSED",
      "author": "obfuscoder",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In the Terminology section, the Trust Domain value is being defined and referenced in the aud claim as universal resource identifier. It should be spelled Universal Resource Identifier and a reference to RFC3986 should be added.\r\n\r\nHowever, later in the document, the aud claim value is specified as defined in RFC7519. This RFC defines the aud claim as \"StringOrURI\". The different passages should be aligned.\r\n\r\nFurthermore, the examples for the aud claim values should be aligned accordingly. In section Txn-Token Request the POST request example to the token service uses:\r\n\r\n`&audience=http%3A%2F%2Ftrust-domain.example`\r\n\r\nIf an URI is used, I suggest to use 'https' instead of 'http'.\r\n\r\nLater the JWT body example of the Txn-Token just uses a string:\r\n\r\n`\"aud\": \"trust-domain.example\",`\r\n",
      "createdAt": "2024-01-30T10:38:12Z",
      "updatedAt": "2024-02-02T19:19:10Z",
      "closedAt": "2024-02-02T19:19:10Z",
      "comments": []
    },
    {
      "number": 69,
      "id": "I_kwDOJt_WwM5-FxH9",
      "title": "Do we still need replacement transaction tokens.",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/69",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need to clarify the use case for replacement transaction token and whether we still have it. We included it in the past to preserve call chain information, but it is unclear if we still should address this in the transaction token.",
      "createdAt": "2024-02-02T17:35:56Z",
      "updatedAt": "2024-03-25T23:37:06Z",
      "closedAt": "2024-03-25T23:37:05Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Conversation: https://hackmd.io/@rpc-sec-wg/Hk0ggi5ca",
          "createdAt": "2024-02-02T17:38:18Z",
          "updatedAt": "2024-02-02T17:38:18Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@PieterKas do we still want to keep this issue open? Or are we good with the latest text around replacement transaction tokens?",
          "createdAt": "2024-03-19T22:49:05Z",
          "updatedAt": "2024-03-19T22:49:05Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "@PieterKas you can re-open this if you think we should discuss this.",
          "createdAt": "2024-03-25T23:37:05Z",
          "updatedAt": "2024-03-25T23:37:05Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "I_kwDOJt_WwM6C6a-S",
      "title": "Add GitHub metadata to spec draft",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/72",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-20T00:41:00Z",
      "updatedAt": "2024-03-20T01:35:48Z",
      "closedAt": "2024-03-20T01:35:48Z",
      "comments": []
    },
    {
      "number": 74,
      "id": "I_kwDOJt_WwM6C6gtr",
      "title": "Section 2.2.2 - Needs tighter security controls on replacement tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/74",
      "state": "CLOSED",
      "author": "dhs-aws",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "The following text in 2.2.2 is too open ended and should be refactored.\r\n\r\n> To get a replacement Txn-Token, a service will request a new Txn-Token from the Txn-Token Service and provide the current Txn-Token and other parameters in the request. The Txn-Token service must exercise caution in what kinds of replacement requests it supports so as to not negate the entire value of Txn-Tokens.\r\n\r\nFirst, the text should include specific guidance on replacement tokens to require scopes to remain the same or be down-scoped on replacement.  Second, the draft should include a mechanism to ensure that scopes cannot be increased, or an increase in scope can be detected by downstream services.  Finally, add text to the security considerations section regarding the risks of replacement tokens and/or a malicious txn-token-sts.\r\n\r\n\r\n",
      "createdAt": "2024-03-20T00:47:45Z",
      "updatedAt": "2024-06-21T18:09:26Z",
      "closedAt": "2024-06-21T18:09:26Z",
      "comments": [
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "As far as I understand it, replacement txn-tokens is just a profile to Token Exchange. The Token Exchange RFC defines that an issued token can only have the same or a smaller scope than the presented token. I would assume this applies to replacement tokens as well. If the replacement token mechanism is intended to deviate from Token Exchange in this regard, this should probably be mentioned specifically.",
          "createdAt": "2024-03-25T09:13:07Z",
          "updatedAt": "2024-03-25T09:13:07Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@dhs-aws please review PR #100 and see if I addressed your comments.",
          "createdAt": "2024-06-18T14:15:18Z",
          "updatedAt": "2024-06-18T14:15:18Z"
        },
        {
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Completed.  Looks good to me.",
          "createdAt": "2024-06-18T19:56:27Z",
          "updatedAt": "2024-06-18T19:56:27Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "I_kwDOJt_WwM6DjHwR",
      "title": "Move 'aud' requirement in Trust Domain away from 'Terminology' section",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/76",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "Point from Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/)",
      "createdAt": "2024-03-26T00:51:15Z",
      "updatedAt": "2024-06-14T15:36:29Z",
      "closedAt": "2024-06-14T15:36:29Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "From Yaron:\r\n\r\n> 4: the terminology section is not a good place for normative language, specifically around the \"aud\" claim.",
          "createdAt": "2024-03-29T19:19:17Z",
          "updatedAt": "2024-03-29T19:19:17Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Great point. I think I can move the key aspects into section 5.2",
          "createdAt": "2024-03-29T19:19:48Z",
          "updatedAt": "2024-03-29T19:19:48Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOJt_WwM6DjH6z",
      "title": "`txn` value should be optional",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/77",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/)",
      "createdAt": "2024-03-26T00:52:07Z",
      "updatedAt": "2024-06-21T18:09:48Z",
      "closedAt": "2024-06-21T18:09:48Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Text from Yaron's email:\r\n\r\n5.2: I think txn should be OPTIONAL. While it is very useful, there may be architectural reasons why transaction ID issuance in an organization is independent of transaction tokens.",
          "createdAt": "2024-03-29T14:21:29Z",
          "updatedAt": "2024-03-29T14:21:29Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm curious to the use cases? I'd prefer a way to make the `txn` claim REQUIRED and allow an organization to provide it's own value in that context. Maybe we could go with RECOMMENDED? This is one of those cases where people who know what they are doing can potentially remove it or possibly provide a \"N_A\" value and it will be fine. However, if it's OPTIONAL most developers will not specify the value and then they will lose a lot of value from the Transaction Token.",
          "createdAt": "2024-03-29T14:24:35Z",
          "updatedAt": "2024-03-29T14:24:35Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "No specific use cases, it's just that we're assuming that an organization can easily integrate its (preexisting) transaction ID-issuing service with this one. Sometimes it can, sometimes it can't.\r\n\r\nI'm good with RECOMMENDED.",
          "createdAt": "2024-03-29T15:09:01Z",
          "updatedAt": "2024-03-29T15:09:01Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@yaronf please review PR #101 which addresses this issue",
          "createdAt": "2024-06-18T14:23:15Z",
          "updatedAt": "2024-06-18T14:23:15Z"
        }
      ]
    },
    {
      "number": 78,
      "id": "I_kwDOJt_WwM6DjIGO",
      "title": "`purp` claim name and optionality",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/78",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/):\r\nneed a lot more discussion of this claim, also it may be OPTIONAL too. Also, why not call it \"scope\" if that's what it is?",
      "createdAt": "2024-03-26T00:53:07Z",
      "updatedAt": "2024-06-21T18:08:41Z",
      "closedAt": "2024-06-21T18:08:41Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "From @gffletch:\r\n\r\n- In an external to internal flow, the scopes tend to be broad. The TraT can be set to a more specific to narrow the use of the TraT.\r\n- We could call it scope, but it could be confused with the OAuth scope\r\n- One could set the `purp` value to the actual API that was called to be very specific\r\n\r\nWe should add a sub-section to describe the above in the draft.",
          "createdAt": "2024-06-14T15:44:23Z",
          "updatedAt": "2024-06-14T15:44:23Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOJt_WwM6DjITB",
      "title": "Clarify difference between `rctx` and `azd`",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/79",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tulshi"
      ],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/):\r\nhow is \"azd\" different from \"rctx\"? There's a whole section about \"rctx\" and nothing about \"azd\".",
      "createdAt": "2024-03-26T00:54:10Z",
      "updatedAt": "2024-06-20T21:30:10Z",
      "closedAt": "2024-06-20T21:30:10Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed in meeting on 06/14/2024: Add a subsection for azd, like we agreed to add a section for purp.",
          "createdAt": "2024-06-14T15:49:06Z",
          "updatedAt": "2024-06-14T15:49:06Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "I_kwDOJt_WwM6DjIjw",
      "title": "Extensibility of `azd` and `rctx`",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/80",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "IETF120-discuss",
        "pre-last-call"
      ],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/)\r\nextensibility: please say explicitly that arbitrary claims may be added to the \"azd\" (and \"rctx\"?) objects. There is no IANA registry for either. Note that having 3 predefined attributes complicates the situation a bit - what happens if we want a 4th one? Also mention that any additional attributes are local to the trust domain.",
      "createdAt": "2024-03-26T00:55:37Z",
      "updatedAt": "2025-01-23T17:29:01Z",
      "closedAt": "2025-01-23T17:28:59Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "TraTs are unique within a trust domain, so do we really need an IANA registry for this? We can add a statement that specifies we can add any sub claims appropriate for the specific trust domain.",
          "createdAt": "2024-06-14T15:59:55Z",
          "updatedAt": "2024-06-14T15:59:55Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "We need to add the `azd`, `purp`, and `rctx` claims to the JWT claims registry.  A question we need to address is how the RAR `authorization_details` and `azd` claims differ / coexist. We should do a PR that describes this. We can bring this up as a question in Vancouver. ",
          "createdAt": "2024-06-14T16:06:06Z",
          "updatedAt": "2024-06-14T16:07:33Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Even within a trust domain we may want interoperability between multiple vendor solutions. And there will be token translation services that exchange/translate TraTs between trust domains. All of these would benefit from registering claims.",
          "createdAt": "2024-06-15T15:03:29Z",
          "updatedAt": "2024-06-15T15:03:29Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I look forward to discussing this in Vancouver",
          "createdAt": "2024-06-21T18:10:45Z",
          "updatedAt": "2024-06-21T18:10:45Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed between George, Pieter and I and we thought this is not necessary.",
          "createdAt": "2025-01-23T17:28:59Z",
          "updatedAt": "2025-01-23T17:28:59Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "I_kwDOJt_WwM6DjIv-",
      "title": "Clarify `sub` field",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/81",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/):\r\nsub\" should be better clarified, this is not your typical \u201csub\u201d. Also, I strongly prefer \"sub_id\" here (RFC 9493), as the use case I have an mind is of the subject as a human. In addition, \"as defined by the aud trust domain\" is confusing, I think you want to say that \"sub\" is relative to the scope of the trust domain.",
      "createdAt": "2024-03-26T00:56:39Z",
      "updatedAt": "2024-06-14T15:57:01Z",
      "closedAt": "2024-06-14T15:57:00Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Editors feels that the `sub` format is more appropriate for TraTs. Please reopen if you would like to discuss.",
          "createdAt": "2024-06-14T15:57:00Z",
          "updatedAt": "2024-06-14T15:57:00Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "I_kwDOJt_WwM6DjJ-P",
      "title": "Replacement token `sub` and `aud` modification language",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/82",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There was a point in Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/) about specifying in 7.4.1 that sub must be unchanged, and although this is mentioned in 7.4, perhaps we should add bullet points in 7.4.1 (Txn-Token Service Responsibilities) that specify that `sub` MUST NOT be modified and `aud` MUST NOT be modified.\r\n",
      "createdAt": "2024-03-26T01:03:13Z",
      "updatedAt": "2024-05-17T20:17:53Z",
      "closedAt": "2024-05-17T20:17:53Z",
      "comments": []
    },
    {
      "number": 83,
      "id": "I_kwDOJt_WwM6DjK0H",
      "title": "Privacy section improvements",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/83",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/):\r\n10.1: salted SHA256.\r\n10.1: also, in most cases txn tokens MUST NOT be logged because they contain PII (e.g. a subject that's an email address).",
      "createdAt": "2024-03-26T01:07:44Z",
      "updatedAt": "2024-03-29T16:00:11Z",
      "closedAt": "2024-03-29T16:00:11Z",
      "comments": []
    },
    {
      "number": 84,
      "id": "I_kwDOJt_WwM6DjLbT",
      "title": "Possible confusion in IANA registry section",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/84",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Yaron's [feedback email](https://mailarchive.ietf.org/arch/msg/oauth/qPxczdlhrkWbAu6eD8VmMmqRZj8/) states that:\r\n\"11.1: I think there is some confusion here. It is possibly useful to define this value (if we want to embed txn tokens within access tokens). But the \"typ\" header is a whole different thing, it needs to be a media type. See https://datatracker.ietf.org/doc/html/rfc8725#name-use-explicit-typing\"\r\n\r\nI'm not completely sure about this, so tracking this item",
      "createdAt": "2024-03-26T01:11:08Z",
      "updatedAt": "2024-06-10T23:41:31Z",
      "closedAt": "2024-06-10T23:41:31Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://hackmd.io/@rpc-sec-wg/SyAb2pxI6 from a while back had \"https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-00.html#name-iana-considerations Registration requests are off or missing or \u2026.\" ",
          "createdAt": "2024-04-02T20:00:05Z",
          "updatedAt": "2024-04-02T20:00:05Z"
        }
      ]
    },
    {
      "number": 88,
      "id": "I_kwDOJt_WwM6ED7X3",
      "title": "Additional guidance on privacy in logging ",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/88",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The TraTs spec should add more guidance on privacy in logging.",
      "createdAt": "2024-03-29T16:01:19Z",
      "updatedAt": "2024-06-14T16:09:17Z",
      "closedAt": "2024-06-14T16:09:17Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "addressed in updated draft",
          "createdAt": "2024-06-14T16:09:17Z",
          "updatedAt": "2024-06-14T16:09:17Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOJt_WwM6GpEKU",
      "title": "Clarification on additional signatures",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/91",
      "state": "CLOSED",
      "author": "dteleguin",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "From 2.4. Benefits of Txn-Tokens:\r\n\r\n> Through the presence of additional signatures on the Txn-Token, a workload receiving an invocation can also independently verify that specific workloads were within the path of the call before it was invoked.\r\n\r\nIt is unclear from the document how exactly the additional signatures could be added to the Txn-Token by the workloads within the call chain. Would be nice to provide some details here, or to state that this is out of the scope of the current document.",
      "createdAt": "2024-04-23T13:38:00Z",
      "updatedAt": "2024-06-14T16:10:47Z",
      "closedAt": "2024-06-14T16:10:46Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "this issue is outdated. It seems to have been addressed in the new draft.",
          "createdAt": "2024-06-14T16:10:46Z",
          "updatedAt": "2024-06-14T16:10:46Z"
        }
      ]
    },
    {
      "number": 94,
      "id": "I_kwDOJt_WwM6IM89B",
      "title": "typo: `ieft` -> `ietf`  in `urn:ieft:params:oauth:token-type:txn-token`",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/94",
      "state": "CLOSED",
      "author": "yuriyz",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "typo: `ieft` -> `ietf`  in `urn:ieft:params:oauth:token-type:txn-token`\r\n\r\nIt seems spec has this typo also in other places. ",
      "createdAt": "2024-05-08T09:10:34Z",
      "updatedAt": "2024-06-14T16:11:10Z",
      "closedAt": "2024-06-14T16:11:10Z",
      "comments": []
    },
    {
      "number": 95,
      "id": "I_kwDOJt_WwM6JSD9m",
      "title": "Define discovery metadata for support of the Transaction Token functionality",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/95",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "PieterKas"
      ],
      "labels": [
        "IETF120-discuss",
        "pre-last-call"
      ],
      "body": "Should we add to the spec a mechanism for a client to discover if the AS has support for the transaction token profile of the token-exchange endpoint? Or do we need to define a new .well-known location for the Transaction Token Service?",
      "createdAt": "2024-05-17T16:57:32Z",
      "updatedAt": "2025-02-28T15:10:11Z",
      "closedAt": "2025-02-28T15:10:11Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes from call on 06-14-24\r\n- (George) Discovery by an external client may not be useful, but for internal clients, it might be important. We could chain it out of the AS, because we would expect services to know where the AS is.\r\n- (Atul) Can we do a 401 response with the location of the TTS?\r\n- (Pieter) Agree that external clients don't need to discover the TTS. Discovery is useful for internal clients. Can we do resource metadata?\r\n- (George) One way is to add a new URL to the AS metadata. We should discuss this in Vancouver\r\n- (Atul, Pieter) Can we use OPRM?\r\n- (Pieter) The flow is going to be different because it assumes OAuth Access tokens\r\n",
          "createdAt": "2024-06-14T16:19:07Z",
          "updatedAt": "2024-06-14T16:19:07Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Editor's call 2025-01-23:\n* Not necessary to define a discovery method. \n* Add a section to the Security Considerations section",
          "createdAt": "2025-01-23T17:25:32Z",
          "updatedAt": "2025-01-23T17:25:32Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "I_kwDOJt_WwM6JS0tW",
      "title": "Deployment models for the Transaction Token Service",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/96",
      "state": "OPEN",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "IETF120-discuss"
      ],
      "body": "This issue is to track different deployment models for the Transaction Token Service \r\n- embedded with the AS\r\n- embedded with an API GW\r\n- standalone service\r\n- ???",
      "createdAt": "2024-05-17T19:14:19Z",
      "updatedAt": "2024-07-19T04:42:23Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Embedded with the Authorization Server\r\n\r\nIn this model, the token exchange endpoint is exposed as part of the standard Authorization Server exposed endpoints. \r\nPros:\r\n* the `iss` claim is the same as the authorization server and likely already known by downstream workloads\r\n* the AS metadata can already be discovered from it's `iss` claim and exposes the JWKS URI\r\n* centralizes authorization policy management into a single service (policies for issuing tokens [both access and transaction] is in one place)\r\n\r\nCons:\r\n* potentially exposes the ability to obtain a transaction token outside the bounds of the trust domain (e.g. exposed externally to the internet)\r\n* difficult to distribute the transaction token issuing capability as the AS is not likely geographically distributed",
          "createdAt": "2024-05-17T20:49:25Z",
          "updatedAt": "2024-05-17T20:49:25Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes from call on 06-14-2024\r\n- In a small deployment, the TTS could be a part of the AS, but for multi-region deployments, it could be distributed\r\n- Does thinking through this bring any new requirements to the spec\r\n- (Justin) We should think through this to make sure we are not over optimizing\r\n- (Justin) A TTS is going to be a part of an AS for a lot of systems, but in more workload focused systems, it could be a part of the \"workload bundle\" or something. It has less to do with the AS in that case\r\n- (George) In that context, if my workload needs to initiate 3 different types of transactions by calling 3 different workloads, my service would still go to the TTS to get a TraT for each use case. In the Lambda case, one could provision the Lambda with a pre-injected TraT. A Kubernetes WL would get a workload token at startup, but would need a TraT per request.\r\n- (Justin) Agree that these are two different things. There isn't going to be just one way for this to show up at runtime. This is different from access tokens\r\n- (Pieter) We could have at least one TTS per cluster. Having it called out that it can be standalone, or a part of the AS will be interesting. We should call out the security considerations of standalone, so that we don't redo all the work that AS security considerations already cover\r\n- (Pieter) In WIMSE, a deliverable is local token issuance. There's a model where the TraT is embedded in the workload (the workload is self-issuing)\r\n- (George) One of the reasons to create this issue is to collect these ideas. We could collect these  different ideas, and discuss in Vancouver. People who have deployed something similar already would be useful to get feedback from.\r\n- (Atul) Can we individually contribute slides that can be discussed in Vancouver?\r\n- (Justin) Are we collecting these in a Wiki page, or a temporary section of the document that we know we are going to discard.\r\n- (George) We should just add it to this issue.\r\n- (Pieter) We should raise this both in the WIMSE and the OAuth WG in Vancouver\r\n- ",
          "createdAt": "2024-06-14T16:29:54Z",
          "updatedAt": "2024-06-14T16:29:54Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "Here is how we deployed the TTS in our environment:\r\n\r\nAlthough the TTS is a logical part of the AS system (and provided by the same team), it is a separate microservice than the authorizarion and token endpoints of the AS used by OAuth clients. The auth and token endpoints used by clients are reachable by clients outside of the company network, while the TTS endpoint is only reachable from within the company network. The key to sign the TraT is different from the key material used to encrypt/sign the ATs issued by the externally reachable token endpoint. Hence the \"iss\" and JWKS uris are different. We have multiple data centers and in each DC the TTS is available. The \"iss\" used by all TTS is the same for all DCs; a DC agnostic URI. All TTS deployments share the same key material.",
          "createdAt": "2024-06-26T06:46:23Z",
          "updatedAt": "2024-06-26T06:46:23Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "Our implementation overlaps with what @obfuscoder described. One interesting thing to think about is debugging and tracing back the token to the AS that issued it. We have token identifier that identifies the region + DC in which it was issued which it makes easier for validating party to know where request came from. Sometimes the request crosses region boundary. We make sure that public key is shared across all regions. Each region+DC uses its own private+public key pair but we make the public key globally available.",
          "createdAt": "2024-07-19T04:42:22Z",
          "updatedAt": "2024-07-19T04:42:22Z"
        }
      ]
    },
    {
      "number": 97,
      "id": "I_kwDOJt_WwM6LAZHN",
      "title": "Typ header parameter being misused in TraTs draft",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/97",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "According to the RFC 7515 (JWS), the \"typ\" header parameter is supposed to indicate a media-type (https://www.iana.org/assignments/media-types/media-types.xhtml). In addition, the JWT spec section 5.1 clarifies that if used, it should be set to \"JWT\". However, the TraTs draft requires this to be set to \"txn_token\". This is clearly not right. We need to find another way to identify a JWT to be a TraT.",
      "createdAt": "2024-06-03T22:01:32Z",
      "updatedAt": "2024-06-06T23:55:55Z",
      "closedAt": "2024-06-06T23:55:55Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "see also https://www.rfc-editor.org/rfc/rfc8725.html#name-use-explicit-typing\r\nhttps://datatracker.ietf.org/doc/html/rfc9068#name-header\r\nhttps://www.rfc-editor.org/rfc/rfc9449.html#name-dpop-proof-jwt-syntax",
          "createdAt": "2024-06-04T17:08:01Z",
          "updatedAt": "2024-06-04T17:08:01Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for these references. I will go with \"txntoken+jwt\" for now, based on the recommendation of the \"Explicit Typing\" section.",
          "createdAt": "2024-06-04T21:27:20Z",
          "updatedAt": "2024-06-04T23:27:46Z"
        }
      ]
    },
    {
      "number": 107,
      "id": "I_kwDOJt_WwM6N0NHJ",
      "title": "external invocations",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/107",
      "state": "OPEN",
      "author": "adeinega",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "pre-last-call"
      ],
      "body": "I'm sorry if I miss anything but why does this spec put so much emphasize on \"external\" invocations?\r\n> Transaction Tokens (Txn-Tokens) enable workloads in a trusted domain to ensure that user identity and authorization context of an external programmatic request, such as an API invocation\r\n\r\nand\r\n> A valid Txn-Token indicates a valid external invocation\r\n\r\nand in many other places. This somehow limits the set of use cases where Txn Token tokens can be applied. ServiceA can make a m2m call to ServiceB in an asynchronous way, say because of some task in its scheduler, etc.\r\n\r\nI would suggest shortening \"external invocations to \"invocations\".",
      "createdAt": "2024-06-27T23:50:56Z",
      "updatedAt": "2025-01-23T17:21:28Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "What about explicitly calling out in the overview that both external and internal use cases are supported by this specifications? Support for internal use cases is called out in the section around the use of self-signed tokens and the definition associated with the `subject_token` parameter. However, I agree it's not called out as an equal use case.",
          "createdAt": "2024-07-04T16:05:43Z",
          "updatedAt": "2024-07-04T16:05:43Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "By \"external\" I meant external to the trust domain, BTW",
          "createdAt": "2025-01-23T17:04:06Z",
          "updatedAt": "2025-01-23T17:04:06Z"
        }
      ]
    },
    {
      "number": 108,
      "id": "I_kwDOJt_WwM6Pc7bA",
      "title": "A dummy transaction token - useful for debugging",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/108",
      "state": "OPEN",
      "author": "ashayraut",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is no concept of placeholder or temporary token here. Sometimes the call chain breaks i.e some service in the chain doesn't propagate the token in header, either due to a bug or unexpected code change, in such case, the service that didn't receive token from caller can generate a dummy unsigned token with caller information (that missed to send token) and pass to next service.  So if A -> B -> C -> D and B misses to forward the header token, then C generates a dummy token with info about B and passes to D. This increases visibility for debugging. The service at end will find that its not real token but it can audit which service broke the call chain and can involve B directly to debug. Unsigned dummy token cannot be trusted hence MUST not be used for making authorization decision and MUST be used only for auditing/logging.",
      "createdAt": "2024-07-13T06:04:53Z",
      "updatedAt": "2024-07-24T22:37:13Z",
      "closedAt": null,
      "comments": [
        {
          "author": "arndt-s",
          "authorAssociation": "MEMBER",
          "body": "This is awesome feedback!\r\n\r\nSome questions that come into my mind:\r\n\r\n---\r\n\r\nI suppose C will only generate the dummy token when it doesn't need to validate it or require specific caller information from A or B which it cannot securely extract from the request. Otherwise the call from B -> C would result in an authn/z error and fail - no need for an replacement token, is it? \r\n\r\n---\r\n\r\nIf B can generate dummy tokens, how can it be prevented that it does not generate a dummy token which looks like a legit token and impersonate users like this? E.g. B is compromised and generates dummy tokens to request informations from other workloads that in fact accept dummy tokens? \r\n\r\nMaybe this question is leading to the next one:\r\n\r\n---\r\n\r\nHow are dummy tokens distinguished from real ones? Is there a risk developers by mistake consider dummy tokens as trusted? \r\n\r\n\r\n",
          "createdAt": "2024-07-15T09:04:14Z",
          "updatedAt": "2024-07-15T09:04:14Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "> Otherwise the call from B -> C would result in an authn/z error and fail - no need for an replacement token, is it?\r\n\r\nYes. If C is validating token, then it can deny request. If C is more of an intermediate passthrough type service, then C will rely on D to deny/allow, in which case B has to send a token.\r\n\r\n> How are dummy tokens distinguished from real ones? Is there a risk developers by mistake consider dummy tokens as trusted?\r\n\r\nYes, that is the most important aspect. In general, as Hyrum's law suggests, once token is out there, we won't be able to control who uses it for what purpose. Our recommendation can be that - a token validator (e.g. Service D) MUST always use the claims in token ONLY IF validate signature exists. So that even if Service B signs it, D must deny request saying you (service B) isn't valid Tx Token service. Anyways, even if we don't specify the idea of dummy token here, someone (service B or C), can potentially overwrite the header value with its own Tx token string. \r\n\r\n",
          "createdAt": "2024-07-15T18:19:10Z",
          "updatedAt": "2024-07-15T18:19:10Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "We are actually facing this issue in our current deployments. Although we have some workloads which already receive, validate and forward TraTs, they are being called by other workloads which do not present TraTs yet and on the other end, they call other workloads which just ignore the TraTs and don't pass them along yet. So during this rollout phase (which can take months or even years) it is quite common that TraTs are getting lost frequently and no workload can actually enforce TraT validation.\r\n\r\nHowever, we do not think that any workload should be able to create its own dummy TraT just to fill the gap. We think that only the TraT Service should have the authority to issue TraTs even for those cases where gaps need to be filled. This scenario is similar to presenting self-signed tokens to the TraT Service which then issues TraTs to the requestors. The TraT Service decides which client is allowed to present self-signed tokens. While deployment is progressing the number of allowed clients will be reduced over time.",
          "createdAt": "2024-07-18T07:22:29Z",
          "updatedAt": "2024-07-18T07:22:29Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "Requesting a new Trats token from issuer always makes sense. The idea of dummy token has some value -\r\n\r\nfor example, not every service in call graph especially where 1000s of services are involved require to connect with Trats. Keeps it simple. Also latency profile of request is predictable otherwise remote call could change latency profile suddenly because propagation broke and it resulted in remote calls.\r\n\r\n\r\nI ack that We can keep our RFC simple - suggest that an intermediate service doesn\u2019t receive token from caller then it can request new one. However such a token may not exactly have claims like what caller might sent and hence the response from validating party can differ. \r\n\r\n\r\non separate note, dummy tokens helped us because when you want to do something like Trats and not everyone is propagating tokens then you need a way to identify who is not doing it and ask them to propagate. This solution for this  identification problem has to be cheap otherwise 1000s of services will request tokens from Tx token service and brown out the Tx token service. ",
          "createdAt": "2024-07-19T02:20:15Z",
          "updatedAt": "2024-07-19T02:20:15Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "At IETF 120, @gffletch , @PieterKas and I discussed this issue. Our collective opinion is that since this is something that is related to debugging, we should not really address this in the TraTs spec.\r\n\r\nWe talked about having a separate document that describes best practices how to rollout TraTs gradually.",
          "createdAt": "2024-07-24T22:01:57Z",
          "updatedAt": "2024-07-24T22:05:20Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "A separate document should work fine too. That will give us opportunity to be more elaborate.",
          "createdAt": "2024-07-24T22:37:12Z",
          "updatedAt": "2024-07-24T22:37:12Z"
        }
      ]
    },
    {
      "number": 109,
      "id": "I_kwDOJt_WwM6Pc75O",
      "title": "Key rotation guidance",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/109",
      "state": "CLOSED",
      "author": "ashayraut",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "PieterKas"
      ],
      "labels": [
        "pre-last-call"
      ],
      "body": "Key rotation is interesting. If you rotate key at time T1 and Tx token services starts to issue tokens with new key at same time, we have to callout that it should do it at T1+X where X is the SLA for ensuring all services that validate signature will receive the new public key to verify signature. Keys can be shared out of band. One idea is to generate two pairs and two corresponding public keys will be available with services all the time. Tx Token service will have two private pairs available. Lets say PrvtKey-1 and PrvtKey-2 are with issuers. PrvtKey-1 should be used from T1 to T1+24hrs and Key-2 from T1+24 to T1+48hrs. When Tx token switches from Key-1 to 2, it doesn't have to worry about some service not having public key for key-2 to validate the token. This way key synchronization is out of band + key rotation happens frequently which keeps key rotation machinery well-tested. Generally there is no need to rotate key every 24hrs so we can choose to relax that but even if we have to force rotate key then we have to make sure force rotated key (i.e new key pair) should be used to mint tokens only when we can guarantee that those tokens can be validated.",
      "createdAt": "2024-07-13T06:10:04Z",
      "updatedAt": "2025-03-01T20:34:41Z",
      "closedAt": "2025-03-01T20:34:41Z",
      "comments": [
        {
          "author": "arndt-s",
          "authorAssociation": "MEMBER",
          "body": "Transaction tokens are Json Web Tokens (JWT) they leverage Json Web Signatures (JWS) for validation. This gives implementors/deployments a vast choice of options - from a choice between symmetric and asymmetric to various key delivery mechanisms. If I understand above correctly it is currently perfectly possible to achieve this, for instance by using the kid claim in JWT and publishing multiple asymmetric keys ahead of usage via JWKS. Please correct me if I'm wrong.\r\n\r\n---\r\n> but even if we have to force rotate key then we have to make sure force rotated key (i.e new key pair) should be used to mint tokens only when we can guarantee that those tokens can be validated.\r\n\r\nWhat sort of guarantees do you refer to? Is it enough to know that validating party can look up a asymmetric key or is it more sophisticated such as \"symmetric key is delivered and available on the host\"?",
          "createdAt": "2024-07-15T08:55:49Z",
          "updatedAt": "2024-07-15T08:55:49Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "> Is it enough to know that validating party can look up a asymmetric key\r\n\r\nI think so.",
          "createdAt": "2024-07-15T18:37:01Z",
          "updatedAt": "2024-07-15T18:37:01Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "By the way, yes JWKS provides host of options. But in this TraTs model, to optimize cost and performance impact, it is good to choose an algorithm that is OK to be expensive (CPU) while issuing a token v/s while validating a token because the number of validating parties will be a lot big in number. So algorithms that are cheaper in signature verification (ECDSA P256) could be better. \r\n\r\nBut we can recommend to choose something that is cheaper for many and expensive for Tx Token service.",
          "createdAt": "2024-07-15T18:44:46Z",
          "updatedAt": "2024-07-15T18:44:46Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Best practices around choice of algorithms, key rotation, etc. for TraTs could be a separate draft, IMO. I'd like to know what others in the group think.",
          "createdAt": "2024-07-15T21:44:13Z",
          "updatedAt": "2024-07-15T21:44:13Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think a separate draft should be necessary. I suggest to give some recommendation within the current draft (security consideration section).\r\n\r\nTime spent on token validation by workloads should be considered, but I don't think we should deviate too much from RFC7518 for example. Otherwise we make it more difficult for implementers and interop.\r\n\r\nWhat every deployment needs to consider is that there will be a lot more TraTs being issued than Access Tokens (ATs). One AT, which is valid for maybe an hour can be used in thousands of requests to resource servers which will each create new TraTs. This can have an impact on performance as well as available key space and collision probabilities.\r\n\r\nRe key rotation and availability of signature key material: This aspect is already adressed by standards we rely upon. I don't think that there is need for any specifics. Naturally \"kid\" should be used as well as making validation keys available before they are being used. Workloads should fetch key sets on demand if they encounter a kid they don't know.\r\n",
          "createdAt": "2024-07-18T07:06:04Z",
          "updatedAt": "2024-07-18T07:06:04Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe update Security Considerations with recommendations for optimizing TraT crypto toward validation rather than issuance?",
          "createdAt": "2025-01-15T14:58:07Z",
          "updatedAt": "2025-01-15T14:58:07Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue references two topics:\n\n1. Key rotation\n2. The cost of performing verification.\n\nOn (1), there is ample guidance in the OAuth RFCs that we can reference. is there anything new or specific we want to addd that is not in the OAuth drafts already?\n\nFor (2), I am not convinced that there are substantially more cryptographic operations. If a set of microservices was just passing Access Tokens, it would still be parsing and verifying the signatures on those. Now it is verifying signatures on transaction tokens instead. Although there might be a small increase, it may not be an order of magnitude (unless access tokens was passed around and not verified, which may be true for TraTs as well). I would also hesitate to provide guidance on which cryptographic algorithms to use, especially as new post quantum algorithms are going to be around. \n\nSome thoughts:\n\n(1) Add a section on key rotation and reference existing RFCs (e.g. key rotation should be performed according to guidelines in RFC.... and RFC....)\n(2) Don't make any recommendations on crypto algorithms.",
          "createdAt": "2025-01-31T15:30:16Z",
          "updatedAt": "2025-01-31T15:30:16Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "After discussing key rotation with folks at OSW2025 and reading through existing OAuth drafts and OpenID Connect drafts I don't believe we should give more specific guidance than what is already established and only reference OpenID Connect, which already provides guidance on key rotation. See PR #156",
          "createdAt": "2025-03-01T18:03:33Z",
          "updatedAt": "2025-03-01T18:03:33Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "I_kwDOJt_WwM6Pc8IA",
      "title": "Tx token lifetime guidance missing for replacement token",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/110",
      "state": "CLOSED",
      "author": "ashayraut",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There should be guidance for token lifetime of replacement token. A replacement token can have lifetime of whatever is left in the original token that was used to replacement or someone will keep using replacement token feature to keep increasing lifetime of the original incoming token. ",
      "createdAt": "2024-07-13T06:12:47Z",
      "updatedAt": "2025-01-14T18:56:46Z",
      "closedAt": "2025-01-14T18:56:45Z",
      "comments": [
        {
          "author": "arndt-s",
          "authorAssociation": "MEMBER",
          "body": "I believe this is partly covered by `Section 2.3 Txn-Token Lifetime`\r\n>  Except in the case where the request is made using a self-signed JWT, if the token or other credential presented to the Txn-Token service when requesting a Txn-Token has an expiration time, then the Txn-Token MUST NOT exceed the lifetime of the originally presented token or credential.\r\n\r\nHowever, I agree that this is very focused on the original token and not in cases where transaction tokens are replaced.",
          "createdAt": "2024-07-15T09:09:57Z",
          "updatedAt": "2024-07-15T09:09:57Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I'd say we must include details about it so that there is some guidance for replacement tokens too. Default suggestion could be to set expiry time on replace token, same as expiryTimeOfOriginalToken. So it also discourages replacing a token multiple times. \r\n\r\nother alternatives are to keep a counter on Tx Token Service side (or inside the token itself) where we can keep track on how many times it was replaced and limit on Tx token service side if a certain token is replaced too many times but unfortunately, it will be difficult to gauge value for \"replaced too many times\".. :-)",
          "createdAt": "2024-07-15T18:26:39Z",
          "updatedAt": "2024-07-15T18:26:39Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "The intent was that the replacement token should expire no later than the expiration of the original TraT, but I don't recollect whether that is in the spec or not.",
          "createdAt": "2024-07-15T21:42:46Z",
          "updatedAt": "2024-07-15T21:42:46Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "If there are long running batch processes involved, it may be necessary to extend lifetime of such TraTs (or issue TraTs out of bounds as discussed in other issues). However, the TraT Service should have the authority about what is possible.",
          "createdAt": "2024-07-18T07:11:37Z",
          "updatedAt": "2024-07-18T07:11:37Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "I didn\u2019t see Tx token lifetime for replacement token in draft. We should add it.\r\n\r\nabout long running process I have a proposal in other GitHub issue. In general the Trats service can decide to issue tokens with higher lifetime but with Trats tokens it\u2019s a risk to have higher lifetime as they are bearer tokens can be used by anyone. So my proposal addresses that by using another token for it. ",
          "createdAt": "2024-07-19T02:23:14Z",
          "updatedAt": "2024-07-19T02:23:14Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "I didn't mean that the TTS should issue TraTs with long lifetimes. That would be bad indeed. Instead the TTS should be able to issue new TraTs with short lifetime, but the lifetime can essentially exceed that of the presented one. As I suggested in #62, the presented TxT could even be expired aand the TTS could allow to issue a new TxT to that specific workload as the TTS knows that this workload is a long running batch processor.",
          "createdAt": "2024-07-19T08:48:23Z",
          "updatedAt": "2024-07-19T08:48:23Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Note- combine this with any PR on \"refresh\" tokens when time extension/replacement is needed to keep language consistent.",
          "createdAt": "2024-07-24T21:49:50Z",
          "updatedAt": "2024-07-24T21:49:50Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "Raised a PR with minor fixes https://github.com/oauth-wg/oauth-transaction-tokens/pull/147",
          "createdAt": "2024-10-20T04:40:55Z",
          "updatedAt": "2024-10-20T04:40:55Z"
        }
      ]
    },
    {
      "number": 111,
      "id": "I_kwDOJt_WwM6Pc8zZ",
      "title": "Batch or long running processes and extending lifetime of a token",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/111",
      "state": "OPEN",
      "author": "ashayraut",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "ashayraut"
      ],
      "labels": [],
      "body": "If we provide refresh token which is signed and contains the original token inside it, then refresh token when passed to Tx token service, then Tx token service can verify if 1) refresh token is signed with its private key, 2) the token inside will be expired but it can still read the token and verify caller's identity is associated with all the claims or not, if yes, then it can get new Tx token with same claims or it can get new token but claims that are associated to them and not the exact claims present in the token inside refresh token. Why not request new token always when batch process or workflow resumes from long pause?  Because sometimes the service might just want to use the claims of its caller (as long as its permitted to do so) rather than new token. \r\n\r\nFor example, if an internal service C is called by A and B, and C is allowed to make requests to D for tax or accounting purpose. \r\nA->C\r\nB->C\r\nC->D\r\nA is allowed to make request and request Tx token for tax purpose.\r\nB is allowed to make request and request Tx token for accounting purpose.\r\nC is allowed for both accounting and tax purpose because is a common service\r\n\r\n\r\nNow,  C simply wants to use usage claim based on who called - A or B. C can do so by passing token generated for A or B to D. But if C is a workflow that pauses for more than TTL of Tx token, then token expires and it loses all the context about claims associated with A and B. In such case, before going on long pause, C can request refresh token from Tx Token service by passing original valid token it receives. It requests this token before going into long pause. It receives refresh token which it will use when it resumes. Refresh token will have longer TTL. Tx Token can configure TTL per use case and/or per caller (e.g. C). Tx token service will include claims in the input valid token in the refresh token but the refresh token cannot be used to access data from any service. Services should ignore refresh tokens in case someone (C) tries to use it directly. C has to make an exchange and pass refresh token to TxToken issuer service to get new token to pass to D. ",
      "createdAt": "2024-07-13T06:21:17Z",
      "updatedAt": "2025-02-19T00:04:40Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Interesting proposition. ",
          "createdAt": "2024-07-15T21:41:07Z",
          "updatedAt": "2024-07-15T21:41:07Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks. I think we can generalize it a bit and share some guidance for batch proposes. Important thing is to think through all security threats.",
          "createdAt": "2024-07-16T16:20:08Z",
          "updatedAt": "2024-07-16T16:20:08Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Just to make sure I understand... the \"refresh token\" (I'm going to call it the \"batch token\") is ONLY valid at the Transaction Token Service (potentially encrypted such that ONLY the Transaction Token Service can decrypt it). The \"batch token\" contains the context from the A/B transaction token with the longer TTL. I think this \"batch token\" should also be sender constrained in some way. Is this along the lines you were thinking?",
          "createdAt": "2024-07-24T16:30:26Z",
          "updatedAt": "2024-07-24T16:30:26Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "@ashayraut Please post the description of this issue on the IETF OAuth mailing list, and point people to this issue to add their comments here. This together with Issue #110 should be addressed in a single pull request.",
          "createdAt": "2024-07-24T21:49:58Z",
          "updatedAt": "2024-07-24T21:49:58Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "This is taken care of. I have emailed with the subject \"*[OAUTH-WG]\r\nProposal for Tx token batching processing on\r\ndraft-ietf-oauth-transaction-tokens-03*\".\r\n\r\n\r\nOn Wed, Jul 24, 2024 at 2:50\u202fPM Atul Tulshibagwale ***@***.***>\r\nwrote:\r\n\r\n> @ashayraut <https://github.com/ashayraut> Please post the description of\r\n> this issue on the IETF OAuth mailing list, and point people to this issue\r\n> to add their comments here. This together with Issue #110\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/issues/110> should\r\n> be addressed in a single pull request.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/issues/111#issuecomment-2248958420>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/ABHO2XZDBROMGLSCCA6I3C3ZOAORZAVCNFSM6AAAAABK2AEJHSVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDENBYHE2TQNBSGA>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n\r\n\r\n-- \r\nRegards,\r\nAshay Raut\r\n",
          "createdAt": "2024-07-29T17:14:16Z",
          "updatedAt": "2024-07-29T17:14:16Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "@gffletch You comment - \"batch token is ONLY valid at the Transaction Token Service (potentially encrypted such that ONLY the Transaction Token Service can decrypt it)\"\r\n\r\nAshay: Yes, you are right. Its' valid only in Tx token service. We can encrypt it or but won't signature just suffice?\r\n\r\n@gffletch About your comment - \"I think this 'batch token' should also be sender constrained in some way.\"\r\n\r\nAshay: The way we implemented this is by creating a unique use case id or you call it namespace. So, the problem is -> A requests a batch token which it can pass to B but B would need some permissions to get Tx token back from A's batch token. To solve it, when A onboards Tx Token issuer, it creates a use case id unique to A which is registered with Tx token issuer. Every time Tx Token issuer issues a 'batch token' to A, it will find the usecaseId and put it in batch token. If B gets batch token from A (or steals it somehow), then B will not be able to get a Tx token back from issuer. Tx token issuer maintains an allowlist against each unique usecaseId, for who is allowed to get token back for that use case it. To get token back, B has to register itself to Tx token issuer against A's usecaseId.\r\n\r\nWe call services like A, the \"batch token initiator\" and services like B \"the batch rehydrator\" as it rehydates Tx token back from batch token. \r\n\r\nEdge case - A can play both roles - initiator and rehydrator. This might lead to problem of infinite exchanges. But not sure if its a problem. It may be a problem for some use case. Tx token can also keep a counter in batch token and Tx token to ensure only finite amount of exchanges are allowed.\r\n\r\nOverall, how does the proposal sound? I think we cannot write all this into a complexity into RFC. For RFC, we can keep it simple that there can be long lived batch token and Tx token must implement some sort of access control to ensure only authorized services can convert the batch to Tx token.\r\n\r\nSupporting batch has been super important for my company and major milestone as many critical workflows are model on such event based architecture. \r\n\r\nIf everything looks good, I can create PR for it and take a stab at updating our draft.",
          "createdAt": "2024-09-05T04:11:12Z",
          "updatedAt": "2024-09-05T04:16:34Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes from call on: 11/22/2024\r\n\r\n- (Pieter): Maybe we need to think about expiry differently here. Rather than introducing ..., we formulate a different view about expiry\r\n- (Atul): TraTs have a freedom because they are short lived. Can we have a separate mechanism for handling long-lived transactions\r\n- (George): How do we address long lived transactions? We can say that is not TraTs, but some other mechanism, similar to the work done in the ID-Chaining. Have some sort of assertion grant that can be used to mint a new transaction token.\r\n- (Joe): What about a one-time voucher? That keeps the context across separate transactions\r\n- (Pieter): Is that just a refresh token? \r\n- (Joe): You may not be granted ...\r\n- (Ashay): How we thought about it: We never changed the definition of the TraT (it always expires quickly - short lived). The service would request a new token before the TraT expiry, which mints something else that can be used to mint a new TraT later. If the claims in the TraT need to be \"refreshed\" / modified, then the TraT service. In the issuance of the voucher, the TraT service can mark certain fields as \"updateable\". You mark the fields as refreshable in the beginning, when the TraT is being issued.\r\n- (Pieter): I want to get George's thoughts on whether the short-livedness is ...\r\n- (George): A long-lived part starts to pull in revocation, which makes things complicated. For example, if a user has consented to using certain data for marketing, and when the transaction resumes, the user has rescinded the consent. What happens then?\r\n- (Pieter) The revocation argument is good. Having a token that never expires could be very problematic.\r\n- (George): What Ashay is describing is similar to what Joe described by way of \"vouchers\". In that context, the TraTs are still short-lived, which means that we should look at this as something that is layered above TraTs\r\n- (Atul): I felt the same, but the fields need to be marked updateable at the time of TraT issuance\r\n- (George): It seems the TraT service would then need to know more than just about authorization. If say, I wanted to tokenize PII, then the TraT service would need connections to a lot of other places. This could be 3 layers down in the transaction, the workload 3 levels down now puts the voucher in the batch stream. How does the TraT service know how to refresh that data?\r\n- (Pieter): I remember we had text in section 2.3 about lifetime. You cannot extend the TraT to beyond the lifetime of the original access token, so there is an upper bound. If we start tinkering with that, we have an issue. Allowing TraTs to be refreshed are goign to have downstream effects.\r\n- (Ashay): In our implementations, it gathers context from other services before requesting a new TraT\r\n- (Atul): I was going to do the same thing.\r\n- (George): The thing that needs the TraT can get the refreshed versions of the data, and pass that in the request context object, and request the new token. From a standards perspective, we need to understand what this would mean.\r\n- (Atul): ...\r\n- (Ashay): Teams responsible for specific functions can't be responsible for rebuilding the context. So we start with everything being immutable, and it can evolve as the business needs become apparent. So by default nothing is mutable.\r\n- (Ashay): How does this work? It is going to complicate the spec, can you change an RFC?\r\n- (Atul): No\r\n- (George): We can have a separate RFC which says how we should use TraTs for batching. I do think that since we are moving toward event driven models, this is important as a capability. \r\n- (Atul): Is TraTs without batching a valuable spec (can it be used without batching?)\r\n- (George): There are a lot of use cases where TraTs can be used today (without batching).\r\n- (Joe): There's also a big push for autonomous agents, (not just batch). \r\n- (George): The agent question is very interesting, but it feels like a layer on top of TraTs\r\n- (Pieter): I think TraTs are valuable as they are today. But we will almost certainly have to do a follow on spec. Can we have a proper problem definition that we can do a write up. That's the kind of thing that opens up security issues. In section 2.3 (expiry)\r\n- (Ashay): We did implement TraTs first, but the async question came up later, and it broke things that required batch processes. A call chain will almost always include some batch processes. At the beginning of the transaction, no one knows how long it is going to last\r\n- (George):  I agree. For the API invocation use case, you can look at your SLA and make good assumptions about transaction duration, but that only covers 80% of the transactions in an enterprise. But I have a lot of questions about how you build that layering in an industry standard way. So in your example, what is coming to \"workload 3\" in is a TraT, and it needs a voucher to rebuild a TraT later, which goes on the queue. Then when \"workload 4\" picks it up, and this can happen again downstream. We need to think through all those implications, and understand what they mean. It sounds like Ashay has a lot of use cases, but we need to define a lot of use cases.\r\n- (Ashay): Since this topic is so complex, it is good for us to provide guidance.\r\n- (Ashay): Can we just add expiry to each TraT field? \r\n- (Pieter): Does this modify the expiry property of the token?\r\n- (Ashay): This is not modifying the expiry of the token. \r\n- (George): So we have the rctx, if we say nothing about it, then anyone could ..\r\n- (George): The tctx is just a JSON blob, so you could put anything you want there. So another spec could define the expiry field in that.\r\n- (Pieter): Can I ask a question? We could have a situation where the TraT has expired, but the data context hasn't expired. So there is a new concept that the data expiry is longer than TraT expiry.\r\n- (Ashay): The real-world example is user consent. So EU allows 24 hours to enforce change. If a queue takes 6 days, then the new TraT has to refresh the new consent property.\r\n- (Pieter): \r\n- (George): ",
          "createdAt": "2024-11-22T17:06:29Z",
          "updatedAt": "2024-11-22T18:39:25Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there is general agreement that we put batch and stream usage of Transaction Tokens into a different specification. Do we need to do one final check with the list?",
          "createdAt": "2025-01-15T14:53:10Z",
          "updatedAt": "2025-01-15T14:53:10Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry to comment that late. I somehow missed the last updates. I should note that as we started to implement transaction tokens within our system environment we soon hit the road block of internal services which wanted to enforce transaction tokens when being called that this could not be done as those services where not only called by frontend systems with authenticated users, but also by batch processes or delayed process workers (typical when working with event driven processing, like Kafka). This hurdle resulted in us delaying the entire rollout of transaction tokens and we wanted to wait for the issue to be solved within the IETF draft before trying to cook something by ourselves.\n\nWe still consider batch processing and delayed processing as an essential part of transaction tokens and feel that it will essentially be incomplete or of less use when being left out. That said, if it helps to get this spec from its draft state to its final state sooner, it can help. We hope that the new spec addressing batching/long running processes will get worked on rather sooner than later to fill that gap and I try to contribute as much as possible.",
          "createdAt": "2025-02-17T10:04:09Z",
          "updatedAt": "2025-02-17T10:06:28Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "All great points @obfuscoder which I was also highlighting in last meeting. Our company built solution for batch processing because many critical workflows are part of it. However, I also ack that there are components in batch processing that require lot more deep dive and hence new spec makes sense. For example, refreshing token contents when batch token is exchanged,  access controlling who can exchange batch tokens, lifetime of batch token itself, and more.\n\nI would be happy to contribute whatever we learnt in the new draft. By the way, I attempted modifying current draft as well to include batching which makes me think, it will be good to be separate. \n\nBut you can still take a look https://github.com/oauth-wg/oauth-transaction-tokens/pull/149 here on what I was thinking about it. ",
          "createdAt": "2025-02-19T00:04:39Z",
          "updatedAt": "2025-02-19T00:04:39Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "I_kwDOJt_WwM6QUp0A",
      "title": "please add document history to the draft",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/112",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "NONE",
      "assignees": [
        "tulshi"
      ],
      "labels": [
        "pre-last-call"
      ],
      "body": "so that people can easily review what has changed between the versions. thank you!",
      "createdAt": "2024-07-21T10:20:42Z",
      "updatedAt": "2025-01-23T17:16:50Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 113,
      "id": "I_kwDOJt_WwM6QWG5e",
      "title": "subject_token_type for Replacement Txn-Token Request",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/113",
      "state": "CLOSED",
      "author": "dteleguin",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In [7.5.2](https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-03.html#section-7.5.2):\r\n\r\n> To request a replacement Txn-Token, the requester makes a Txn-Token Request as described in [Section 7.1](https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-03.html#txn-token-request) but includes the Txn-Token to be replaced as the value of the subject_token parameter.\r\n\r\nDoes this assume that `subject_token_type` should be `urn:ietf:params:oauth:token-type:txn_token`? Should we call it out explicitly?",
      "createdAt": "2024-07-22T01:22:11Z",
      "updatedAt": "2024-10-02T23:40:06Z",
      "closedAt": "2024-10-02T23:40:06Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think that makes sense.",
          "createdAt": "2024-07-24T15:48:05Z",
          "updatedAt": "2024-07-24T15:48:05Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOJt_WwM6Qd20v",
      "title": "Seconds vs. milliseconds in the example",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/114",
      "state": "CLOSED",
      "author": "dteleguin",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In [5.2.4](https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-03.html#section-5.2.4):\r\n\r\n```\r\n{\r\n  \"iat\": \"1686536226000\",\r\n  \"aud\": \"trust-domain.example\",\r\n  \"exp\": \"1686536526000\",\r\n  ...\r\n}\r\n```\r\n\r\nThe `iat` and `exp` claims are strings expressed in milliseconds. According to RFC 7519 [4.1](https://www.rfc-editor.org/rfc/rfc7519#section-4.1), those should be numerics and expressed in seconds.",
      "createdAt": "2024-07-22T20:48:39Z",
      "updatedAt": "2024-07-24T21:35:55Z",
      "closedAt": "2024-07-24T21:35:55Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you! Will update the examples to be correct. ",
          "createdAt": "2024-07-24T15:42:04Z",
          "updatedAt": "2024-07-24T15:42:04Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "I_kwDOJt_WwM6QeAZQ",
      "title": "Audience, scope & purpose",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/115",
      "state": "CLOSED",
      "author": "arndt-s",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "From IETF chat: \"Scope, audience and purpose claims all limit the transaction token but at different levels. I wonder if this can be simplified?\"\r\n\r\nWorkload developers that validate transaction tokens currently would need to validate all 3 of these claims just for the sake of knowing if the transaction token is acceptable in their context. Authorization decisions based on azd and rctx then come on top of that.\r\n\r\n",
      "createdAt": "2024-07-22T21:16:50Z",
      "updatedAt": "2025-01-23T17:19:02Z",
      "closedAt": "2025-01-23T17:19:02Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm a little confused regarding the inclusion of scope as 'scope' is only an input parameter to the Transaction Token Service and that parameter name is used because of the profiling of the Token Exchange spec. \r\n\r\nThe transaction token itself only has `aud` and `purp` and the point of using a different name than 'scope' for `purp` is that the semantics are slightly different. A transaction token should have a very fine-grained purpose and most scope values are not fine-grained. \r\n\r\nA workload should only need to validate the `aud` field to know that the transaction token is part of it's trust domain and secondly the `purp` claim to evaluate if the stated purpose is something that the workload participates in. Not also, that a workload is not required to process the `purp` claim from an authorization point of view. I can depend on what the request is and risk, etc. \r\n\r\nThe intended authorization model is that the Transaction Token Service acts as a primary PDP when issuing the transaction token and then each workload can run it's own policy (if desired) to further evaluate the validity of the request.",
          "createdAt": "2024-07-24T15:47:11Z",
          "updatedAt": "2024-07-24T15:47:11Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "MEMBER",
          "body": "You are right @gffletch, `scope` is not part of the transaction token and just a parameter of token exchange that results in the `aud` claim.\r\n\r\nMy thinking during the talk was whether `aud` is truly necessary. Once the signature check has passed (either based on issuer claim + metatabase + JWKS or trust bundle) the trust domain is implicit IMO. Also, what if the signature check passed but the audience does not match with the signing keys? Are workloads expected to check and deny then?\r\n\r\nRelated, do we expect workloads to just accept transaction tokens of a single trust domain or do we see use cases where incoming transaction tokens are part of different trust domains than the workload itself?",
          "createdAt": "2024-07-25T08:06:06Z",
          "updatedAt": "2024-07-25T08:06:06Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So a couple of thoughts... I do think that `aud` is necessary as it's possible there could be multiple issuers that are all part of the single trust domain. For me, this makes the audience an easier way to determine the validity of the token to the workload.\r\n\r\nAs for transaction tokens that cross trust domain boundaries, I don't think we want to enable that. I'd prefer we leverage the cross domain OAuth work and the wimse token translation work to get a transaction token issued by the trust domain.\r\n\r\nWe may need to expand some thinking around authorization models and how they fit in with transaction tokens.",
          "createdAt": "2024-07-25T16:35:18Z",
          "updatedAt": "2024-07-25T16:35:18Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "Note: Although `scope` may not be part of the TraT definition, we decided to include the `scope` value in our implementation. For us, this value should at least be validated by workloads if there isn't a more specific purpose given in the TraT. ",
          "createdAt": "2024-07-26T13:10:59Z",
          "updatedAt": "2024-07-26T13:10:59Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@obfuscoder is there a reason you chose not to just set the purpose of the given TraT to the scope ? Semantic mismatch?",
          "createdAt": "2024-09-27T18:28:18Z",
          "updatedAt": "2024-09-27T18:28:18Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "@gffletch We had already an implementation of transaction tokens in place before we became aware of the transaction token draft. Our implementation was a bit more aligned with Token Exchange where the scope is copied (or narrowed down) to the internally used transaction token. So most deployments rely on having the scope in the \"scope\" claim. There is also pretty good library support for the scope claim already.\r\n\r\nThat said, it might not be an issue of semantics, but rather of ownership. At least in our implementation, scope values are defined (and owned) by the services which enforce the scope (also in internal calls using transaction tokens) when the internal microservice interface is called. Purpose, on the other hand, is more bound to the use case which needs to be fulfilled and the definition of those use cases will rather be done by the external endpoints (BFFs) and thus also owned by them. The internal microservices will then need to be configured to support purposes defined by several external endpoints. So it might still be worth, having the microservice check the scope it defined to be present when calling its API on top of validating the purpose.",
          "createdAt": "2024-09-30T10:56:57Z",
          "updatedAt": "2024-09-30T10:56:57Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I've worked in environments earlier where the name \"scope\" in internal tokens caused enormous confusion with OAuth scopes from external systems.",
          "createdAt": "2024-10-04T17:24:19Z",
          "updatedAt": "2024-10-04T17:24:19Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure we need to do anything here. The input `scope` value (either explicitly or from the input token) can be put in the `tctx` claim and used by downstream services. The spec does not prevent what @obfuscoder has implemented.",
          "createdAt": "2025-01-15T14:51:57Z",
          "updatedAt": "2025-01-15T14:51:57Z"
        }
      ]
    },
    {
      "number": 117,
      "id": "I_kwDOJt_WwM6Qv4GP",
      "title": "IANA registration procedures",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/117",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tulshi"
      ],
      "labels": [],
      "body": "We received the following email from IANA:\r\n\r\nBefore the IETF meeting, we check working group agendas for documents with IANA-related issues. We have notes about the current version of this document:\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-oauth-transaction-tokens-03\r\n\r\n1) We haven\u2019t been asked to update the change controller field for existing registrations, but the IESG prefers that the IETF be listed as the change controller for new registrations.\r\n\r\n2) A few minor editorial notes about the media type registration:\r\n\r\n- The applicant name and email field should be omitted. Where those fields appear on the IANA website, they\u2019re an artifact of the web form, and not officially part of the template. We\u2019re gradually removing those fields from existing registrations.\r\n\r\n- The media type registrations don\u2019t appear to include a change controller field.\r\n\r\n- The quotation marks around type, subtype, and required and optional parameters can be removed, as should the \u201c(RFC 2046)\u201d after \u201capplication.\u201d\r\n\r\nFinally, please note that RFC 6838 recommends asking the [media-types@ietf.org](mailto:media-types@ietf.org) mailing list for an informal review.\r\n\r\nIf you have any questions, just let us know. If you'd like to talk in person, you can find us next to the RFC Editor's table from Monday through Thursday. You can also request another review at any time by contacting us at [iana@iana.org](mailto:iana@iana.org).\r\n\r\nFor more information about IANA Considerations section requirements, please see\r\n\r\nhttps://www.iana.org/help/protocol-registration\r\n\r\nBest regards,\r\n\r\nAmanda Baber\r\nIANA Operations Manager",
      "createdAt": "2024-07-24T21:05:47Z",
      "updatedAt": "2024-10-09T05:05:13Z",
      "closedAt": "2024-10-09T05:05:13Z",
      "comments": []
    },
    {
      "number": 118,
      "id": "I_kwDOJt_WwM6Qv5QV",
      "title": "RAR object inside a TraT",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/118",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [
        "pre-last-call"
      ],
      "body": "The following was suggested by Justin at the IETF 120 session on TraTs:\r\nParaphrasing: Justin suggested a way to include a RAR object itself.",
      "createdAt": "2024-07-24T21:08:41Z",
      "updatedAt": "2025-01-23T17:02:33Z",
      "closedAt": "2025-01-23T17:02:33Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Email sent to the list... I'm not sure it makes sense to define this in the transaction token spec",
          "createdAt": "2024-07-24T21:34:35Z",
          "updatedAt": "2024-07-24T21:34:35Z"
        },
        {
          "author": "jricher",
          "authorAssociation": "CONTRIBUTOR",
          "body": "RFC9396 already defines \"authorization_details\" for use at the top level of a JWT. ",
          "createdAt": "2024-07-27T03:22:04Z",
          "updatedAt": "2024-07-27T03:22:04Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "@jricher are you suggesting that we call out that if you want to put a RAR object inside the `tctx` that you add the `authorization_details` claim at the top level of the `tctx`? I wouldn't want the `authorization_details` claim at the top-level of the TraT.",
          "createdAt": "2024-09-27T18:19:42Z",
          "updatedAt": "2024-09-27T18:19:42Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm ok closing this if we don't get any feed back. It might be good to check on the list one more time. I'm not convinced we need to add any verbiage to cover this use case.",
          "createdAt": "2025-01-15T14:46:36Z",
          "updatedAt": "2025-01-15T14:46:36Z"
        }
      ]
    },
    {
      "number": 119,
      "id": "I_kwDOJt_WwM6Qv9ND",
      "title": "Azd claim name conflict with RAR",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/119",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch",
        "tulshi"
      ],
      "labels": [],
      "body": "The following came up in the IETF 120 session about TraTs:\r\n\r\nThere was some confusion about the re-use of the claim defined in RAR",
      "createdAt": "2024-07-24T21:16:14Z",
      "updatedAt": "2025-01-14T18:53:02Z",
      "closedAt": "2025-01-14T18:53:02Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "\"tad\": \"Transaction Authorization Details\" is a possible replacement name for \"azd\"",
          "createdAt": "2024-07-24T21:17:46Z",
          "updatedAt": "2024-07-24T21:17:46Z"
        },
        {
          "author": "jricher",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I suggest \"txc\" or \"tctx\" for transaction context",
          "createdAt": "2024-07-27T03:21:07Z",
          "updatedAt": "2024-07-27T03:24:31Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://mailarchive.ietf.org/arch/msg/oauth/sA5CIPkF9k5qJ3OG7JFVtDnpZDU/ \r\n\r\n> Any statement I made at meeting the other day on this topic was less an\r\nactual proposal and more just a meta comment that there might be some\r\nconfusion around the term \"authorization details\" because it is already\r\nused extensively in RAR to mean a RAR related thing. RFC9396 uses the\r\nterm \"authorization\r\ndetails\" 64 times while the parameter, claim, and introspection response\r\nmember name \"authorization_details\" appears 87 times.\r\n> \r\n> Ironically, I'm sending this from the \"[ID-align] Side Meeting at IETF120\"\r\nwhich is about divergent use of similar or same terms.",
          "createdAt": "2024-07-29T13:36:25Z",
          "updatedAt": "2024-07-29T13:36:25Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "copied from the WG mailing list https://mailarchive.ietf.org/arch/msg/oauth/sA5CIPkF9k5qJ3OG7JFVtDnpZDU/ \r\n\r\n> Any statement I made at meeting the other day on this topic was less an\r\nactual proposal and more just a meta comment that there might be some\r\nconfusion around the term \"authorization details\" because it is already\r\nused extensively in RAR to mean a RAR related thing. RFC9396 uses the\r\nterm \"authorization\r\ndetails\" 64 times while the parameter, claim, and introspection response\r\nmember name \"authorization_details\" appears 87 times.\r\n> \r\n> Ironically, I'm sending this from the \"[ID-align] Side Meeting at IETF120\"\r\nwhich is about divergent use of similar or same terms.",
          "createdAt": "2024-07-29T19:01:34Z",
          "updatedAt": "2024-07-29T19:01:34Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm good with `tctx` as that \"matches\" the request context `rctx`. We may need to add additional text to describe what is expected within the `tctx` object.",
          "createdAt": "2024-09-27T18:17:50Z",
          "updatedAt": "2024-09-27T18:17:50Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes from call on: 11/22/2024\r\n- We could add a statement that recommends to put the RAR data inside the tctx (non-normative)\r\n- Or we could say nothing after renaming \"azd\" to \"tctx\"\r\n- Or put normative language about \"if you're doing RAR you put the RAR data inside the tctx object\"\r\n- (Pieter): The \"azd\" claim came from RAR originally, but we don't refer to RAR now. So invent a new claim that is not azd, and say you put the RAR data here in that claim.\r\n- (George): \"tctx\" is the new name for \"azd\". Or if you want to include the RAR data, put it inside the \"tctx\"\r\n- (Aaron): It makes sense to do the normative suggestion above.\r\n- (Pieter): Can we have a 3-letter name? \r\n- (George): It's complementary to the \"rctx\" in the request. It should be complementary, whatever it is.\r\n",
          "createdAt": "2024-11-22T16:23:15Z",
          "updatedAt": "2024-11-22T18:39:01Z"
        }
      ]
    },
    {
      "number": 120,
      "id": "I_kwDOJt_WwM6Qv-Nk",
      "title": "The \"N_A\" value for the \"txn\" claim can complicate processing",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/120",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The following issue came up during the IETF 120 session on TraTs:\r\nThere was a comment about some of the processing rules that was the equivalent of NULL with extra processing steps (N_A)\r\n",
      "createdAt": "2024-07-24T21:19:28Z",
      "updatedAt": "2024-09-04T23:20:54Z",
      "closedAt": "2024-09-04T23:20:54Z",
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "George and Atul recommend that we should drop the sentences after \"REQUIRED A unique transaction identifier as defined in Section 2.2 of [[RFC8417](https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-03.html#RFC8417)].\"\r\n\r\nSince this is a normative section, it need not have any usage guidance in there. If required we can add non-normative usage guidance such as \"The txn value MAY be used to identify the call chain\"",
          "createdAt": "2024-07-24T21:26:18Z",
          "updatedAt": "2024-07-24T21:26:18Z"
        }
      ]
    },
    {
      "number": 121,
      "id": "I_kwDOJt_WwM6QwDHF",
      "title": "`subject_token` description needs to be more flexible",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/121",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tulshi"
      ],
      "labels": [],
      "body": "the following came up in the IETF 120 session about TraTs:\r\n\"Add an outline on when self-signed may be useful\r\nYaron thought self-signed wil be a footgun\r\nSuggest a simple JSON object as replacement.\"\r\n\r\nThe description of `subject_token` in section 7.1 is too rigid as it only allows an inbound token or a self-signed token. It should make it clear that an implementation may choose to have any different format for the subject_token.\r\n\r\n",
      "createdAt": "2024-07-24T21:34:42Z",
      "updatedAt": "2024-08-29T22:41:11Z",
      "closedAt": "2024-08-29T22:41:11Z",
      "comments": []
    },
    {
      "number": 124,
      "id": "I_kwDOJt_WwM6UmVFG",
      "title": "Logging guidance and PII data handling",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/124",
      "state": "CLOSED",
      "author": "ashayraut",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently logging guidance says \"Txn-Tokens SHOULD NOT be logged if they contain Personally Identifiable Information (PII)\". I have few questions on this one\r\n1. Risks with logging is that token is still valid for few minutes and if logs are rotated to any other central archival storage with access to broader set of people or someone has access to the server with logs, then they can reuse the token. So why not just say MUST not log token?\r\n2. Also how would a service know if incoming token has PII or not. They will have to validate the token, extract claims and then somehow know infer that a claim is PII or not. \r\n3. On similar lines, for PII , can we mention that TTS SHOULD evaluate encrypting  or tokenizing PII claims rather than adding them in plaintext. Adding in plaintext is a risk because TTS isn't aware where the token flows. ",
      "createdAt": "2024-08-28T22:15:07Z",
      "updatedAt": "2024-09-27T18:08:08Z",
      "closedAt": "2024-09-27T18:08:08Z",
      "comments": [
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "Txn-Tokens already contain the subject identifier which is enough to be considered PII in some environments. Our own policy states that PII data can be logged, but the logs must be deleted after a few days (max 7) days.\r\n\r\nWe forbid logging of Txn-Tokens in our integrations for security reasons, not just because they could contain PII.\r\n",
          "createdAt": "2024-08-29T07:11:36Z",
          "updatedAt": "2024-08-29T07:11:36Z"
        },
        {
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "body": "Our implementation in my company, we do follow the same guidance i.e do not log tokens at all, nothing to do with PII. Tokens are pretty much considered as credentials as validating parties leverage the claims for authorizing the request. ",
          "createdAt": "2024-08-29T10:10:59Z",
          "updatedAt": "2024-08-29T10:10:59Z"
        }
      ]
    },
    {
      "number": 127,
      "id": "I_kwDOJt_WwM6XjqcD",
      "title": "Clarify Transaction Token Context",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/127",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch",
        "tulshi"
      ],
      "labels": [],
      "body": "In section 2.2.1 the context that may be included in a transaction token includes \"The external authorization token (e.g., the OAuth access token)\". To ensure this is not interpreted to mean that an access token is included in a transaction token, I would suggest the following additions, in line with section 9.3 in Security Considerations:\r\n\r\n\"A reference to the external authorization token (e.g., the OAuth access token), including scopes or claims included in the authorization token, but not the unmodified authorization token (see Security Considerations, Section 9.3)\"",
      "createdAt": "2024-09-23T13:44:56Z",
      "updatedAt": "2024-10-03T00:06:20Z",
      "closedAt": "2024-10-03T00:06:20Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Pieter, in that section of the spec we are describing what needs to be sent to the Transaction token service, I think in that case the full access token should be passed. However, when generating the request context, we want to ensure that the full access token is not included. Did I get my spec sections wrong?",
          "createdAt": "2024-09-27T15:37:55Z",
          "updatedAt": "2024-09-27T15:37:55Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe instead we shouldn't say \"This context MAY include:\" but rather ... \"The information provided to the Txn-Token Service MAY include\" to not confuse readers who might think this data should be included in the request context.",
          "createdAt": "2024-09-27T15:39:48Z",
          "updatedAt": "2024-09-27T15:39:48Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed - I missed that this was for initial token creation. I did create a PR with your suggested text.",
          "createdAt": "2024-09-27T15:53:14Z",
          "updatedAt": "2024-09-27T15:53:14Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "PR approved",
          "createdAt": "2024-09-27T18:06:14Z",
          "updatedAt": "2024-09-27T18:06:14Z"
        }
      ]
    },
    {
      "number": 128,
      "id": "I_kwDOJt_WwM6Xjuk0",
      "title": "Ascii Diagram update",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/128",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "PieterKas"
      ],
      "labels": [],
      "body": "The ASCII diagram in Figure 1 has misaligned lines in the HTML rendering for steps 1,2,3 and 7 on the diagram.\r\n\r\nThe ASCII diagram in Figure 2 has misaligned lines in the HTML rendering for steps 1,2,3 and 10 on the diagram.",
      "createdAt": "2024-09-23T13:50:49Z",
      "updatedAt": "2024-09-27T17:26:33Z",
      "closedAt": "2024-09-27T17:26:33Z",
      "comments": []
    },
    {
      "number": 129,
      "id": "I_kwDOJt_WwM6Xj3qX",
      "title": "Trust Domain definition",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/129",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The definition of a Trust Domain feels very specific to network segmentation. Is there a industry level Trust Domain definition we can use instead? For example, should we use a definition that defines the trust domain in terms of the shared policies that apply? Something like:\r\n\r\n\"A trust domain refers to a collection of systems, applications, or workloads that share a common security policy\".",
      "createdAt": "2024-09-23T14:03:15Z",
      "updatedAt": "2024-09-27T17:18:54Z",
      "closedAt": "2024-09-27T17:18:54Z",
      "comments": []
    },
    {
      "number": 130,
      "id": "I_kwDOJt_WwM6Xj4lr",
      "title": "Editorial change",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/130",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Section 4\r\n\r\nChange from:\r\n\r\n\"A published interface to an Trust Domain that results in the invocation of a workload within the Trust Domain.\"\r\n\r\nto\r\n\r\n\"A published interface to a Trust Domain that results in the invocation of a workload within the Trust Domain.\"",
      "createdAt": "2024-09-23T14:04:46Z",
      "updatedAt": "2024-09-27T12:08:27Z",
      "closedAt": "2024-09-27T12:08:27Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Issue already adressed.",
          "createdAt": "2024-09-27T12:08:27Z",
          "updatedAt": "2024-09-27T12:08:27Z"
        }
      ]
    },
    {
      "number": 131,
      "id": "I_kwDOJt_WwM6XkFrD",
      "title": "Can a sub_id change?",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/131",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch",
        "tulshi",
        "PieterKas"
      ],
      "labels": [
        "pre-last-call"
      ],
      "body": "Is a sub_id considered constant throughout the transaction, or can this change over time. If it does change, how should the \"old sub_id\" be recorded? As part of the azd claim? Should we add information to that effect?\r\n\r\n@tulshi and @gffletch ",
      "createdAt": "2024-09-23T14:20:49Z",
      "updatedAt": "2025-01-23T17:16:04Z",
      "closedAt": "2025-01-23T17:16:03Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we moved away from `sub_id` to just using `sub`.  However, the larger question is an interesting one. Is there a case where in completing a requested transaction, one of the calls to one of the workloads SHOULD NOT receive the `sub` claim. Is the TraT then leaking information? I haven't thought about this more than writing this comment :) ",
          "createdAt": "2024-09-27T16:15:56Z",
          "updatedAt": "2024-09-27T16:15:56Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm. interesting question. We do not have a means of creating constrained versions of TraTs today. I'd punt this for later though. I'm not sure this is critical to the TraTs draft as of now.",
          "createdAt": "2024-10-03T00:50:41Z",
          "updatedAt": "2024-10-03T00:50:41Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree. Within a single trust domain, this is probably less of an issue. ",
          "createdAt": "2024-10-21T20:56:04Z",
          "updatedAt": "2024-10-21T20:56:04Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "So I was have a conversation the other day about authorization and the topic of Transaction Tokens came up. One of the interesting discussion points was whether the authorization model is consistent throughout the life of the transaction token. For example, maybe the data tier doesn't know about users when it comes to enforcing authorization policy. Maybe that is done through fine-grained entitlements. That keeps the data tier from needing to reach into the user authorization store to determine which data the user can access. Or maybe there is a authorization layer closer to the edge that will redact data the user isn't allowed to see.\r\n\r\nIn either of these cases, should it be possible to get a replacement transaction token that doesn't have a `sub` but does have the list of data tier entitlements that are authorized for this particular request.",
          "createdAt": "2025-01-15T14:41:29Z",
          "updatedAt": "2025-01-15T14:41:29Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "George and I discussed this and I feel that the sub_id is a core value of the Transaction Token, which assures the user identity throughout the call chain. Changing that would be dangerous. We have therefore agreed to close this issue.",
          "createdAt": "2025-01-23T17:16:03Z",
          "updatedAt": "2025-01-23T17:16:03Z"
        }
      ]
    },
    {
      "number": 132,
      "id": "I_kwDOJt_WwM6XkKgb",
      "title": "rctx MUST",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/132",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch",
        "tulshi"
      ],
      "labels": [],
      "body": "Section 7.1 makes the inclusion of an rctx value mandatory (MUST). \r\n\r\n1. Should this be a MUST, or could it be omitted if no additional context is passed\r\n2. If no additional context is passed, should we specify that it is included, but with a null value?\r\n\r\n@gffletch @tulshi ",
      "createdAt": "2024-09-23T14:26:03Z",
      "updatedAt": "2024-09-27T17:48:58Z",
      "closedAt": "2024-09-27T17:48:58Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it should be a MUST because the requesting workload identity is part of the `rctx`. Maybe we could clarify that only specifying that value is ok. Is there a reason that the requesting workload should NOT be part of the TraT?",
          "createdAt": "2024-09-27T16:13:43Z",
          "updatedAt": "2024-09-27T16:13:43Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Latest drafts show rctx as optional....",
          "createdAt": "2024-09-27T17:48:58Z",
          "updatedAt": "2024-09-27T17:48:58Z"
        }
      ]
    },
    {
      "number": 133,
      "id": "I_kwDOJt_WwM6XkTWR",
      "title": "access_token potential for confusion",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/133",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch",
        "tulshi"
      ],
      "labels": [],
      "body": "Section 7.2 includes a \"access_token\", which is part of the token exchange protocol. RFC 8693 makes it clear that it des not need to be an OAuth token, but perhaps we can reference that this parameter is define in RFC 8693?\r\n\r\nPerhaps something like:\r\n\r\n\"The following describes required values of the token exchange protocol as defined in RFC 8693 which must be included in the Txn-Token Response:\"\r\n\r\nor\r\n\r\n\"A successful response to a Txn-Token Request by a Transaction Token Service is called a Txn-Token Response. The Txn-Token Response is a profile of the token exchange response defined in RFC 8693. If the Transaction Token Service responds with an error, the error response is as described in Section 5.2 of RFC6749. The following describes required values of the token exchange protocol as defined in RFC 8693 which must be included in the Txn-Token Response:\"",
      "createdAt": "2024-09-23T14:39:26Z",
      "updatedAt": "2024-09-27T17:20:29Z",
      "closedAt": "2024-09-27T17:20:29Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not seeing access_token mentioned in section 7.2 other than implicitly when referencing the token types defined by 8693. Did you mean section 7.4? I'm fine with the first suggestion.",
          "createdAt": "2024-09-27T16:08:19Z",
          "updatedAt": "2024-09-27T16:11:00Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, section 7.4.",
          "createdAt": "2024-09-27T17:20:29Z",
          "updatedAt": "2024-09-27T17:20:29Z"
        }
      ]
    },
    {
      "number": 134,
      "id": "I_kwDOJt_WwM6XkV93",
      "title": "Clarify why the \"aud\" claim remains unchanged",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/134",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch",
        "tulshi"
      ],
      "labels": [],
      "body": "Good practice is to explain why something is a MUST. \r\n\r\nSuggestion:\r\n\r\nFrom: The value of the aud claim MUST remain unchanged in a replacement Txn-Token.\r\n\r\nTo: The value of the aud claim MUST remain unchanged in a replacement Txn-Token to prevent the Txn-Token from being accepted outside it's current Trust Domain.\r\n\r\nAlternatively, we cann add security considerations for the draft as well.",
      "createdAt": "2024-09-23T14:43:26Z",
      "updatedAt": "2024-10-04T21:24:21Z",
      "closedAt": "2024-10-04T21:24:21Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm good with that text.",
          "createdAt": "2024-09-27T16:04:17Z",
          "updatedAt": "2024-09-27T16:04:17Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the current PR is making the change in the wrong place (unless I'm horribly mistaken)",
          "createdAt": "2024-10-03T00:28:45Z",
          "updatedAt": "2024-10-03T00:28:45Z"
        }
      ]
    },
    {
      "number": 135,
      "id": "I_kwDOJt_WwM6XkZyG",
      "title": "Authentication mechanisms",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/135",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I wonder if we can clarify the guidance in Section 7.4 a bit: \r\n\r\nFrom: It SHOULD rely on mechanisms, such as Spiffe or some other means of performing MTLS [RFC8446], to securely authenticate the requester.\r\n\r\nTo: It SHOULD rely on JWT or X.509 credentials, which may be provisioned using SPIFFE or other mechanisms, to securely authenticate the requester. \r\n\r\nThe final sentence in section 7 probably also needs a bit of clarification:\r\n\r\nIt SHOULD rely on mechanisms, such as [Spiffe], to securely authenticate the Transaction Token Service before making a Txn-Token Request. I think the requirement here should be that the Transaction Server should be authenticated to the workload using a JWT or X.509 certificate, which may be provisioned using SPIFFE or another mechanism and used with a secure protocol like MTLS or using the WIMSE service-to-service authentication mechanisms.",
      "createdAt": "2024-09-23T14:49:19Z",
      "updatedAt": "2024-11-09T07:42:35Z",
      "closedAt": "2024-10-24T18:12:32Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I think clarifying this would be good (Section 7.6:) For me the key is that any workload invoking the TTS must use some form of strong client authentication. That could be SPIFFE, private_secret_jwt, mTLS, ??? The normative requirement should be \"strong client authentication\" and the others can be examples of such.\r\n\r\nI'm not sure how the workload can \"pre-authenticate\" the TTS. I like the pre-defined endpoint (or maybe \"pre-configured\" endpoint) concept. Basically, the TTS should be at a well known location. I guess there is a security issue if the workload sends an access_token to the wrong server especially if the external access_token is a bearer token. Is this something we should just cover in the Security Considerations section?",
          "createdAt": "2024-09-27T15:56:04Z",
          "updatedAt": "2024-09-27T15:56:04Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I think you touch on a few things here:\r\n\r\n1. We don't address discoverability of transaction token servers. Should we add something (e.g. define a well known endpoint, include discovery metadata in the authorization server metadata etc?)\r\n2. Can you say more about \"pre-authenticate\"? Do you mean some mechanism whereby the workload can trust the TTS or the location of the TTS?\r\n3. Agreed on the security considerations for ensuring that the access token is not sent to an incorrect endpoint (I can imagine an adversary getting into a build server, modifying the TTS location for a workload, and then have the TTS send tokens to it. I can also imagine this happening by accident, especially if there are multiple TTS's in a deployment.",
          "createdAt": "2024-09-27T16:15:09Z",
          "updatedAt": "2024-09-27T16:15:09Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding the second point: Yes, should there be a way for the workload to determine it can trust the TTS before sending it an external token? This isn't something that is common in OAuth specs. It is assumed that the client knows whether to send the request or not.",
          "createdAt": "2024-09-27T18:01:21Z",
          "updatedAt": "2024-09-27T18:03:20Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Regarding 1: I think we wanted to talk about it at the last IETF and ran out of time. I seem to remember a few conversations around \"discovery\" but nothing concrete was decided.",
          "createdAt": "2024-09-27T18:04:19Z",
          "updatedAt": "2024-09-27T18:04:19Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I found the issue it's #95 ",
          "createdAt": "2024-09-27T20:23:16Z",
          "updatedAt": "2024-09-27T20:23:16Z"
        }
      ]
    },
    {
      "number": 145,
      "id": "I_kwDOJt_WwM6ZAw-k",
      "title": "Trust Doman vs trust domain",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/145",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tulshi"
      ],
      "labels": [
        "pre-last-call"
      ],
      "body": "I see different capitalisation of trust domain (sometimes Trust Domain). We define \"Trust Domain\", but we also use \"trust domain\" throughout the document. Should we be consistent with capitalisation? If not, what are the rules for being inconsistent? ",
      "createdAt": "2024-10-04T19:03:57Z",
      "updatedAt": "2025-01-31T17:28:50Z",
      "closedAt": "2025-01-31T17:28:50Z",
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, we should be consistent:) It seems like we'd only capitalize it if it's a proper noun? I'm very bad at English grammar rules :)",
          "createdAt": "2024-10-04T22:57:25Z",
          "updatedAt": "2024-10-04T22:57:25Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I am of the opinion that anything we have defined within the Terminology section of the spec should be capitalized, so that it is clear that we are referring to that definition.",
          "createdAt": "2024-10-29T00:46:20Z",
          "updatedAt": "2024-10-29T00:46:20Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I like that - it avoids ambiguity or requiring readers to be sufficiently immersed in the English language to distinguish between proper nouns etc. ",
          "createdAt": "2024-10-29T11:18:32Z",
          "updatedAt": "2024-10-29T11:18:32Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "I_kwDOJt_WwM6ole9U",
      "title": "\"Internal microservice\" -> workload",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/154",
      "state": "OPEN",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Hannes, Joe Salowey and Jaroslav of Wimse pointed out that we are using the term \"internal microservice\" in the diagram, but calling it \"workload\" in the rest of the spec. We should review and see if renaming the item in the diagram to \"workload\" makes sense.",
      "createdAt": "2025-02-03T19:56:13Z",
      "updatedAt": "2025-02-03T19:56:13Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 155,
      "id": "I_kwDOJt_WwM6sFq3f",
      "title": "Transaction Token Lifetime",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/155",
      "state": "OPEN",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch"
      ],
      "labels": [],
      "body": "Based on conversations at OSW 2025, there was a proposal to remove the restriction of limiting the transaction token lifetime to be less than the access token. The proposal based on conversations with George is to move it into the security considerations and remove the constraint.\n\nTopic for discussion at IETF 122",
      "createdAt": "2025-02-28T13:33:26Z",
      "updatedAt": "2025-03-10T09:15:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm ok with leaving the current wording and changing it from a MUST to a SHOULD (meaning the transaction token lifetime SHOULD NOT extend beyond the lifetime of the access token). And then also adding a section to the Security Considerations from when it may be ok to extend beyond the lifetime of the authorization token.\n\nI'm happy to take this work... I think I can get to it this week.",
          "createdAt": "2025-03-04T15:18:13Z",
          "updatedAt": "2025-03-04T15:18:13Z"
        },
        {
          "author": "FrodeI",
          "authorAssociation": "NONE",
          "body": "Hello, I raised this question at the OSW (and thank you for a good discussion). I understand the concern that the use case for transaction tokens are for a single operation only, and as such long lifetimes does not make sense and will only increase the security risk. However the lifetime of the access token is commonly understood to specify when the operation can be started (though as far as I can tell, RFC6749 actually doesn't say much on this). Many applications however have operations exposed through APIs that take several seconds or even minutes to complete. The client can not be expected to always know how long an operation will take to complete, and can only be reasonably sure that the access token it's presenting when invoking the operation is valid. For operations where multiple internal services are involved, where some services uses Replacement Txn-Token flow as described in section 2.5.2 of the draft, the result may also be that some internal services succeed in requesting transaction tokens, while later steps fail because the original access token is now expired.\n\nI think text in section 9.1 addresses this well, but I would suggest that 2.3 does not bind the transaction token lifetime to the access token lifetime at all, and omit the second sentence in that section completely.",
          "createdAt": "2025-03-10T09:15:45Z",
          "updatedAt": "2025-03-10T09:15:45Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "I_kwDOJt_WwM6tqZOp",
      "title": "IANA considerations",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/159",
      "state": "OPEN",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Dear Authors,\n\nBefore the IETF meeting, we check working group agendas for documents with IANA-related issues. Notes about this document:\n\nhttps://datatracker.ietf.org/doc/html/draft-ietf-oauth-transaction-tokens-05\n\nRFC 9651 added a column called \u201cStructured Type\u201d to the HTTP Field Name registry. Should we leave that field blank for the new entries in Section 11.4? See\n\nhttps://www.iana.org/assignments/http-fields.\n\nIf you have any questions, just let us know. If you'd like to talk in person, you can find us next to the RFC Editor's table from Monday through Thursday. You can also request another review at any time by contacting us at [iana@iana.org](mailto:iana@iana.org).\n\nFor more information about IANA Considerations section requirements, please see\n\nhttps://www.iana.org/help/protocol-registration\n\nBest regards,\n\nAmanda Baber\nIANA Operations Manager",
      "createdAt": "2025-03-12T11:04:35Z",
      "updatedAt": "2025-03-12T11:04:35Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 5,
      "id": "PR_kwDOJt_WwM5UMFHs",
      "title": "renaming trats to tx-tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/5",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-28T21:45:45Z",
      "updatedAt": "2023-07-07T23:02:36Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "57443b4a7be04b5e8bf46a7153313dd96a318866",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "rename-trat",
      "headRefOid": "04b04f78fc0f754ba048329fdbbf00aed6e748c1",
      "closedAt": "2023-06-28T21:47:32Z",
      "mergedAt": "2023-06-28T21:47:32Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "15f2f510571cb6efd9cc814a98520413077f2339"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOJt_WwM5UnxCR",
      "title": "Updated diagram to reflect token name change",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/9",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-04T14:00:31Z",
      "updatedAt": "2023-07-07T23:02:48Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "6387cdefbbe7937597147a3f36c65fde3c2a593c",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "ec6b44dc7edea48418d94d10a5bc86e68a321407",
      "closedAt": "2023-07-06T18:57:06Z",
      "mergedAt": "2023-07-06T18:57:06Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "a5f062cdb073d334d368a7a87af4f3cdb5a062b6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5abaky",
          "commit": {
            "abbreviatedOid": "ec6b44d"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T18:56:59Z",
          "updatedAt": "2023-07-06T18:56:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOJt_WwM5UunhF",
      "title": "Update transaction-tokens.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/13",
      "state": "MERGED",
      "author": "hannestschofenig",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-05T17:42:27Z",
      "updatedAt": "2023-07-07T18:34:30Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "a5f062cdb073d334d368a7a87af4f3cdb5a062b6",
      "headRepository": "hannestschofenig/transaction-tokens",
      "headRefName": "patch-1",
      "headRefOid": "cce88e49c12bf4ba3fa898f9bcc636952292e771",
      "closedAt": "2023-07-07T18:34:30Z",
      "mergedAt": "2023-07-07T18:34:30Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "e38c3603b7c33d8dd1e5bb45df4d8d54a8b611a5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5abnNb",
          "commit": {
            "abbreviatedOid": "7332ebe"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-06T19:37:15Z",
          "updatedAt": "2023-07-06T23:01:18Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I wanted to point out that the contents of the transaction tokens may include claims that are not in the original request to the external endpoint, which is why I used the word \"computed\". If we remove this word from the sentence, then we may need to clarify that elsewhere.",
              "createdAt": "2023-07-06T19:37:15Z",
              "updatedAt": "2023-07-06T23:01:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5aj1W1",
          "commit": {
            "abbreviatedOid": "a6d234a"
          },
          "author": "hannestschofenig",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-07T17:27:27Z",
          "updatedAt": "2023-07-07T17:27:27Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n* Any computed context that needs to be preserved in the call chain. This includes information that was not in the original request to the external endpoint.\r\n```",
              "createdAt": "2023-07-07T17:27:27Z",
              "updatedAt": "2023-07-07T17:27:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5akizn",
          "commit": {
            "abbreviatedOid": "cce88e4"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T18:33:27Z",
          "updatedAt": "2023-07-07T18:33:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOJt_WwM5U-EwV",
      "title": "renamed file, updated workflow",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/14",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T22:50:22Z",
      "updatedAt": "2023-07-07T23:02:33Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "e38c3603b7c33d8dd1e5bb45df4d8d54a8b611a5",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "file-rename",
      "headRefOid": "33670cc2e3c73ecb35720076a5c6a93926b40138",
      "closedAt": "2023-07-07T22:51:32Z",
      "mergedAt": "2023-07-07T22:51:32Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "10d97c629c171361d4a4b049d9e4e2c157af95a9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 15,
      "id": "PR_kwDOJt_WwM5U-GhU",
      "title": "added links to output",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/15",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T22:58:43Z",
      "updatedAt": "2023-07-07T23:02:30Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "10d97c629c171361d4a4b049d9e4e2c157af95a9",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-readme",
      "headRefOid": "19c918a2da4874942ca3674b1271630a5bcfa323",
      "closedAt": "2023-07-07T22:59:46Z",
      "mergedAt": "2023-07-07T22:59:46Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "dfadd157b66281f24474c27c35dd1199382f65b4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 16,
      "id": "PR_kwDOJt_WwM5U-IWY",
      "title": "fixed filename and removed one issue that idnits found",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/16",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T23:10:47Z",
      "updatedAt": "2023-07-07T23:55:06Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "dfadd157b66281f24474c27c35dd1199382f65b4",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "file-rename-2",
      "headRefOid": "4c32686891f4886c74fe6d6e42ceb7458dc9653a",
      "closedAt": "2023-07-07T23:55:05Z",
      "mergedAt": "2023-07-07T23:55:05Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "60eb7c02e060e823646c3f3b9bb216c147a8db47"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 17,
      "id": "PR_kwDOJt_WwM5VIrMe",
      "title": "file to ignore unnecessary intermediate files",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/17",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T22:27:17Z",
      "updatedAt": "2023-07-10T22:27:28Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "60eb7c02e060e823646c3f3b9bb216c147a8db47",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "add-gitignore",
      "headRefOid": "23c4aada0e57e9bc39af4e762d96db9f35bf463c",
      "closedAt": "2023-07-10T22:27:27Z",
      "mergedAt": "2023-07-10T22:27:27Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "feabbd1faa9339b900c18d9fb3798dcfe5a819d8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 18,
      "id": "PR_kwDOJt_WwM5VJEOm",
      "title": "added replacement transaction tokens section",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/18",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T23:47:02Z",
      "updatedAt": "2023-07-10T23:49:12Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "feabbd1faa9339b900c18d9fb3798dcfe5a819d8",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-draft",
      "headRefOid": "e77bf1e895673251056a3ab7dbfcc11ee0f48741",
      "closedAt": "2023-07-10T23:49:11Z",
      "mergedAt": "2023-07-10T23:49:11Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "de53e33902a84288bb167f682d135e4a1356eaa1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "PR_kwDOJt_WwM5VJGZn",
      "title": "updated to version 01",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/19",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T23:53:28Z",
      "updatedAt": "2023-07-10T23:53:38Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "de53e33902a84288bb167f682d135e4a1356eaa1",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-version",
      "headRefOid": "5a235dd676542dfc0cbd311a6eb09e179b83403f",
      "closedAt": "2023-07-10T23:53:37Z",
      "mergedAt": "2023-07-10T23:53:37Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "94f0a2db44cf6a6557e3fd3d9acf99ad0ac019e3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 20,
      "id": "PR_kwDOJt_WwM5VJHp4",
      "title": "updated workflow",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/20",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-10T23:57:10Z",
      "updatedAt": "2023-07-10T23:57:19Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "94f0a2db44cf6a6557e3fd3d9acf99ad0ac019e3",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-version",
      "headRefOid": "9942aa248e7c25f1d1022cd316a1b98a49be138e",
      "closedAt": "2023-07-10T23:57:18Z",
      "mergedAt": "2023-07-10T23:57:18Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "c90d2fe80e850d1fda15c0aa5496488aba69037f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 25,
      "id": "PR_kwDOJt_WwM5XJ2WC",
      "title": "Broke single flow diagram into 3 different diagrams",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/25",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on discussion and feedback in the IETF 117 Session, I've split the single flow diagram into three different flow diagrams.",
      "createdAt": "2023-08-04T00:50:50Z",
      "updatedAt": "2023-08-04T16:34:51Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "c90d2fe80e850d1fda15c0aa5496488aba69037f",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "split-flows",
      "headRefOid": "fcc8f0203320c615d379273c5f2e4eac8f954e6b",
      "closedAt": "2023-08-04T16:34:50Z",
      "mergedAt": "2023-08-04T16:34:50Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "8ace3d59762e5cd06bcdba0343f2e136fad3f3b6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5dKVaA",
          "commit": {
            "abbreviatedOid": "fcc8f02"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-04T14:26:54Z",
          "updatedAt": "2023-08-04T14:26:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDOJt_WwM5XNw64",
      "title": "bumped version number for uploading to ietf datatracker",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/26",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-04T16:53:45Z",
      "updatedAt": "2023-08-04T16:54:33Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8ace3d59762e5cd06bcdba0343f2e136fad3f3b6",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "version-number-2",
      "headRefOid": "ecd49330842df96e32d19dd70d0771ec8bedb5bd",
      "closedAt": "2023-08-04T16:54:32Z",
      "mergedAt": "2023-08-04T16:54:32Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "04684bad5e499758a81aed611c29a69097dfdf1a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 27,
      "id": "PR_kwDOJt_WwM5XNx4g",
      "title": "Version number 2",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/27",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-04T16:58:10Z",
      "updatedAt": "2023-08-04T17:00:50Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "04684bad5e499758a81aed611c29a69097dfdf1a",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "version-number-2",
      "headRefOid": "860a10ba08937ceea9561545460d91e8889bc8d3",
      "closedAt": "2023-08-04T17:00:49Z",
      "mergedAt": "2023-08-04T17:00:49Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "33e11e4a1e870a7b2fcf411ec232e67a8705c78c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 28,
      "id": "PR_kwDOJt_WwM5XN6j_",
      "title": "renamed param in Txn-Token request",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/28",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current draft had a request parameter named \"azc\" and also the claim within the TraT is called \"azc\", which leads to confusion whether the request parameter content is directly embedded into the token. So I am renaming the request parameter to \"rctx\".",
      "createdAt": "2023-08-04T17:35:58Z",
      "updatedAt": "2023-09-05T18:58:54Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "33e11e4a1e870a7b2fcf411ec232e67a8705c78c",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "request-param",
      "headRefOid": "4f37d0bbefa119c6c47670464c3d0e35114ed823",
      "closedAt": "2023-08-09T18:20:07Z",
      "mergedAt": "2023-08-09T18:20:07Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "18e11ba305018e94769d30afaef74e61c25c2aaa"
      },
      "comments": [
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Ahh... I think this parameter is for cases where the requestor wants to add some specific authorization data into the overall TxTkn. I would prefer to rename the parameter 'authz_details' which would be a JSON object and then add it as a sub-object in the `azc` of the TxTkn. ",
          "createdAt": "2023-09-05T18:58:54Z",
          "updatedAt": "2023-09-05T18:58:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 29,
      "id": "PR_kwDOJt_WwM5YHF3W",
      "title": "incorporated feedback from Dr. Kelley W Burgin",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/29",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-17T01:48:46Z",
      "updatedAt": "2023-08-25T23:53:37Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "18e11ba305018e94769d30afaef74e61c25c2aaa",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "kelley-feedback",
      "headRefOid": "8828fe08f4539f729b47a0c50ff25c65fb0e2036",
      "closedAt": "2023-08-25T23:53:37Z",
      "mergedAt": "2023-08-25T23:53:37Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "5995ff482120a44ba3337863fcc47c1368c827e8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5eSYOn",
          "commit": {
            "abbreviatedOid": "701790f"
          },
          "author": "naveencm4u1",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-17T06:34:33Z",
          "updatedAt": "2023-08-17T07:08:58Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "Cache-Control: no-cache, no-store",
              "createdAt": "2023-08-17T06:34:33Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 296,
              "body": "`Each string is the the value of ` -> `Each string is the value of `",
              "createdAt": "2023-08-17T06:35:13Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 321,
              "body": "`The a longer lived access token` -> `A longer-lived access token`",
              "createdAt": "2023-08-17T06:35:59Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 151,
              "body": "In the draft, Points 6-9 are displayed as one line.",
              "createdAt": "2023-08-17T06:52:22Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 191,
              "body": "In the draft, Points 6-9 are displayed as one line.",
              "createdAt": "2023-08-17T06:53:09Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            },
            {
              "originalPosition": 296,
              "body": "Are there any recommendations on the type of data to include or not include in `azc`? Or is it up to the individuals to encrypt if there is any sensitive data in it?\r\n",
              "createdAt": "2023-08-17T07:06:31Z",
              "updatedAt": "2023-08-17T07:08:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOJt_WwM5a8D4F",
      "title": "final changes for draft-03 upload",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/36",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-21T23:11:17Z",
      "updatedAt": "2023-09-21T23:11:27Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "5995ff482120a44ba3337863fcc47c1368c827e8",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "draft-03",
      "headRefOid": "5b475e22a66a55b92859c024c31c57d9ad66ba50",
      "closedAt": "2023-09-21T23:11:26Z",
      "mergedAt": "2023-09-21T23:11:26Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "3fa87b2a831cd2dfb864716f36d7b591f02d7341"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 37,
      "id": "PR_kwDOJt_WwM5a8NVN",
      "title": "renamed tid to txn and added IANA registry contents",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/37",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-22T00:04:30Z",
      "updatedAt": "2023-09-22T16:40:00Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "27241e07163c90b5e8b0d08528b67d7e936e0b38",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "azc-iana",
      "headRefOid": "ae6d0ed621fe4b9d5381e1c9c05a1e7eca9ecc8d",
      "closedAt": "2023-09-22T16:39:58Z",
      "mergedAt": "2023-09-22T16:39:58Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "b31bf428360796a1ff01e83933fc5bd978b28ef8"
      },
      "comments": [
        {
          "author": "arndt-s",
          "authorAssociation": "MEMBER",
          "body": "`txn` is already registered (https://www.iana.org/assignments/jwt/jwt.xhtml).\r\nDo we need to register it again? I'm not sure what the guidance here is.",
          "createdAt": "2023-09-22T14:50:42Z",
          "updatedAt": "2023-09-22T14:50:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5hw1lY",
          "commit": {
            "abbreviatedOid": "007bbe2"
          },
          "author": "jricher",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-22T15:25:01Z",
          "updatedAt": "2023-09-22T15:25:02Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "This is already registered by SET, we should not (can not) re-register it.\r\n```suggestion\r\n## JWT Registry Contents\r\n\r\n```",
              "createdAt": "2023-09-22T15:25:01Z",
              "updatedAt": "2023-09-22T15:25:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5hxJ6J",
          "commit": {
            "abbreviatedOid": "ae6d0ed"
          },
          "author": "arndt-s",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Looks good to me",
          "createdAt": "2023-09-22T16:13:13Z",
          "updatedAt": "2023-09-22T16:13:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOJt_WwM5bBAKg",
      "title": "removed nesting",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/38",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-22T18:45:02Z",
      "updatedAt": "2023-09-25T18:33:06Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "b31bf428360796a1ff01e83933fc5bd978b28ef8",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "remove-nesting",
      "headRefOid": "aabcdca0a484cb8c5b9c7c856e40111794858630",
      "closedAt": "2023-09-25T18:33:05Z",
      "mergedAt": "2023-09-25T18:33:05Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "91b13d7a978a6bb89ed4a5e20a65064c84127f89"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5hzt3g",
          "commit": {
            "abbreviatedOid": "aabcdca"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-23T21:09:30Z",
          "updatedAt": "2023-09-23T21:09:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5h6YGk",
          "commit": {
            "abbreviatedOid": "aabcdca"
          },
          "author": "naveencm4u1",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-25T17:37:37Z",
          "updatedAt": "2023-09-25T17:37:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOJt_WwM5byaFA",
      "title": "Added reference for RFC 8417 (SET)",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/39",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See issue #31",
      "createdAt": "2023-10-03T12:47:43Z",
      "updatedAt": "2023-10-05T23:25:55Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "91b13d7a978a6bb89ed4a5e20a65064c84127f89",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "777c5557408b5208dc996d138c1782848c077ea6",
      "closedAt": "2023-10-05T23:25:54Z",
      "mergedAt": "2023-10-05T23:25:54Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "f484a68a9de14df5c8e8bdc3c2f11471a9d3145c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5ipza1",
          "commit": {
            "abbreviatedOid": "777c555"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-03T12:49:16Z",
          "updatedAt": "2023-10-03T12:49:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOJt_WwM5b053s",
      "title": "Added additional text to constrain Txn-Token Lifetime.",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/41",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Constrain Txn-Token to be shorter than the Access Token Lifetime (upper bound on lifetime)\r\n\r\nEditorial update to security considerations",
      "createdAt": "2023-10-03T19:33:36Z",
      "updatedAt": "2023-10-05T23:25:42Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "91b13d7a978a6bb89ed4a5e20a65064c84127f89",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-2",
      "headRefOid": "5c54abefe9899991652b60dc3a30549ba39de495",
      "closedAt": "2023-10-05T23:25:41Z",
      "mergedAt": "2023-10-05T23:25:41Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "9b7d4dc12da3e82c6a13e6e7abfaca5875153c9c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5itFdq",
          "commit": {
            "abbreviatedOid": "c879e8f"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-03T19:37:40Z",
          "updatedAt": "2023-10-03T19:37:40Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This assumes that the original request had an access token, which may not always be the case (although will frequently be the case). Can we update the language to say \"If the token or other credential presented to the Txn-Token service in order to issue a txn-token has an expiration time, then the txn-token MUST not exceed the lifetime of the originally presented token or credential\"",
              "createdAt": "2023-10-03T19:37:40Z",
              "updatedAt": "2023-10-03T19:37:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5itI24",
          "commit": {
            "abbreviatedOid": "c879e8f"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-03T19:44:43Z",
          "updatedAt": "2023-10-03T19:44:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yes, that sounds good. Will make the change.",
              "createdAt": "2023-10-03T19:44:43Z",
              "updatedAt": "2023-10-03T19:44:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5itKCj",
          "commit": {
            "abbreviatedOid": "5c54abe"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-03T19:48:10Z",
          "updatedAt": "2023-10-03T19:48:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 42,
      "id": "PR_kwDOJt_WwM5cIX_y",
      "title": "Removed Leaf-Tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/42",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Removed leaf token terminology",
      "createdAt": "2023-10-06T16:34:02Z",
      "updatedAt": "2023-10-06T18:54:43Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "f484a68a9de14df5c8e8bdc3c2f11471a9d3145c",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "7716405404106f490f71a5ef59b1180ad6b3d7a7",
      "closedAt": "2023-10-06T18:54:41Z",
      "mergedAt": "2023-10-06T18:54:41Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "6296e00d7010f9dcb73eab379b0cb71983b898e9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5jGba_",
          "commit": {
            "abbreviatedOid": "7716405"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-06T18:54:35Z",
          "updatedAt": "2023-10-06T18:54:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 43,
      "id": "PR_kwDOJt_WwM5c-ClW",
      "title": "added aud, orig and purp claims",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/43",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-17T04:28:30Z",
      "updatedAt": "2023-10-18T11:52:26Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "6296e00d7010f9dcb73eab379b0cb71983b898e9",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "purpose-orig",
      "headRefOid": "5633e15b55f29ee8fabe6998caf546fdae46bec2",
      "closedAt": "2023-10-18T04:06:50Z",
      "mergedAt": "2023-10-18T04:06:50Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "4998e02a0803a65b08c065e86cfbcd00062a1f54"
      },
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me. Left a comment, but nothing major.",
          "createdAt": "2023-10-18T11:51:54Z",
          "updatedAt": "2023-10-18T11:51:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5kWg7l",
          "commit": {
            "abbreviatedOid": "f3fe680"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T23:17:41Z",
          "updatedAt": "2023-10-17T23:17:42Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "What about calling this the \"req_ctxt\" (request context)? For me that is clearer than `orig`.  I might also add something about \"context\" in the text.\r\n\r\n\"... describes the origin and context of the transaction.\"",
              "createdAt": "2023-10-17T23:17:42Z",
              "updatedAt": "2023-10-17T23:17:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5kWhj4",
          "commit": {
            "abbreviatedOid": "f3fe680"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T23:19:42Z",
          "updatedAt": "2023-10-17T23:19:42Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "What about `req_wl` for requesting workload or `req_app` for requesting app. My thoughts here are that the requesting entity may not always be a gateway. In my original proposal I called this the `act` claim representing \"actor\" per the token exchange spec.",
              "createdAt": "2023-10-17T23:19:42Z",
              "updatedAt": "2023-10-17T23:19:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5kWjdf",
          "commit": {
            "abbreviatedOid": "f3fe680"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T23:22:19Z",
          "updatedAt": "2023-10-17T23:22:20Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Originally, I thought of `azc` to be more transaction context focused. Since we've moved a lot of those details to the `orig` claim. It may make sense to move this to `azd` for \"authorization details\". For me this maps better to the data we have in the `azc` claim in the example. Thoughts?",
              "createdAt": "2023-10-17T23:22:19Z",
              "updatedAt": "2023-10-17T23:22:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5kWjmE",
          "commit": {
            "abbreviatedOid": "f3fe680"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "A few comments but otherwise looks good.",
          "createdAt": "2023-10-17T23:23:10Z",
          "updatedAt": "2023-10-17T23:23:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5kWuZW",
          "commit": {
            "abbreviatedOid": "f2dfd9c"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T00:19:58Z",
          "updatedAt": "2023-10-18T00:19:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5kbLgP",
          "commit": {
            "abbreviatedOid": "5633e15"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T11:49:58Z",
          "updatedAt": "2023-10-18T11:49:58Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Do you want to call out that this may be a SPIFFE ID as example?",
              "createdAt": "2023-10-18T11:49:58Z",
              "updatedAt": "2023-10-18T11:49:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5kbMfp",
          "commit": {
            "abbreviatedOid": "5633e15"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Left a comment, but looks good to me.",
          "createdAt": "2023-10-18T11:52:26Z",
          "updatedAt": "2023-10-18T11:52:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOJt_WwM5dZq70",
      "title": "Added Arndt as contributor, updated draft number to submit to IETF",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/45",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-20T16:25:17Z",
      "updatedAt": "2023-10-20T17:31:24Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "4998e02a0803a65b08c065e86cfbcd00062a1f54",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "add-arndt",
      "headRefOid": "2be946c161308d976bbf830cc413391a3f64804e",
      "closedAt": "2023-10-20T17:31:23Z",
      "mergedAt": "2023-10-20T17:31:23Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d37ced510df12616ab6eeb29163ad5281c1ee440"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5kxHVk",
          "commit": {
            "abbreviatedOid": "2be946c"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2023-10-20T17:22:38Z",
          "updatedAt": "2023-10-20T17:22:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOJt_WwM5da7ZZ",
      "title": "Typo fix",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/46",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-20T21:05:37Z",
      "updatedAt": "2023-10-20T21:10:06Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d37ced510df12616ab6eeb29163ad5281c1ee440",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "typo-fix",
      "headRefOid": "d37a3d16d13cea0ca6a5c02b1e81089c867d8948",
      "closedAt": "2023-10-20T21:10:05Z",
      "mergedAt": "2023-10-20T21:10:05Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "a04c52de169e85df0693f5b39cf14f0552b778b3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 47,
      "id": "PR_kwDOJt_WwM5da-el",
      "title": "fixed IANA registry formatting",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/47",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-20T21:20:33Z",
      "updatedAt": "2023-10-20T21:22:25Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "a04c52de169e85df0693f5b39cf14f0552b778b3",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "iana-fix",
      "headRefOid": "66f089146cbc2493e7122aede219c28acdda951d",
      "closedAt": "2023-10-20T21:22:24Z",
      "mergedAt": "2023-10-20T21:22:24Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "6fa76c61aa15d93bade1c840ab6d0769ca617303"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 51,
      "id": "PR_kwDOJt_WwM5fM189",
      "title": "Update draft-tulshibagwale-oauth-transaction-tokens-05.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/51",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I moved the Security Considerations section before the IANA registry text and added a Privacy Considerations section as raised in the IETF 118 meeting.",
      "createdAt": "2023-11-11T04:49:23Z",
      "updatedAt": "2023-11-13T18:27:02Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "6fa76c61aa15d93bade1c840ab6d0769ca617303",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "main",
      "headRefOid": "f4fc5e8af64b1bf8d817255a3d55e7afec197259",
      "closedAt": "2023-11-13T18:27:01Z",
      "mergedAt": "2023-11-13T18:27:01Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "e5c685831cf7790379b8f4a6e01eec1ade09d220"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5m_oAm",
          "commit": {
            "abbreviatedOid": "f4fc5e8"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-13T18:26:51Z",
          "updatedAt": "2023-11-13T18:26:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 54,
      "id": "PR_kwDOJt_WwM5gnUzT",
      "title": "renamed for adopted draft submission",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/54",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-29T00:18:27Z",
      "updatedAt": "2023-11-29T18:14:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "e5c685831cf7790379b8f4a6e01eec1ade09d220",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "adopted-draft",
      "headRefOid": "390638b34338d70b6ec1c8beadd07091c886e75e",
      "closedAt": "2023-11-29T18:14:09Z",
      "mergedAt": "2023-11-29T18:14:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "84d9ab78d55c5a2fa49f94188803283510fc3d50"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5okIC2",
          "commit": {
            "abbreviatedOid": "2eb2536"
          },
          "author": "naveencm4u1",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T02:21:39Z",
          "updatedAt": "2023-11-29T02:21:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOJt_WwM5hhM0b",
      "title": "Migrate tooling",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/55",
      "state": "MERGED",
      "author": "arndt-s",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Uses https://github.com/martinthomson/i-d-template template to set up tooling",
      "createdAt": "2023-12-08T12:21:28Z",
      "updatedAt": "2023-12-08T14:24:47Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "84d9ab78d55c5a2fa49f94188803283510fc3d50",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "arndt-s/migrate_tooling",
      "headRefOid": "7100f28efbafe767cb6abc5e37bb75d1cf8b8ff1",
      "closedAt": "2023-12-08T14:24:46Z",
      "mergedAt": "2023-12-08T14:24:46Z",
      "mergedBy": "aaronpk",
      "mergeCommit": {
        "oid": "732521a26b4fc3256d2d53b1aef60688946c86f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5ppe9_",
          "commit": {
            "abbreviatedOid": "7100f28"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-08T14:24:15Z",
          "updatedAt": "2023-12-08T14:24:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOJt_WwM5h1it9",
      "title": "Token exchange profile update",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/57",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Updated the text to more clearly profile the token exchange specification for use with Transaction Tokens.",
      "createdAt": "2023-12-12T21:23:08Z",
      "updatedAt": "2024-01-29T19:44:50Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "732521a26b4fc3256d2d53b1aef60688946c86f8",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "token-exchange",
      "headRefOid": "5a8d9a3ec2d59c5ad95253f063179ebc262a953c",
      "closedAt": "2024-01-29T19:43:15Z",
      "mergedAt": "2024-01-29T19:43:14Z",
      "mergedBy": "gffletch",
      "mergeCommit": {
        "oid": "379227fd8af3a3cf17e7a5ae53073cc67a0331a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5qHDWD",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-13T18:17:49Z",
          "updatedAt": "2023-12-14T00:53:10Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "\"may be requested -> \"MAY be requested\"",
              "createdAt": "2023-12-13T18:17:49Z",
              "updatedAt": "2023-12-14T00:53:10Z"
            },
            {
              "originalPosition": 41,
              "body": "The new wording makes the use of Token Exchange look optional. Is that intended? If so, we should perhaps clarify that (I have no opinion on the optionality, but I would like this draft to describe the Token Exchange profile as it is doing now)",
              "createdAt": "2023-12-13T18:19:26Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            },
            {
              "originalPosition": 50,
              "body": "`scope` is optional in a token exchange request. I'm supportive of making it required, but I'm trying to remember whether we have discussed this.",
              "createdAt": "2023-12-14T00:45:38Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            },
            {
              "originalPosition": 63,
              "body": "I'm not sure about this. I feel that the `azd` claim in the TraT should be minted by the TraT server, so the requesting service should only provide the context based on which the TraT can be minted. I feel the requesting service should not be able to dictate what goes into the TraT as the azd.",
              "createdAt": "2023-12-14T00:48:30Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            },
            {
              "originalPosition": 88,
              "body": "Not sure what you mean by \"the specified Txn-Token\" here. Perhaps we can say \"...determine if that workload is authorized to request Txn-Tokens with the requested values\"?",
              "createdAt": "2023-12-14T00:51:21Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            },
            {
              "originalPosition": 100,
              "body": "I'd like to discuss this part. I feel the requesting service should not oblige the TraT service to have specific content in the TraT.",
              "createdAt": "2023-12-14T00:52:50Z",
              "updatedAt": "2023-12-14T00:53:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qZCoJ",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T21:24:28Z",
          "updatedAt": "2023-12-15T21:51:00Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "check the way `token_type` is defined, which is kinda awakrd in this context. See https://datatracker.ietf.org/doc/html/rfc8693#section-2.2.1-2.4 and https://www.rfc-editor.org/rfc/rfc6749#section-7.1 \r\n\r\njust using `N_A` here might be appropriate ",
              "createdAt": "2023-12-15T21:24:28Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 111,
              "body": "missing `issued_token_type` in this list ",
              "createdAt": "2023-12-15T21:24:57Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 110,
              "body": "I would not say \"in base64url encoded from\" here as might suggest the Txn-Token is supposed to be re-encoded or otherwise confuse folks. The Txn-Token is a JWT. Nothing more needs to be said here. ",
              "createdAt": "2023-12-15T21:35:01Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 108,
              "body": "also the example below is missing token_type ",
              "createdAt": "2023-12-15T21:35:42Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 52,
              "body": "GW probably needs to be spelled out ",
              "createdAt": "2023-12-15T21:41:10Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            },
            {
              "originalPosition": 66,
              "body": "\"OAuth 2.0 Bearer tokens using a client credentials token\" -> token exchange is defined at the token endpoint, which can directly accept oauth client authentication. Also \"client credentials token\" isn't a defined thing (I think I know what you mean but I'm guessing).  ",
              "createdAt": "2023-12-15T21:50:01Z",
              "updatedAt": "2023-12-15T21:51:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafRZ",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:20:47Z",
          "updatedAt": "2023-12-17T02:20:47Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I wasn't intending that MAY to normative. Does it make sense to be normative?",
              "createdAt": "2023-12-17T02:20:47Z",
              "updatedAt": "2023-12-18T15:34:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafTm",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:23:25Z",
          "updatedAt": "2023-12-17T02:23:26Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I wasn't intending the text to imply that token exchange is optional, but rather that the Transaction Token spec is profiling the token exchange spec and that profile MUST be followed for the purpose of requesting Txn-Tokens. For me a profile doesn't mean the initial spec is optional but rather that the use of the transaction token spec is modified in some way.",
              "createdAt": "2023-12-17T02:23:26Z",
              "updatedAt": "2023-12-17T02:23:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafU1",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:25:01Z",
          "updatedAt": "2023-12-17T02:25:01Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I added it as required, because we have the 'purpose' claim of the Txn-Token and the requesting workload needs to specify what that purpose is. I discussed with Brian via email and we thought using the existing 'scope' parameter was a better option than defining a new parameter. I'm open to other perspectives.",
              "createdAt": "2023-12-17T02:25:01Z",
              "updatedAt": "2023-12-17T02:25:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafWS",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:26:54Z",
          "updatedAt": "2023-12-17T02:26:54Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "So if all that `azd` data is in the access_token that's fine but what about the case where the requesting workload doesn't have an access token and is requesting a TraT to be minted. In that case, how does the workload ask for the additional transaction data to be added to the Trat in the `azd` claim?",
              "createdAt": "2023-12-17T02:26:54Z",
              "updatedAt": "2023-12-17T02:26:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafXq",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:28:21Z",
          "updatedAt": "2023-12-17T02:28:21Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "That's clearer. I'll update with that wording.",
              "createdAt": "2023-12-17T02:28:21Z",
              "updatedAt": "2023-12-17T02:28:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafZU",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:30:53Z",
          "updatedAt": "2023-12-17T02:30:53Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "I think I was wondering about that when I wrote it so happy to have a discussion about this. I'm thinking mostly about the case where an internal workload (e.g. like a scheduled job) needs a TraT and has additional details about the transaction that it wants to make immutable. We can say that it is up to the Transaction Token Service (TTS) to determine what data is included in the TraT. How the TTS makes that determination is out of scope for the specification.",
              "createdAt": "2023-12-17T02:30:53Z",
              "updatedAt": "2023-12-17T02:30:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafb1",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:33:59Z",
          "updatedAt": "2023-12-17T02:34:00Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "Yes, I agree that N_A is probably better. I'll update accordingly.",
              "createdAt": "2023-12-17T02:33:59Z",
              "updatedAt": "2023-12-17T02:34:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafca",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:34:36Z",
          "updatedAt": "2023-12-17T02:34:36Z",
          "comments": [
            {
              "originalPosition": 111,
              "body": "Thanks!",
              "createdAt": "2023-12-17T02:34:36Z",
              "updatedAt": "2023-12-17T02:34:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafdO",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:35:31Z",
          "updatedAt": "2023-12-17T02:35:31Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "Ok. I wasn't sure how JWT are specified as values of a JSON claim. If multiple encodings are supported that's fine.",
              "createdAt": "2023-12-17T02:35:31Z",
              "updatedAt": "2023-12-17T02:35:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qafep",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-17T02:37:19Z",
          "updatedAt": "2023-12-17T02:37:19Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Ok, let me re-work this paragraph and just point to the client authentication mechanisms supported by the /token endpoint as defined in existing RFCs.",
              "createdAt": "2023-12-17T02:37:19Z",
              "updatedAt": "2023-12-17T02:37:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qbx4X",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "naveencm4u1",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T02:00:28Z",
          "updatedAt": "2023-12-18T02:00:28Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Since the transaction token is passed to multiple workloads in a transaction, is it ok to expose `azd` to all the workloads? Is there any guidance on which type of data can be added to `azd`.\r\nWe are working on adding common fields to `azd` and also encrypt them. Access to the decryption secret is limited to specific workloads that need the data.\r\n\r\n",
              "createdAt": "2023-12-18T02:00:28Z",
              "updatedAt": "2023-12-18T02:00:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhDhi",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T14:48:10Z",
          "updatedAt": "2023-12-18T14:48:11Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "That is a really interesting question and I wonder if selective disclosure JWTs could be a way to address that. I suppose if different workloads need access to different aspects of the `azd` data that could be more complicated.\r\n\r\nOne question, we may want to consider for this specification is whether that level of detail should be left up the specific deployment and become out of scope for this specification. Regardless, it's an interesting question. Would you mind filing an issue on it? I think it needs it's own discussion.",
              "createdAt": "2023-12-18T14:48:11Z",
              "updatedAt": "2023-12-18T14:48:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhhiG",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T15:32:40Z",
          "updatedAt": "2023-12-18T15:32:41Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I updated the previous paragraph (#Txn-Token Service) to be much stronger. Do we feel we need both? I can update here as well.",
              "createdAt": "2023-12-18T15:32:41Z",
              "updatedAt": "2023-12-18T15:32:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhhua",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T15:33:04Z",
          "updatedAt": "2023-12-18T15:33:05Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "I filed an issue regarding this topic",
              "createdAt": "2023-12-18T15:33:05Z",
              "updatedAt": "2023-12-18T15:33:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhh7R",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T15:33:30Z",
          "updatedAt": "2023-12-18T15:33:30Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "I filed an issue on this topic",
              "createdAt": "2023-12-18T15:33:30Z",
              "updatedAt": "2023-12-18T15:33:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qhiXi",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T15:34:25Z",
          "updatedAt": "2023-12-18T15:34:25Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I filed an issue on this topic",
              "createdAt": "2023-12-18T15:34:25Z",
              "updatedAt": "2023-12-18T15:34:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qib6L",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T17:37:30Z",
          "updatedAt": "2023-12-18T17:37:31Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "not sure - it could make sense either way.",
              "createdAt": "2023-12-18T17:37:30Z",
              "updatedAt": "2023-12-18T17:37:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5qkeHY",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T01:20:55Z",
          "updatedAt": "2023-12-19T01:20:55Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "Wait, what? This isn't a claim and there's only one encoding of a JWT.  This confused me :/ But \"Txn-Token JWT\" is in the latest commit works for me. Maybe someday we can discuss and hash out some of the confusion here. But latest text is good. ",
              "createdAt": "2023-12-19T01:20:55Z",
              "updatedAt": "2023-12-19T01:20:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5q5_pH",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "CASABECI",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-21T20:01:39Z",
          "updatedAt": "2023-12-21T20:01:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5q6AbG",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "CASABECI",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Wkn",
          "createdAt": "2023-12-21T20:02:14Z",
          "updatedAt": "2023-12-21T20:02:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5rdUcw",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-03T18:10:02Z",
          "updatedAt": "2024-01-03T18:10:02Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Issue #58 ",
              "createdAt": "2024-01-03T18:10:02Z",
              "updatedAt": "2024-01-03T18:10:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5rdVEF",
          "commit": {
            "abbreviatedOid": "fa68598"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-03T18:12:05Z",
          "updatedAt": "2024-01-03T18:12:05Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Issue #61 ",
              "createdAt": "2024-01-03T18:12:05Z",
              "updatedAt": "2024-01-03T18:12:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5sjT2G",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-15T08:39:05Z",
          "updatedAt": "2024-01-15T08:39:05Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "\"For example, many deployments may chose ... those others formats are perfectly valid as well.\"\r\n\r\nI believe that should be two sentences or separated?",
              "createdAt": "2024-01-15T08:39:05Z",
              "updatedAt": "2024-01-15T08:39:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5sjUuR",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-15T08:41:24Z",
          "updatedAt": "2024-01-15T08:41:33Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "The PR  suggests that the scope is simply copied to the purp claim. Is this really the case? Shouldn't rather the scope of the presented Access Token be narrowed down to what is given in the scope request param?",
              "createdAt": "2024-01-15T08:41:24Z",
              "updatedAt": "2024-01-15T08:41:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5sjoqB",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-15T09:27:30Z",
          "updatedAt": "2024-01-15T09:27:30Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Considering a scenario where multiple trust domains are supported by the Txn-Service, I assume that the aud claim will be determined by the audience request parameter?",
              "createdAt": "2024-01-15T09:27:30Z",
              "updatedAt": "2024-01-15T09:27:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5twcm-",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-24T13:46:28Z",
          "updatedAt": "2024-01-24T13:46:28Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "After additional discussion, we've decided to move away from using the `sub_id` construct and just use `sub` and bind the uniqueness of the `sub` value to the trust domain as defined by the `aud` claim. An updated commit will make this change.",
              "createdAt": "2024-01-24T13:46:28Z",
              "updatedAt": "2024-01-24T13:46:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5twdiX",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-24T13:48:14Z",
          "updatedAt": "2024-01-24T13:48:14Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "Good catch. The transaction token service (TTS) is authoritative for setting the `purp` claim. The text will be updated to allow the TTS to use the `scope` value to make the determination. Note that not all transaction token requests will contain an access token.",
              "createdAt": "2024-01-24T13:48:14Z",
              "updatedAt": "2024-01-24T13:48:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5twgWO",
          "commit": {
            "abbreviatedOid": "e050c98"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-24T13:53:41Z",
          "updatedAt": "2024-01-24T13:53:41Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "That could be a possible deployment solution provided all transaction token requests have a way to define the trust domain to be used for that request. I've updated the text to allow for this case.",
              "createdAt": "2024-01-24T13:53:41Z",
              "updatedAt": "2024-01-24T13:53:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5ty8Fq",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "KramNosaj01",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-24T18:08:22Z",
          "updatedAt": "2024-01-24T18:08:22Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "where to put the tokens?im sorry im just beginner",
              "createdAt": "2024-01-24T18:08:22Z",
              "updatedAt": "2024-01-24T18:08:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t8uhQ",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T20:36:26Z",
          "updatedAt": "2024-01-25T20:51:03Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I would like to make this language a bit more normative. How about something like \"The iss claim ... is optional. In situations where there are multiple Txn-Token issuers for the same trust domain, the iss claim MUST be included and MUST describe the issuer of the Txn-Token.\"",
              "createdAt": "2024-01-25T20:36:26Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 67,
              "body": "For compactness, should we change this name to \"rctx\" (since we are not using that in the Txn-Token request anymore) or something shorter?",
              "createdAt": "2024-01-25T20:38:20Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 83,
              "body": "Figure needs to be updated.",
              "createdAt": "2024-01-25T20:39:10Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 101,
              "body": "Typo: it's -> its\r\nShould we say \"MUST provide the Txn-Token Service with proof\"? (capitalize MUST)\r\nAlso, should we break this sentence into two parts: the required things (client-auth and purpose) and optional things (request context)? We should also drop the \"also\" from the last sentence (This profile also defines a new token type). We could even make that separate sub-section to clarify that we are defining a new token type.",
              "createdAt": "2024-01-25T20:44:25Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 107,
              "body": "Is the \"/\" required in the \"/token\"?",
              "createdAt": "2024-01-25T20:48:22Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 122,
              "body": "it's -> its",
              "createdAt": "2024-01-25T20:48:52Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            },
            {
              "originalPosition": 146,
              "body": "use \"trust domain\" instead of \"trust boundary\"?",
              "createdAt": "2024-01-25T20:49:59Z",
              "updatedAt": "2024-01-25T20:51:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t9D9w",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T21:36:21Z",
          "updatedAt": "2024-01-25T21:36:21Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "I'm ok with that.",
              "createdAt": "2024-01-25T21:36:21Z",
              "updatedAt": "2024-01-25T21:36:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t9Eby",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T21:37:47Z",
          "updatedAt": "2024-01-25T21:37:47Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "No, it's just my notation for identifying the endpoint. We could use \"OAuth {{RFC6749}} token endpoint\" to unique identify the endpoint.",
              "createdAt": "2024-01-25T21:37:47Z",
              "updatedAt": "2024-01-25T21:37:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t9Vt2",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T22:36:00Z",
          "updatedAt": "2024-01-25T22:36:01Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "@tulshi are you ok if I just change the MAY to MUST?  It is still possible for multiple Txn-Token issues to use a predetermined signing key.\r\n\r\nI can add a sentence along the lines of \"The signing key MUST be discoverable via the `iss` claim\".\r\n\r\nIf we say that, do we need to define that discovery mechanism? or can we just refer to OAuth AS Metadata?",
              "createdAt": "2024-01-25T22:36:01Z",
              "updatedAt": "2024-01-25T22:36:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uMVtR",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-29T13:52:15Z",
          "updatedAt": "2024-01-29T13:52:15Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "I took out the `iss` claim, and replaced `sub_id` with `sub`",
              "createdAt": "2024-01-29T13:52:15Z",
              "updatedAt": "2024-01-29T13:52:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uMXT7",
          "commit": {
            "abbreviatedOid": "27c3d44"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-29T13:55:25Z",
          "updatedAt": "2024-01-29T13:55:26Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "I called out more clearly the optional parts from the required parts. Let me know what you think.",
              "createdAt": "2024-01-29T13:55:25Z",
              "updatedAt": "2024-01-29T13:55:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uPuGi",
          "commit": {
            "abbreviatedOid": "5a8d9a3"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-29T19:38:00Z",
          "updatedAt": "2024-01-29T19:38:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 64,
      "id": "PR_kwDOJt_WwM5kyLy6",
      "title": "Add header",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/64",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "gffletch",
        "bc-pi",
        "PieterKas"
      ],
      "labels": [],
      "body": "Addresses Issue #49 ",
      "createdAt": "2024-01-23T01:46:29Z",
      "updatedAt": "2024-01-29T19:00:18Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "732521a26b4fc3256d2d53b1aef60688946c86f8",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "add-header",
      "headRefOid": "73b34be8246cabe1d2dffd7dcc33ac9ece57e127",
      "closedAt": "2024-01-29T19:00:17Z",
      "mergedAt": "2024-01-29T19:00:17Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "96733800e3e40a781fdc40473af9faea91e34458"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5tq9e3",
          "commit": {
            "abbreviatedOid": "de88238"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-23T21:34:15Z",
          "updatedAt": "2024-01-23T21:34:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "We should probably capitalize `Http` like in the other text",
              "createdAt": "2024-01-23T21:34:15Z",
              "updatedAt": "2024-01-23T21:34:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5tq-Xc",
          "commit": {
            "abbreviatedOid": "61e0025"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-23T21:36:13Z",
          "updatedAt": "2024-01-23T21:36:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Do we need to (or should we) say anything about the encoding of the JWT?",
              "createdAt": "2024-01-23T21:36:13Z",
              "updatedAt": "2024-01-23T21:36:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5t1RV0",
          "commit": {
            "abbreviatedOid": "61e0025"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-25T01:21:57Z",
          "updatedAt": "2024-01-25T01:21:58Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I've updated the language to specify the encoding. However, I feel like this might be redundant.",
              "createdAt": "2024-01-25T01:21:57Z",
              "updatedAt": "2024-01-25T01:21:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uDVAO",
          "commit": {
            "abbreviatedOid": "61e0025"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-26T18:58:38Z",
          "updatedAt": "2024-01-26T18:58:38Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "See [notes](https://hackmd.io/@rpc-sec-wg/BJKeLDZcp) of call on 1/26. We have decided to drop the line about the format.",
              "createdAt": "2024-01-26T18:58:38Z",
              "updatedAt": "2024-01-26T18:58:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uMcPc",
          "commit": {
            "abbreviatedOid": "73b34be"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-29T14:04:48Z",
          "updatedAt": "2024-01-29T14:04:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOJt_WwM5lXcDe",
      "title": "updated HTTP reference",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/65",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-29T19:17:03Z",
      "updatedAt": "2024-01-29T21:56:00Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "379227fd8af3a3cf17e7a5ae53073cc67a0331a1",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "update-http-rfc-ref",
      "headRefOid": "d1c4ed26d6b913f5f163e362b83ccb273dfaf7be",
      "closedAt": "2024-01-29T21:55:59Z",
      "mergedAt": "2024-01-29T21:55:59Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d3110bceb6efcd50383b3528888cc362117fe44d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5uPu0m",
          "commit": {
            "abbreviatedOid": "2229c0e"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-29T19:39:46Z",
          "updatedAt": "2024-01-29T19:39:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5uP1Aa",
          "commit": {
            "abbreviatedOid": "2229c0e"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2024-01-29T19:55:43Z",
          "updatedAt": "2024-01-29T19:55:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5uQmHm",
          "commit": {
            "abbreviatedOid": "d1c4ed2"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-29T21:52:50Z",
          "updatedAt": "2024-01-29T21:52:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOJt_WwM5lbwpr",
      "title": "Clarify and align audience claim value format",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/67",
      "state": "CLOSED",
      "author": "obfuscoder",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolve #66",
      "createdAt": "2024-01-30T10:48:05Z",
      "updatedAt": "2024-02-22T13:10:38Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3110bceb6efcd50383b3528888cc362117fe44d",
      "headRepository": "obfuscoder/oauth-transaction-tokens",
      "headRefName": "audformat",
      "headRefOid": "1150bfd047e72e55a1be4b7c33e0a260d0685dfc",
      "closedAt": "2024-02-22T13:10:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "As this was addressed in another PR in parallel which was merged already, I am closing this PR.",
          "createdAt": "2024-02-22T13:10:37Z",
          "updatedAt": "2024-02-22T13:10:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5utgpr",
          "commit": {
            "abbreviatedOid": "1150bfd"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-01T19:31:33Z",
          "updatedAt": "2024-02-01T19:32:18Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "specify \"Section 2 of {{RFC7519}}\"",
              "createdAt": "2024-02-01T19:31:34Z",
              "updatedAt": "2024-02-01T19:32:18Z"
            },
            {
              "originalPosition": 27,
              "body": "Do we need to have \"https\" or any protocol in a StringOrUri? It should be OK to not have a protocol prefix.",
              "createdAt": "2024-02-01T19:32:06Z",
              "updatedAt": "2024-02-01T19:32:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5uxLDJ",
          "commit": {
            "abbreviatedOid": "1150bfd"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-02T06:02:16Z",
          "updatedAt": "2024-02-02T06:02:17Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "True, if StringOrUri type should be defined, then a leading https:// is not necessary. In this case I would align the other instances where this audience is used.\r\n\r\nAs you want to discuss it in the call today, I wait with the update of the PR until after the discussion.\r\n\r\n(P.S: As much as I would like to join the regular call, the time slot is quite difficult for me due to other conflicting obligations.)",
              "createdAt": "2024-02-02T06:02:16Z",
              "updatedAt": "2024-02-02T06:02:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5u1i3X",
          "commit": {
            "abbreviatedOid": "1150bfd"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-02T15:33:11Z",
          "updatedAt": "2024-02-02T15:33:12Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I'm not sure we want to require that \"Each Trust Domain has `exactly one` Txn-Service\". I'd prefer we remove this line entirely and be silent on the topic as there can be multiple deployment options.",
              "createdAt": "2024-02-02T15:33:11Z",
              "updatedAt": "2024-02-02T15:33:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOJt_WwM5lwziU",
      "title": "removed sender constrained text as discussed on 12/08",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/68",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See meeting notes here where we agreed to remove this: https://hackmd.io/v6Gx0rvsTp2VJwL_quWuGA",
      "createdAt": "2024-02-01T22:41:13Z",
      "updatedAt": "2024-02-02T16:49:42Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3110bceb6efcd50383b3528888cc362117fe44d",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "remove-sender-constraints",
      "headRefOid": "79ea8b2d4a526df17c7ed7c16647ae2258fdea84",
      "closedAt": "2024-02-02T16:49:41Z",
      "mergedAt": "2024-02-02T16:49:41Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "b47a5d626cd2ca5f63e7d3c24fa1215f9de5fb40"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5u1hy8",
          "commit": {
            "abbreviatedOid": "79ea8b2"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-02T15:30:56Z",
          "updatedAt": "2024-02-02T15:30:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 70,
      "id": "PR_kwDOJt_WwM5l3g4L",
      "title": "clarified that aud claim should have the same format as in the JWT spec",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/70",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-02T19:11:43Z",
      "updatedAt": "2024-02-02T19:19:09Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "b47a5d626cd2ca5f63e7d3c24fa1215f9de5fb40",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "aud-claim-format",
      "headRefOid": "d43d739055c1c7d580be8e3ac2dfd9b2a571be24",
      "closedAt": "2024-02-02T19:19:09Z",
      "mergedAt": "2024-02-02T19:19:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "15d18fbacd2682c53672ad487c4e0d4b497d6860"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5u323d",
          "commit": {
            "abbreviatedOid": "d43d739"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-02T19:15:33Z",
          "updatedAt": "2024-02-02T19:15:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOJt_WwM5mQ_Jm",
      "title": "Addressing issue #44 - updating rules for the `sub` claim when requesting replacement transaction tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/71",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I updated the text to require the `sub` claim remain unchanged when requesting a replacement transaction token. I also added a mechanism to allow for tracking the workloads that have requested replacement transaction tokens. This was necessary as the current text required the `rctx` to remain unchanged in the replacement transaction token and the `rctx` object contains the requesting workload identifier. I used a mechanisms similar to x-forwarded-for. This needs lots of review.",
      "createdAt": "2024-02-07T13:53:06Z",
      "updatedAt": "2024-02-24T21:20:57Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "15d18fbacd2682c53672ad487c4e0d4b497d6860",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "txn-token-issues",
      "headRefOid": "d07dde61e76e0380ff3d00b2d03ed0eb95559e86",
      "closedAt": "2024-02-24T21:20:57Z",
      "mergedAt": "2024-02-24T21:20:57Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "5f8197ca32747537775b0353b1aeb30f24aa68f7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5v15xE",
          "commit": {
            "abbreviatedOid": "b93798d"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T21:41:43Z",
          "updatedAt": "2024-02-12T21:49:31Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Do we need to provide a reference for \"StringOrUri\", or has it occurred earlier in the doc?",
              "createdAt": "2024-02-12T21:41:44Z",
              "updatedAt": "2024-02-12T21:49:31Z"
            },
            {
              "originalPosition": 26,
              "body": "\"Be default\" -> \"By default\"\r\n2nd sentence also should clarify that the value becomes an array if more than one workload needs to be included, and the successive elements are later services that obtained replacements Txn-tokens. (Your text implies both these things, but it might be good to clarify it.)",
              "createdAt": "2024-02-12T21:48:40Z",
              "updatedAt": "2024-02-12T21:49:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5wvcHo",
          "commit": {
            "abbreviatedOid": "b93798d"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T20:03:40Z",
          "updatedAt": "2024-02-20T20:03:40Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "When we approve PR #67 StringOrURI will be defined at the first use when describing the Trust Domain so I don't think we need to define it here.",
              "createdAt": "2024-02-20T20:03:40Z",
              "updatedAt": "2024-02-20T20:03:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5wv4t_",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-20T21:16:08Z",
          "updatedAt": "2024-02-20T21:16:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5w_usX",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-22T12:38:42Z",
          "updatedAt": "2024-02-22T13:08:47Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "the phrase \"as well as\" is now used twice in this sentence. Maybe you can reorder the sentence or make it two?",
              "createdAt": "2024-02-22T12:38:43Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 26,
              "body": "Typo in:  ... a \"pathing\" mechanisms ...\r\n\r\nShould be mechanism",
              "createdAt": "2024-02-22T12:41:55Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 22,
              "body": "This definition contradicts the definition in the added section below. You could also mention here that it can be an array if multiple computational entities where involved in requesting the Txn-Token.\r\n",
              "createdAt": "2024-02-22T12:45:52Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 33,
              "body": "Is it practical from an implementer's perspective to deal with multiple types in one attribute?\r\n\r\nPossible alternatives:\r\n\r\n1) Define req_wl always as an array of StringOrURIs, even if there is only one element.\r\n2) Have a separate attribute (maybe \"orig_wls\") which is an array with StringOrURIs of the workloads originally requesting the Txn-Token in order of replacement. This attribute can be omitted if there was no replacement Txn-Token issued.\r\n",
              "createdAt": "2024-02-22T12:51:04Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 45,
              "body": "I am assuming this change here addresses a discussion where there is no subject token available which the Txn-Token can extract the subject from and instead the subject identifier is being provided in plain? Should we maybe define a specific subject_token_type for this case? \"N_A\" might not fit here.\r\n\r\nAlso ... (I'm not a native speaker in English, but ...)\r\n\r\n\"or simple string value\" -> \"or a simple string value\"\r\n\r\nand shouldn't there be a comma before the \"or\"?",
              "createdAt": "2024-02-22T12:52:27Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            },
            {
              "originalPosition": 55,
              "body": "Maybe also update the part \"then it MUST be present unchanged in\"? Should be \"then it MUST be present and unchanged in\"",
              "createdAt": "2024-02-22T13:07:13Z",
              "updatedAt": "2024-02-22T13:08:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJfiU",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-23T14:58:29Z",
          "updatedAt": "2024-02-23T14:58:30Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "So, there are many claims in JWT that use this method of being a string if only one value and an array if more than one. I was just following that precedent. This is true of the `aud` claim among others. https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3",
              "createdAt": "2024-02-23T14:58:30Z",
              "updatedAt": "2024-02-23T14:58:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJhq0",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-23T15:02:10Z",
          "updatedAt": "2024-02-23T15:02:10Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Yes, this is addressing the case where a entity needs to obtain a transaction token and there is not \"inbound\" token. For example, a mail delivery service that receives a new email from the internet. That service could request a transaction token where the `subject_token` is the inbound email address. \r\n\r\nGiven that the `sub` claim of the Txn-Token is REQUIRED, I think we want `subject_token` to also be required.",
              "createdAt": "2024-02-23T15:02:10Z",
              "updatedAt": "2024-02-23T15:02:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJinQ",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-23T15:03:58Z",
          "updatedAt": "2024-02-23T15:03:58Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "As for the comma rule... my understanding of current rules is that it's optional before the last option :) ",
              "createdAt": "2024-02-23T15:03:58Z",
              "updatedAt": "2024-02-23T15:03:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJ5dF",
          "commit": {
            "abbreviatedOid": "ec697e9"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-23T15:48:24Z",
          "updatedAt": "2024-02-23T15:48:24Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "True, the aud claim can have multiple or single values. Although I still think that implementations around overloaded value types tend to be a bit more complex, those implementations can be reused when dealing with the req_wl overload as well. So I consider this as resolved as well.",
              "createdAt": "2024-02-23T15:48:24Z",
              "updatedAt": "2024-02-23T15:48:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5xJ6X4",
          "commit": {
            "abbreviatedOid": "d07dde6"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-23T15:50:19Z",
          "updatedAt": "2024-02-23T15:50:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOJt_WwM5qKgp7",
      "title": "add link to github and editor's draft",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/73",
      "state": "MERGED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "closes #72",
      "createdAt": "2024-03-20T00:44:05Z",
      "updatedAt": "2024-03-20T01:35:48Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "5f8197ca32747537775b0353b1aeb30f24aa68f7",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "aaronpk-patch-1",
      "headRefOid": "34f405e76c26bad0718dc6aaa468d1e4a8a83c44",
      "closedAt": "2024-03-20T01:35:47Z",
      "mergedAt": "2024-03-20T01:35:47Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "8c5fe0358d339a401bc3509392783ff1ec712545"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM50GW8l",
          "commit": {
            "abbreviatedOid": "34f405e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-20T01:35:41Z",
          "updatedAt": "2024-03-20T01:35:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOJt_WwM5qKkzO",
      "title": "Section 6 - Cardinality of txn-token services",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/75",
      "state": "MERGED",
      "author": "dhs-aws",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Changed MUST to MAY.  Cardinality of the txn-token service is 0..1, not exactly one.  \r\n\r\nMAY not be the appropriate framing, I'm open to alternative text here to describe this more correctly.",
      "createdAt": "2024-03-20T00:53:33Z",
      "updatedAt": "2024-03-26T22:54:54Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "5f8197ca32747537775b0353b1aeb30f24aa68f7",
      "headRepository": "dhs-aws/oauth-transaction-tokens",
      "headRefName": "patch-1",
      "headRefOid": "cd1a3a0aaa43b378780099330602615f18fdfd5a",
      "closedAt": "2024-03-26T22:54:54Z",
      "mergedAt": "2024-03-26T22:54:54Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "c3daba2b30dd97694e437d156a347ad28c628010"
      },
      "comments": [
        {
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've updated the PR with the language provided by @tulshi in two places where the previous language was found in the draft.",
          "createdAt": "2024-03-26T22:52:57Z",
          "updatedAt": "2024-03-26T22:52:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM50GWzW",
          "commit": {
            "abbreviatedOid": "b7e36a9"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-20T01:34:30Z",
          "updatedAt": "2024-03-20T01:34:30Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm not very familiar with the distinction here, but is there an optionality implied in the word \"MAY\"? I guess the intent is to say \"one and only one logical Txn-Token Service\"",
              "createdAt": "2024-03-20T01:34:30Z",
              "updatedAt": "2024-03-20T01:34:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM50G1Ki",
          "commit": {
            "abbreviatedOid": "b7e36a9"
          },
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-20T05:01:02Z",
          "updatedAt": "2024-03-20T05:01:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Perhaps the language should read, \"...MUST have at most one logical Txn-Token session\"",
              "createdAt": "2024-03-20T05:01:02Z",
              "updatedAt": "2024-03-20T05:01:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM50Q8-t",
          "commit": {
            "abbreviatedOid": "b7e36a9"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-21T01:51:06Z",
          "updatedAt": "2024-03-21T01:51:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Should we say \"Each Trust Domain that uses Txn-Tokens MUST have exactly one logical Txn-Token Service.\"?",
              "createdAt": "2024-03-21T01:51:06Z",
              "updatedAt": "2024-03-21T01:51:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM508B6w",
          "commit": {
            "abbreviatedOid": "b7e36a9"
          },
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-26T22:49:37Z",
          "updatedAt": "2024-03-26T22:49:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "That language works for me, @tulshi.  ",
              "createdAt": "2024-03-26T22:49:37Z",
              "updatedAt": "2024-03-26T22:49:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM508DBb",
          "commit": {
            "abbreviatedOid": "cd1a3a0"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T22:54:01Z",
          "updatedAt": "2024-03-26T22:54:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOJt_WwM5qugt-",
      "title": "editorial fixes identified by Yaron",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/85",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-26T01:19:17Z",
      "updatedAt": "2024-03-26T16:41:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8c5fe0358d339a401bc3509392783ff1ec712545",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "editorial-fixes",
      "headRefOid": "27087b77651cc7391416223c4ad32900381943d2",
      "closedAt": "2024-03-26T16:41:09Z",
      "mergedAt": "2024-03-26T16:41:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d133905578230d02810a8ed0c4864801bf42aa0e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM501Zcd",
          "commit": {
            "abbreviatedOid": "27087b7"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T12:02:42Z",
          "updatedAt": "2024-03-26T12:02:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM504_dt",
          "commit": {
            "abbreviatedOid": "27087b7"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T16:40:25Z",
          "updatedAt": "2024-03-26T16:40:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOJt_WwM5rKh5h",
      "title": "Addressed privacy changes identified by Yaron",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/86",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-29T13:03:55Z",
      "updatedAt": "2024-03-29T16:00:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "c3daba2b30dd97694e437d156a347ad28c628010",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "privacy-changes",
      "headRefOid": "3553120a152dd050cf12db65fa7b865d344128d5",
      "closedAt": "2024-03-29T16:00:10Z",
      "mergedAt": "2024-03-29T16:00:10Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "cb64104423637c8540f066c9b73532ce5f3492fb"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll create a new issue to track that logging concern ",
          "createdAt": "2024-03-29T16:00:03Z",
          "updatedAt": "2024-03-29T16:00:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM51Vu15",
          "commit": {
            "abbreviatedOid": "3553120"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm ok with these changes. I think we could give some more advise around logging that could be useful to the industry. ",
          "createdAt": "2024-03-29T14:15:36Z",
          "updatedAt": "2024-03-29T14:15:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 87,
      "id": "PR_kwDOJt_WwM5rKl-m",
      "title": "Clarified responsibilities of Txn-Token Service in",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/87",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "a replacement request. Removed vague language",
      "createdAt": "2024-03-29T13:13:08Z",
      "updatedAt": "2024-05-17T20:17:53Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "c3daba2b30dd97694e437d156a347ad28c628010",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "Issue-82-fixes",
      "headRefOid": "744e8d1bdd2e9e8731c1515a7f9e6d535edd59e9",
      "closedAt": "2024-05-17T20:17:52Z",
      "mergedAt": "2024-05-17T20:17:52Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "cc5bcd361519b59629a79f4e329599998ca4d64b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM51Vvd6",
          "commit": {
            "abbreviatedOid": "9048636"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-29T14:17:38Z",
          "updatedAt": "2024-03-29T14:17:39Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I think we need to add that the previously identified requesting workload MUST NOT be modified as well. Thoughts?",
              "createdAt": "2024-03-29T14:17:39Z",
              "updatedAt": "2024-03-29T14:17:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM51imto",
          "commit": {
            "abbreviatedOid": "9048636"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-01T19:47:45Z",
          "updatedAt": "2024-04-01T19:47:45Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Added a line to say that. PTAL",
              "createdAt": "2024-04-01T19:47:45Z",
              "updatedAt": "2024-04-01T19:47:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57CnqS",
          "commit": {
            "abbreviatedOid": "744e8d1"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-05-17T19:49:45Z",
          "updatedAt": "2024-05-17T19:49:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 89,
      "id": "PR_kwDOJt_WwM5rMo9Y",
      "title": "Update draft-ietf-oauth-transaction-tokens.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/89",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses text regarding the `aud` claim throughout the document. Issue #76",
      "createdAt": "2024-03-29T19:38:04Z",
      "updatedAt": "2024-05-17T21:04:05Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "cc5bcd361519b59629a79f4e329599998ca4d64b",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "aud-text-cleanup",
      "headRefOid": "c549135ec5fa6068757ccd017937b1df4efa5b03",
      "closedAt": "2024-05-17T21:04:05Z",
      "mergedAt": "2024-05-17T21:04:05Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "38acb3eca471dd87dcfff4c4ae0db5a5c4bc380d"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Although your changes sufficiently capture what is needed, what I liked about the previous draft is that it clearly identified that each Trust Domain MUST have a unique identifier, which is set as the `aud` value. I wonder if we can say that somewhere (outside of the Terminology section)",
          "createdAt": "2024-03-29T21:18:07Z",
          "updatedAt": "2024-03-29T21:18:07Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, let me see if there is a good place to add that. I wonder if it will be easier to merge PR #90 first and then let me fix this one as there may be conflicts?",
          "createdAt": "2024-04-26T22:10:52Z",
          "updatedAt": "2024-04-26T22:10:52Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Makes sense to work on this after we merge #90\r\n\r\nOn Fri, Apr 26, 2024 at 3:11\u202fPM George Fletcher ***@***.***>\r\nwrote:\r\n\r\n> Ok, let me see if there is a good place to add that. I wonder if it will\r\n> be easier to merge PR #90\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/90> first and\r\n> then let me fix this one as there may be conflicts?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/89#issuecomment-2080179762>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG77Y2GZKFE7FSVPC7LY7LGIFAVCNFSM6AAAAABFO22ZLKVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDAOBQGE3TSNZWGI>\r\n> .\r\n> You are receiving this because your review was requested.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-04-30T21:14:35Z",
          "updatedAt": "2024-04-30T21:14:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM57CyXx",
          "commit": {
            "abbreviatedOid": "767448e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T20:20:17Z",
          "updatedAt": "2024-05-17T20:20:27Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Did you intend for \"trust boundary\" to be something separaet from \"trust domain\"? I'd rather not invoke an additional concept if we can avoid it.",
              "createdAt": "2024-05-17T20:20:17Z",
              "updatedAt": "2024-05-17T20:20:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57C-1O",
          "commit": {
            "abbreviatedOid": "767448e"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T20:51:05Z",
          "updatedAt": "2024-05-17T20:51:05Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Yes, I agree. Let me fix that.",
              "createdAt": "2024-05-17T20:51:05Z",
              "updatedAt": "2024-05-17T20:51:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57DBdT",
          "commit": {
            "abbreviatedOid": "767448e"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-17T21:01:27Z",
          "updatedAt": "2024-05-17T21:01:27Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Updated",
              "createdAt": "2024-05-17T21:01:27Z",
              "updatedAt": "2024-05-17T21:01:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57DCxa",
          "commit": {
            "abbreviatedOid": "c549135"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-17T21:03:53Z",
          "updatedAt": "2024-05-17T21:03:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOJt_WwM5sgw-l",
      "title": "specified language for self-signed JWTs as subject_tokens",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/90",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-04-12T16:48:40Z",
      "updatedAt": "2024-05-04T01:20:32Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "9a4e2a10383b263f43ae2cc0f064824873481ca7",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "self-signed-tokens",
      "headRefOid": "575c9eae6609db7460f8be46eabb4b80692fa02f",
      "closedAt": "2024-05-04T01:20:31Z",
      "mergedAt": "2024-05-04T01:20:31Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "57c8e30da70c3a026c5b51f5407432cce75d4a9e"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yup. Thanks. I realized I forgot to add the IANA section after I sent out\r\nthe PR. I'll update it soon.\r\n\r\nOn Fri, Apr 19, 2024, 6:30\u202fAM Yaron Sheffer ***@***.***>\r\nwrote:\r\n\r\n> ***@***.**** commented on this pull request.\r\n> ------------------------------\r\n>\r\n> In draft-ietf-oauth-transaction-tokens.md\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/90#discussion_r1572377478>\r\n> :\r\n>\r\n> >\r\n> -rfc9068\r\n> -: The `subject_token` is a JWT format OAuth 2.0 Access Token as defined in {{RFC9068}}\r\n> +`urn:ietf:params:txn-token:token-type:self-signed`\r\n>\r\n> I'm pretty sure you need an IANA section to register\r\n> urn:ietf:params:txn-token.\r\n>\r\n> Hint: https://www.iana.org/assignments/params/params.xhtml\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/90#pullrequestreview-2011438609>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG5Q3BQQWGMFVDMGJUDY6EL6NAVCNFSM6AAAAABGEOTLE6VHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZDAMJRGQZTQNRQHE>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-04-19T15:06:34Z",
          "updatedAt": "2024-04-19T15:06:34Z"
        },
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "@yaronf Regarding your comment about wrong approach: I mentioned something along those lines as well. I personally don't think that a new token type is actually necessary. A JWT is a good fit as it can carry the necessary data, but whether it should be signed by the workload (or what additional claims and associated checks should be incorporated) could be a decision by the individual TTS/trust domain.",
          "createdAt": "2024-04-25T10:17:10Z",
          "updatedAt": "2024-04-25T10:17:10Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "> @yaronf Regarding your comment about wrong approach: I mentioned something along those lines as well. I personally don't think that a new token type is actually necessary. A JWT is a good fit as it can carry the necessary data, but whether it should be signed by the workload (or what additional claims and associated checks should be incorporated) could be a decision by the individual TTS/trust domain.\r\n\r\n@obfuscoder My point is that even the JWT structure/encoding is not needed. No need to sign anything, no need to encode stuff in base64 (and either of them adds potential security issues). All the semantics we need can be carried in a simple JSON object.",
          "createdAt": "2024-04-25T13:55:03Z",
          "updatedAt": "2024-04-25T13:55:03Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I tend to agree with Yaron, that perhaps self-signed JWTs aren't the best\r\nway to express this. We can discuss this on the call tomorrow.\r\n\r\nOn Thu, Apr 25, 2024 at 6:55\u202fAM Yaron Sheffer ***@***.***>\r\nwrote:\r\n\r\n> @yaronf <https://github.com/yaronf> Regarding your comment about wrong\r\n> approach: I mentioned something along those lines as well. I personally\r\n> don't think that a new token type is actually necessary. A JWT is a good\r\n> fit as it can carry the necessary data, but whether it should be signed by\r\n> the workload (or what additional claims and associated checks should be\r\n> incorporated) could be a decision by the individual TTS/trust domain.\r\n>\r\n> @obfuscoder <https://github.com/obfuscoder> My point is that even the JWT\r\n> structure/encoding is not needed. No need to sign anything, no need to\r\n> encode stuff in base64 (and either of them adds potential security issues).\r\n> All the semantics we need can be carried in a simple JSON object.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/90#issuecomment-2077255417>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG3R5BUBBQW55C32VOLY7EDM3AVCNFSM6AAAAABGEOTLE6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDANZXGI2TKNBRG4>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-04-25T23:31:32Z",
          "updatedAt": "2024-04-25T23:31:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Given the requirement that the TTS/AS always has to authenticate the identity of the requesting workload, conveying this info in an unsigned thing (the subject token could even contain just plain JSON) would probably be okay. Though it seems like the kind of thing that might lead to mistakes in deployment and resultant security issues. ",
          "createdAt": "2024-04-26T12:45:29Z",
          "updatedAt": "2024-04-26T12:45:29Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Letting the input be any kind of JSON structure feels problematic - not least because of interop. Using a JWT as the container and then putting constraints on it (i.e. a minimal set of supported claims) will help transaction token services in parsing and making some basic determinations about security. \r\n\r\nSelf-signing has pros and cons - we can make it optional for those deployments that have a risk profile that would get additional assurances from it, but as Brian notes, signing is easy to get wrong.",
          "createdAt": "2024-04-26T13:09:33Z",
          "updatedAt": "2024-04-26T13:09:33Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, you'd put some constraints on the JSON content too. I don't see how that'd be any more problematic from an interop perspective. \r\n",
          "createdAt": "2024-04-26T13:30:44Z",
          "updatedAt": "2024-04-26T14:31:01Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "As long as there are some constraints on the format and contents that everyone would expect. Why not just use a JWT at that point though (there are libraries that support it etc)?",
          "createdAt": "2024-04-26T14:17:11Z",
          "updatedAt": "2024-04-26T14:17:11Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "> TBH I think we took the wrong approach here. Instead of defining a new token type and having to ensure it cannot be abused for anything else, we could have had a simple JSON object containing the relevant claims. The object would be carried as a separate, optional parameter. This would be so much simpler for developers and would reduce the attack surface by a ton.\r\n> \r\n> With that said, I can live with the current solution.\r\n\r\n@yaronf On [today's call](https://hackmd.io/@rpc-sec-wg/BJqJZLYW0) we discussed this topic, and while there are valid opinions on both approaches, for now I am keeping the request as a self-signed JWT unless we think this approach is problematic.",
          "createdAt": "2024-04-26T18:51:05Z",
          "updatedAt": "2024-04-26T18:51:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM53GJMh",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:35:51Z",
          "updatedAt": "2024-04-12T17:35:51Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "You might want to reconcile these with how Token Exchange (not particularity well) defines subject_token_type   https://datatracker.ietf.org/doc/html/rfc8693#section-2.1-4.14 and points to https://datatracker.ietf.org/doc/html/rfc8693#TokenTypeIdentifiers about identifiers that sort of implies it has to be a URI and mentions or defines some that can be used \r\n\r\n",
              "createdAt": "2024-04-12T17:35:51Z",
              "updatedAt": "2024-04-12T17:37:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GMmT",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:44:40Z",
          "updatedAt": "2024-04-12T17:44:40Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Oh and note Aaron's draft use of the `urn:ietf:params:oauth:token-type:id_token` URI for id tokens https://www.ietf.org/archive/id/draft-parecki-oauth-identity-assertion-authz-grant-00.html#section-5 ",
              "createdAt": "2024-04-12T17:44:40Z",
              "updatedAt": "2024-04-12T17:44:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GNT6",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:46:26Z",
          "updatedAt": "2024-04-12T17:46:26Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I agree with Brian. I think we need to make these URIs. If we want to explicitly support an rfc9068 token then we should define a URI for it. However, if the intent of the `rfc9068` value is to represent an access_token then we should use the value defined within RFC 8693.",
              "createdAt": "2024-04-12T17:46:26Z",
              "updatedAt": "2024-04-12T17:46:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GNU0",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:46:28Z",
          "updatedAt": "2024-04-12T17:46:29Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "RFC 8693 already defines a `subject_token_type` value for this which we should use. That said, `id_tokens` aren't usually authorization tokens and so I worry about explicitly calling it out here. The `id_token` can most definitely define the subject but then there is likely a need to pass in a different token containing the external authorization state. I'd rather we focus on AS generated access tokens and self-signed access tokens (recommended as RFC 9068).",
              "createdAt": "2024-04-12T17:46:28Z",
              "updatedAt": "2024-04-12T17:46:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GNxX",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-12T17:47:42Z",
          "updatedAt": "2024-04-12T17:47:42Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Maybe add: \"Note, as defined in RFC8693, the `subject_token_type` must be a URI.",
              "createdAt": "2024-04-12T17:47:42Z",
              "updatedAt": "2024-04-12T17:47:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53GN4v",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "See inline comments.",
          "createdAt": "2024-04-12T17:47:58Z",
          "updatedAt": "2024-04-12T17:47:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM53Liax",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-04-14T08:33:47Z",
          "updatedAt": "2024-04-14T08:38:43Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "True, and it means the current document should have an IANA subsection to define it.",
              "createdAt": "2024-04-14T08:33:48Z",
              "updatedAt": "2024-04-14T08:38:43Z"
            },
            {
              "originalPosition": 48,
              "body": "Other subject token types define the semantics of the token, and I think we should do that too. Maybe say (if this is true): \r\n\r\n> The `subject_token` is a self-signed OAuth access token issued by the requesting workload",
              "createdAt": "2024-04-14T08:38:25Z",
              "updatedAt": "2024-04-14T08:38:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53VBQa",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-15T19:32:48Z",
          "updatedAt": "2024-04-15T19:32:48Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "It's really not an OAuth access token though (acknowledging that what actually constitutes an OAuth access token isn't totally clear but calling this an access token would be a stretch and unnecessarily confusing). ",
              "createdAt": "2024-04-15T19:32:48Z",
              "updatedAt": "2024-04-15T19:32:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53V8r8",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-15T21:50:57Z",
          "updatedAt": "2024-04-15T21:50:57Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "@bc-pi OK, but I guess we should qualify this JWT to get interoperability. Should we say what claims are REQUIRED?",
              "createdAt": "2024-04-15T21:50:57Z",
              "updatedAt": "2024-04-15T21:50:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53ctrs",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-16T15:41:15Z",
          "updatedAt": "2024-04-16T15:41:15Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I don't know... I was only trying to politely point out that this thing is not an OAuth access token. ",
              "createdAt": "2024-04-16T15:41:15Z",
              "updatedAt": "2024-04-16T15:41:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53ziFS",
          "commit": {
            "abbreviatedOid": "c7918a9"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-18T22:05:26Z",
          "updatedAt": "2024-04-18T22:05:26Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Thanks @bc-pi , @gffletch and @yaronf for your feedback here. I've updated the PR. Please take a look. thanks",
              "createdAt": "2024-04-18T22:05:26Z",
              "updatedAt": "2024-04-18T22:05:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM535B4R",
          "commit": {
            "abbreviatedOid": "6a49362"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-19T13:29:52Z",
          "updatedAt": "2024-04-19T13:29:53Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I'm pretty sure you need an IANA section to register `urn:ietf:params:txn-token`.\r\n\r\nHint: https://www.iana.org/assignments/params/params.xhtml",
              "createdAt": "2024-04-19T13:29:53Z",
              "updatedAt": "2024-04-19T13:29:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM539e3D",
          "commit": {
            "abbreviatedOid": "6a49362"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-19T22:09:43Z",
          "updatedAt": "2024-04-19T22:09:43Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I have fixed this (changed to the OAuth namespace and added an IANA registry section.",
              "createdAt": "2024-04-19T22:09:43Z",
              "updatedAt": "2024-04-19T22:09:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM53_PQK",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-20T10:18:58Z",
          "updatedAt": "2024-04-20T10:18:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM54ITg6",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-22T17:42:38Z",
          "updatedAt": "2024-04-22T17:42:38Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Are there any RFCs that gives guidance on how to generate a self-signed JWT that we can reference? For example, can we reference RFC 7523?",
              "createdAt": "2024-04-22T17:42:38Z",
              "updatedAt": "2024-04-22T17:42:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54IWHy",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-22T17:48:41Z",
          "updatedAt": "2024-04-22T17:48:41Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Perhaps add:\r\n\r\n\"The subject of this token will be the subject of the security token issued in response to the request.\" (RFC 8693 has similar terminology)",
              "createdAt": "2024-04-22T17:48:41Z",
              "updatedAt": "2024-04-22T17:48:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54IW8K",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-22T17:50:40Z",
          "updatedAt": "2024-04-22T17:50:40Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "It MAY be any of the subject token types described in Section 3 of OAuth 2.0 Token Exchange {{RFC8693}} except for the Refresh Token type (i.e., `urn:ietf:params:oauth:token-type:refresh_token`), or it MAY be set to the value:",
              "createdAt": "2024-04-22T17:50:40Z",
              "updatedAt": "2024-04-22T17:50:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54Jw3A",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-22T21:21:13Z",
          "updatedAt": "2024-04-22T21:21:15Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I didn't see any RFCs specific to self-signed JWTs. Referring to RFC7523 is probably not appropriate because of the additional constraints that RFC puts on the content of the JWT, which may not be what we intend here.",
              "createdAt": "2024-04-22T21:21:14Z",
              "updatedAt": "2024-04-22T21:21:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54NUV3",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T09:40:54Z",
          "updatedAt": "2024-04-23T09:40:54Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "@tulshi I think there are already implied constraints on what should be in the token *e.g. a \"sub\" claim, and \"iss\" claim that is the same as the \"sub\", \"exp\", \"nbf\", etc. Making it explicit makes implementors lives easier, and improves interop. Looking at RFC 7523 Section 3 defines a set of claims https://www.rfc-editor.org/rfc/rfc7523.html#section-3 that feels highly relevant. Leaving it undefined creates an interop problem.\r\n\r\n@bc-pi and @gffletch what are your thoughts on being more prescriptive on the format of the self-signed token? Can we leverage Section 3 of RFC 7523, or should we define our own?",
              "createdAt": "2024-04-23T09:40:54Z",
              "updatedAt": "2024-04-23T09:40:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54QRgG",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T15:00:59Z",
          "updatedAt": "2024-04-23T15:27:51Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Instead of \"in lieu\" could you please use a more well-known English phrase?",
              "createdAt": "2024-04-23T15:00:59Z",
              "updatedAt": "2024-04-23T15:27:51Z"
            },
            {
              "originalPosition": 28,
              "body": "The self-signed JWT should be short-living as well. So \"iat\" and \"exp\" should be included. there should probably some guidance on how short those self-sign JWTs should be valid. Could be same as for Txn-Tokens itself or even shorter as the self-signed JWTs here are meant to be used just once. \"aud\" and \"sub\" should be essential with \"aud\" either defining the trust domain (as described elsewhere in the spec) or narrowing down the audience even further to just the TTS by using the StringorURI of the TTS. Providing the \"iss\" claim could help the TTS to look up the necessary JWKS of the signing party.",
              "createdAt": "2024-04-23T15:12:37Z",
              "updatedAt": "2024-04-23T15:27:51Z"
            },
            {
              "originalPosition": 56,
              "body": "Is defining and registering a new token type actually necessary? There is urn:ietf:params:oauth:token-type:jwt",
              "createdAt": "2024-04-23T15:27:06Z",
              "updatedAt": "2024-04-23T15:27:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54Tleb",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T21:56:39Z",
          "updatedAt": "2024-04-23T21:56:39Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "```suggestion\r\n* `iss`: The unique identifier of the requesting workload. The Txn-Token Service SHALL use this value in determining the `req_wl` value in the Txn-Token issued in response to this request.\r\n```",
              "createdAt": "2024-04-23T21:56:39Z",
              "updatedAt": "2024-04-23T21:56:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54TmQg",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T21:57:55Z",
          "updatedAt": "2024-04-23T21:57:56Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "If we revert to `sub_id` for the main Txn Token, this one would also have to change.",
              "createdAt": "2024-04-23T21:57:55Z",
              "updatedAt": "2024-04-23T21:57:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54TmWv",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-23T21:58:12Z",
          "updatedAt": "2024-04-23T21:58:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM54Tt55",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T22:28:10Z",
          "updatedAt": "2024-04-23T22:28:11Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "> @bc-pi and @gffletch what are your thoughts on being more prescriptive on the format of the self-signed token? Can we leverage Section 3 of RFC 7523, or should we define our own? \r\n\r\nI wouldn't try to reference 7523 directly but maybe consider it (really just the client auth context) as partial inspiration for the claims that would make sense in this context of a self-signed JWT. Looks like @tulshi already started on a definition down in #self-signed-subject-token-type though and notably absent are `aud` and `exp`, which one would expect to see short of some compelling reason (that I'm not seeing). ",
              "createdAt": "2024-04-23T22:28:10Z",
              "updatedAt": "2024-04-23T22:28:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54T6m7",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T23:19:27Z",
          "updatedAt": "2024-04-23T23:19:27Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "@bc-pi,  I considered adding `aud` and `exp` in the self-signed JWT, but here are the reasons why I decided not to:\r\n\r\n- At a high-level, I'm thinking of the self-signed JWT in the request as a convenience rather than something that will have a lot of applicability outside of the communication between the requesting service and the TTS.\r\n- We could set the `aud` value to be the TTS, but that is redundant. If we were to somehow hint about the `aud` value in the resulting TraT, that is determined by the TTS, so providing that in the request is inconsequential (and the requester has no control over it). It's possible that the same TTS has multiple trust domains, but there could be other ways for it to distinguish which trust domain it is acting on behalf of, such as a different token exchange endpoint URL.\r\n- Similarly, the `exp` value could be used to indicate the expiration of the request itself, or it could be used as a hint to indicate the lifetime of the resulting TraT. Since we have already noted that a TTS may reject JWTs with an unreasonably old `iat` value, we do not need to specify an `exp` value. If we were to hint about the lifetime of the resulting TraT, I feel the requester would need to know a lot more about the transaction than a typical requester such as a general-purpose API gateway would know. I'd rather that the TTS determine the TraT's `exp` based on its policy and understanding of the actual transaction that is being requested. ",
              "createdAt": "2024-04-23T23:19:27Z",
              "updatedAt": "2024-04-23T23:19:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54Zvjj",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T14:16:38Z",
          "updatedAt": "2024-04-24T14:16:39Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "@tulshi I am not so sure about not defining the aud value. Given everything that goes on in he world of token theft, having this extra constraint can help minimise the impact of token replay (stealing a token from one workload and replaying against another transaction token endpoint and so forth). Are there scenarios where we think the workload would not know which transaction token service it will be presenting its self-signed credential to?\r\n\r\nI also recall that we had some constraint that a transaction token cannot be valid for longer than the original token. This raises the question on what the guidance is for expiry if the exp claim is not present as in this case. Section 2.3 is somewhat silent on this, but I think this is a decision for the Authorization service (perhaps something to be made clearer in section 2.3). ",
              "createdAt": "2024-04-24T14:16:38Z",
              "updatedAt": "2024-04-24T14:16:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54WAML",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T07:04:21Z",
          "updatedAt": "2024-04-24T14:28:34Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "If the JWT is considered a convenience to pass the necessary parameters (e.g. subject) to the TTS, why does it have to be a new self-signed type? Wouldn't a JWT be enough then? TTS Implementers could decide if they require signed JWTs or accept plain JWTs.\r\n\r\nIf, on the other hand, there are security considerations, having at least \"exp\" helps in mitigating possible abuse of such a JWT (replay attacks).",
              "createdAt": "2024-04-24T07:04:21Z",
              "updatedAt": "2024-04-24T14:28:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54b4Qz",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T17:56:15Z",
          "updatedAt": "2024-04-24T17:56:15Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Claims like `exp`, `nbf`, `aud`, etc (also constructs like [explicit typing](https://www.rfc-editor.org/rfc/rfc8725.html#name-use-explicit-typing) fwiw) are about out the validity/security of the JWT in the intended context and also preventing misuse in unintended context. They have no bearing on whatever the output of the processes is. Any such bearing would need to be profiled and likely isn't what you'd want anyway. \r\n\r\nNote also that there are no normative processing requirements on `iat`.",
              "createdAt": "2024-04-24T17:56:15Z",
              "updatedAt": "2024-04-24T17:56:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54b433",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T17:57:42Z",
          "updatedAt": "2024-04-24T17:57:42Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "most of these things are not claims ",
              "createdAt": "2024-04-24T17:57:42Z",
              "updatedAt": "2024-04-24T17:57:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54cKSG",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T18:35:29Z",
          "updatedAt": "2024-04-24T18:35:29Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Thanks all, I've added the \"aud\" and \"exp\". Good points all (what was I thinking?). In order to minimize abuse of the self-signed JWT, I've specified that its lifetime should be just a few seconds. Since the Txn-token lifetime will exceed this, I've carved out that exception in \"Txn-Token Lifetime\" section (line 160)",
              "createdAt": "2024-04-24T18:35:29Z",
              "updatedAt": "2024-04-24T18:35:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54dYm4",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T21:25:12Z",
          "updatedAt": "2024-04-24T21:25:12Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "I realize much of this text is preexisting but it'd be good if the PR didn't introduce more misstatements ",
              "createdAt": "2024-04-24T21:25:12Z",
              "updatedAt": "2024-04-24T21:25:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54dttH",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T22:28:12Z",
          "updatedAt": "2024-04-24T22:28:12Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "Created separate PR for tracking this: https://github.com/oauth-wg/oauth-transaction-tokens/pull/92",
              "createdAt": "2024-04-24T22:28:12Z",
              "updatedAt": "2024-04-24T22:28:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54d7Co",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T23:19:56Z",
          "updatedAt": "2024-04-24T23:19:57Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "#92 kinda misses the mark https://github.com/oauth-wg/oauth-transaction-tokens/pull/92#discussion_r1578619029 and the new text here is still problematic ",
              "createdAt": "2024-04-24T23:19:57Z",
              "updatedAt": "2024-04-24T23:19:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54gzxQ",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "TBH I think we took the wrong approach here. Instead of defining a new token type and having to ensure it cannot be abused for anything else, we could have had a simple JSON object containing the relevant claims. The object would be carried as a separate, optional parameter. This would be so much simpler for developers and would reduce the attack surface by a ton.\r\n\r\nWith that said, I can live with the current solution.",
          "createdAt": "2024-04-25T08:26:50Z",
          "updatedAt": "2024-04-25T08:26:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM54hyLn",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-25T10:25:19Z",
          "updatedAt": "2024-04-25T10:30:50Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "or future?",
              "createdAt": "2024-04-25T10:25:19Z",
              "updatedAt": "2024-04-25T10:30:50Z"
            },
            {
              "originalPosition": 82,
              "body": "\"Expiration time for the request\". It should be expiration time for the JWT. There is nothing said about checking this value by the TTS. I think we should be explicit here that TTS MUST validate this, but also clock skew needs to be addressed. We could also just refer the definition of the already registered claim name by RFC 7519",
              "createdAt": "2024-04-25T10:28:39Z",
              "updatedAt": "2024-04-25T10:30:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54i7vg",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-25T12:57:56Z",
          "updatedAt": "2024-04-25T12:57:56Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "Kai is, of course, correct here that it's the expiration time of the JWT not of the request itself. And referring to existing definition of claims (not just exp) where possible and appropriate is likely preferable to (possibly erroneously)  restating/redefining them.",
              "createdAt": "2024-04-25T12:57:56Z",
              "updatedAt": "2024-04-25T12:57:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vOtY",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T18:34:13Z",
          "updatedAt": "2024-04-26T18:34:13Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "This will certainly simplify the current PR, but would it prevent us in future from using the `urn:ietf:params:oauth:token-type:jwt` subject token type for other unanticipated purposes in the request?",
              "createdAt": "2024-04-26T18:34:13Z",
              "updatedAt": "2024-04-26T18:34:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vQiS",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T18:39:12Z",
          "updatedAt": "2024-04-26T18:39:12Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "fixed.",
              "createdAt": "2024-04-26T18:39:12Z",
              "updatedAt": "2024-04-26T18:39:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vRpG",
          "commit": {
            "abbreviatedOid": "e03653e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T18:40:52Z",
          "updatedAt": "2024-04-26T18:40:52Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "fixed.",
              "createdAt": "2024-04-26T18:40:52Z",
              "updatedAt": "2024-04-26T18:40:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vUb6",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T18:48:48Z",
          "updatedAt": "2024-04-26T18:48:48Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "I will address the broader issues with the nomenclature (header, media-type, etc.) in a separate PR (#92). For this PR, I have addressed the language regarding the token type identifier. @bc-pi  Please review if that part is OK.",
              "createdAt": "2024-04-26T18:48:48Z",
              "updatedAt": "2024-04-26T18:48:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vyQC",
          "commit": {
            "abbreviatedOid": "eae1750"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T20:09:26Z",
          "updatedAt": "2024-04-26T20:09:26Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "looks OK, thx ",
              "createdAt": "2024-04-26T20:09:26Z",
              "updatedAt": "2024-04-26T20:09:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54vyTC",
          "commit": {
            "abbreviatedOid": "52b3fca"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-26T20:09:36Z",
          "updatedAt": "2024-04-26T20:09:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM54wTmP",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T22:01:25Z",
          "updatedAt": "2024-04-26T22:01:25Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "Good point. I also learned that token-type:jwt more or less defines the format of the token and not the purpose. Than again the name \"token-type:self_signed\" also seems to describe format rather than purpose.\r\n\r\nHow about registering a token type name based on the purpose and maybe avoid having \"signed\" in the type name while still defining the format as JWT with the needed attributes for interop and allow implementers to choose whether they want to require a signed JWT or allow a plain one. If implementers require a signed one, the additional attributes like \"exp\" could make sense to help prevent misuse/abuse. We could make those additional attributes OPTIONAL in the plain version and REQUIRED in the signed one.",
              "createdAt": "2024-04-26T22:01:25Z",
              "updatedAt": "2024-04-26T22:01:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM55JTR_",
          "commit": {
            "abbreviatedOid": "52b3fca"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T20:39:54Z",
          "updatedAt": "2024-04-30T20:39:55Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Line 465 states that the `subject_token` is used to determine the `sub` of the Txn-Token. Is that good enough?",
              "createdAt": "2024-04-30T20:39:54Z",
              "updatedAt": "2024-04-30T20:39:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM55JUFA",
          "commit": {
            "abbreviatedOid": "d7edbcf"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T20:42:03Z",
          "updatedAt": "2024-04-30T20:42:03Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Wrote it as \"MAY be any one of...\"",
              "createdAt": "2024-04-30T20:42:03Z",
              "updatedAt": "2024-04-30T20:42:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM55JUf_",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T20:43:15Z",
          "updatedAt": "2024-04-30T20:43:15Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Removed the additional phrase. The sentence makes sense without it.",
              "createdAt": "2024-04-30T20:43:15Z",
              "updatedAt": "2024-04-30T20:43:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM54Kd_E",
          "commit": {
            "abbreviatedOid": "406b143"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Let's go ahead and merge and then file issues if there is stuff we want to change.",
          "createdAt": "2024-04-23T00:28:11Z",
          "updatedAt": "2024-05-01T19:52:10Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Wondering if we should be clearer about non-normative text. Maybe add \"For example, this could ...\"",
              "createdAt": "2024-04-23T00:28:12Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            },
            {
              "originalPosition": 54,
              "body": "Maybe add \"For example, it MAY be any ...\"",
              "createdAt": "2024-04-23T00:32:07Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            },
            {
              "originalPosition": 28,
              "body": "Should we add \"use as a `subject_token` value in its request...\" to make it explicit that the token being referenced is the one that is going to be passed as the subject_token?",
              "createdAt": "2024-04-26T21:59:57Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            },
            {
              "originalPosition": 36,
              "body": "Is the call out for self-signed tokens trying to change the life-time of the transaction token? I don't think that should be the case. The life-time of the transaction-token should be bound to the transaction and its needs and NOT to the time-frame of the token passed as the subject_token. In many ways, I'd want the self-signed subject_token to be extremely short-lived (e.g. 5 seconds) and the resulting transaction-token to have a life-time of say 120 seconds.",
              "createdAt": "2024-04-26T22:04:24Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            },
            {
              "originalPosition": 78,
              "body": "We may want to add somewhere that the TTS should verify that the iss in this subject_token is the same workload identified via the required client authentication. If not the same some additional authorization policy should apply. Generally we don't want the self-signed subject_tokens to be replayable.",
              "createdAt": "2024-04-26T22:07:53Z",
              "updatedAt": "2024-05-01T19:52:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM55i4PB",
          "commit": {
            "abbreviatedOid": "52b3fca"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-04T01:19:06Z",
          "updatedAt": "2024-05-04T01:19:06Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Before we introduced self-signed JWTs in the request, the inbound tokens were expected to be longer lived. So this sentence said the Txn-Token MUST NOT exceed the lifetime of the inbound token. However, since self-signed JWTs are expected to be much more short-lived (as you mention), we want to carve out an exception for that. That is why I've made this change.",
              "createdAt": "2024-05-04T01:19:06Z",
              "updatedAt": "2024-05-04T01:19:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOJt_WwM5tp-91",
      "title": "clarified fields versus claims and IANA registry name",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/92",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-04-24T22:27:13Z",
      "updatedAt": "2024-06-06T23:55:55Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "38acb3eca471dd87dcfff4c4ae0db5a5c4bc380d",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "fix-iana-language",
      "headRefOid": "172971b810053d26a66cd09d880cfd348b78607f",
      "closedAt": "2024-06-06T23:55:55Z",
      "mergedAt": "2024-06-06T23:55:55Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d4ec023a99e54163f875695bbd63e4d4c81fd283"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM54d50U",
          "commit": {
            "abbreviatedOid": "f7ddfab"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-24T23:13:47Z",
          "updatedAt": "2024-04-24T23:13:47Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Lots to unpack here that goes beyond changing one word...\r\n\r\nThe referenced section `{{txn-token-header}}` is [JWT Header](https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-01.html#name-jwt-header) which calls headers claims. Headers are not claims. Also the value of the `typ` header is supposed to be a media type so the `txn_token` value probably isn't quite right and the registration for it below certainly isn't right. Also the `urn:ieft:params:oauth:token-type:txn-token` URI is missing a registration and the [Txn-Token Request](https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-01.html#name-txn-token-request) section that defines it has some major formatting issues. \r\n\r\nSome related reading, issues, and examples of these things being done in other specs follows: \r\n\r\nhttps://github.com/oauth-wg/oauth-transaction-tokens/issues/84\r\nhttps://www.rfc-editor.org/rfc/rfc7515#section-4.1.9\r\nhttps://www.rfc-editor.org/rfc/rfc7519#section-5.1\r\nhttps://www.rfc-editor.org/rfc/rfc8725.html#name-use-explicit-typing\r\nhttps://datatracker.ietf.org/doc/html/rfc9068#name-header\r\nhttps://www.rfc-editor.org/rfc/rfc9449.html#name-dpop-proof-jwt-syntax\r\nhttps://www.rfc-editor.org/rfc/rfc7519.html#section-10.2\r\n\r\n ",
              "createdAt": "2024-04-24T23:13:47Z",
              "updatedAt": "2024-04-24T23:13:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM57UGgu",
          "commit": {
            "abbreviatedOid": "f7ddfab"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-21T14:50:23Z",
          "updatedAt": "2024-05-21T14:50:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM583i4n",
          "commit": {
            "abbreviatedOid": "f7ddfab"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T21:58:08Z",
          "updatedAt": "2024-06-03T21:58:08Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm pulling out the misuse of the \"typ\" Header Parameter as a separate issue so that it can be discussed on its own.",
              "createdAt": "2024-06-03T21:58:08Z",
              "updatedAt": "2024-06-03T21:58:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM583kFA",
          "commit": {
            "abbreviatedOid": "f7ddfab"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T22:02:38Z",
          "updatedAt": "2024-06-03T22:02:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "https://github.com/oauth-wg/oauth-transaction-tokens/issues/97",
              "createdAt": "2024-06-03T22:02:38Z",
              "updatedAt": "2024-06-03T22:02:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM59Xhbt",
          "commit": {
            "abbreviatedOid": "172971b"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-06T22:35:28Z",
          "updatedAt": "2024-06-06T22:35:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOJt_WwM5t1lm_",
      "title": "fix typo/spellng",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/93",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-04-26T12:28:45Z",
      "updatedAt": "2024-04-26T18:19:58Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "cb64104423637c8540f066c9b73532ce5f3492fb",
      "headRepository": "bc-pi/oauth-transaction-tokens",
      "headRefName": "patch-1",
      "headRefOid": "28217e7b99a6842c19225df6800228c82a4846b1",
      "closedAt": "2024-04-26T18:19:58Z",
      "mergedAt": "2024-04-26T18:19:58Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "9a4e2a10383b263f43ae2cc0f064824873481ca7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM54vJah",
          "commit": {
            "abbreviatedOid": "28217e7"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-26T18:19:52Z",
          "updatedAt": "2024-04-26T18:19:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 98,
      "id": "PR_kwDOJt_WwM5yCa6h",
      "title": "fixed typo ieft->ietf (issue #94)",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/98",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "tulshi"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-10T23:36:10Z",
      "updatedAt": "2024-06-14T16:11:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d4ec023a99e54163f875695bbd63e4d4c81fd283",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "fix-typo",
      "headRefOid": "c731481ecf287438850bae9a10cc467f04547848",
      "closedAt": "2024-06-14T16:11:09Z",
      "mergedAt": "2024-06-14T16:11:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d3febe84ae8c544e53af7ef8aeeb79419b151467"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM59tN2z",
          "commit": {
            "abbreviatedOid": "c731481"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-11T00:41:25Z",
          "updatedAt": "2024-06-11T00:41:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 99,
      "id": "PR_kwDOJt_WwM5ywoBH",
      "title": "Added a subsection for the azd  value",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/99",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To address issue #79 ",
      "createdAt": "2024-06-18T00:43:16Z",
      "updatedAt": "2024-06-20T21:30:10Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "azd-rctx-clarity",
      "headRefOid": "6feaa8d32e1404bf269ecea88e30b41a0d7c1299",
      "closedAt": "2024-06-20T21:30:09Z",
      "mergedAt": "2024-06-20T21:30:09Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "e8830562c02d0d01523e4b9d3dfff36e1da31cfd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-tA6-",
          "commit": {
            "abbreviatedOid": "2826890"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T14:42:41Z",
          "updatedAt": "2024-06-18T14:42:41Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This looks great. I'm not sure about the \"key-value pairs\" term as the non-normative example has a nested JSON structure. Maybe \"...a JSON object that contains claims, which together...\" to make it a little less specific?",
              "createdAt": "2024-06-18T14:42:41Z",
              "updatedAt": "2024-06-18T14:42:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5-u5GM",
          "commit": {
            "abbreviatedOid": "2826890"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T18:32:31Z",
          "updatedAt": "2024-06-18T18:32:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The [JSON spec](https://datatracker.ietf.org/doc/html/rfc8259#section-1) says that the content of a JSON object are name value pairs, wherein the value can be an object.",
              "createdAt": "2024-06-18T18:32:31Z",
              "updatedAt": "2024-06-18T18:32:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5-u60X",
          "commit": {
            "abbreviatedOid": "2826890"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T18:36:49Z",
          "updatedAt": "2024-06-18T18:36:49Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I updated the text a bit, but I'm not sure if it will address your issue. Please review.",
              "createdAt": "2024-06-18T18:36:49Z",
              "updatedAt": "2024-06-18T18:36:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5_Akd_",
          "commit": {
            "abbreviatedOid": "6feaa8d"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2024-06-20T16:13:05Z",
          "updatedAt": "2024-06-20T16:13:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOJt_WwM5y1Z0U",
      "title": "Update draft-ietf-oauth-transaction-tokens.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/100",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added text to address issue #74",
      "createdAt": "2024-06-18T14:13:43Z",
      "updatedAt": "2024-07-24T16:17:22Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "sec-replace-txn",
      "headRefOid": "66fac7c1ace9f75c967ba6ed361c3760f4bfeb90",
      "closedAt": "2024-06-21T18:09:10Z",
      "mergedAt": "2024-06-21T18:09:10Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "7d004dd6444511ad0be17d395be56a4b1dab5e60"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-u76K",
          "commit": {
            "abbreviatedOid": "cd45864"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T18:39:34Z",
          "updatedAt": "2024-06-18T18:45:15Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Ony -> Only\r\nmay -> MAY (?)\r\nadd comma after \"may be trusted\"\r\n",
              "createdAt": "2024-06-18T18:39:34Z",
              "updatedAt": "2024-06-18T18:45:15Z"
            },
            {
              "originalPosition": 23,
              "body": "I'm a bit conflicted about the last sentence. The rest of this paragraph applies to any service, whereas the last sentence applies only to the TTS. Should we have a separate \"security considerations\" subsection for TTSes?",
              "createdAt": "2024-06-18T18:42:31Z",
              "updatedAt": "2024-06-18T18:45:15Z"
            },
            {
              "originalPosition": 25,
              "body": "Should we change this title to \"Scope and Purpose processing\" to avoid confusion?",
              "createdAt": "2024-06-18T18:43:41Z",
              "updatedAt": "2024-06-18T18:45:15Z"
            },
            {
              "originalPosition": 26,
              "body": "make -> makes",
              "createdAt": "2024-06-18T18:44:37Z",
              "updatedAt": "2024-06-18T18:45:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5-vcQR",
          "commit": {
            "abbreviatedOid": "cd45864"
          },
          "author": "dhs-aws",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2024-06-18T19:56:10Z",
          "updatedAt": "2024-06-18T19:56:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5_Ah74",
          "commit": {
            "abbreviatedOid": "cd45864"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T16:07:47Z",
          "updatedAt": "2024-06-20T16:07:47Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Yeah... I will remove that last sentence and then we can maybe add another section of validating tokens either TTS specific or even for receiving workloads.",
              "createdAt": "2024-06-20T16:07:47Z",
              "updatedAt": "2024-06-20T16:07:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM5_CtUV",
          "commit": {
            "abbreviatedOid": "66fac7c"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-20T21:29:39Z",
          "updatedAt": "2024-06-20T21:29:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDOJt_WwM5y1d6V",
      "title": "Updated text on `txn` claim",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/101",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added text to address issue #77 regarding the value of the `txn` claim within the Txn-Token",
      "createdAt": "2024-06-18T14:22:04Z",
      "updatedAt": "2024-06-20T16:10:47Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "txn-optional",
      "headRefOid": "2e332e8cf65db24b0e95bc4670cf5239a6ada991",
      "closedAt": "2024-06-20T16:10:31Z",
      "mergedAt": "2024-06-20T16:10:31Z",
      "mergedBy": "gffletch",
      "mergeCommit": {
        "oid": "17c4691d651509b0dc11a590d36ab15dfc7d52ea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-u7nE",
          "commit": {
            "abbreviatedOid": "2e332e8"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-18T18:38:52Z",
          "updatedAt": "2024-06-18T18:38:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "PR_kwDOJt_WwM5y1lBk",
      "title": "Clarified the `purp` claim",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/102",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added a section to clarify the intent of the `purp` claim and how it is different from scope values addressing issue #78.",
      "createdAt": "2024-06-18T14:36:36Z",
      "updatedAt": "2024-06-20T16:11:25Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "purp-clarification",
      "headRefOid": "6347600c0e1951d24923da2bdfb0def544b1e1d7",
      "closedAt": "2024-06-20T16:11:17Z",
      "mergedAt": "2024-06-20T16:11:17Z",
      "mergedBy": "gffletch",
      "mergeCommit": {
        "oid": "c11cc2df589c817a066a7daa72815d7ba8fae7e2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-u7db",
          "commit": {
            "abbreviatedOid": "6347600"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-18T18:38:29Z",
          "updatedAt": "2024-06-18T18:38:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 103,
      "id": "PR_kwDOJt_WwM5zA--Z",
      "title": "changing OAuth URI subregistry entry for Txn-Tokens to be txn_token",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/103",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We currently use the URI: \"urn:ietf:params:oauth:token-type:txn-token\" to denote a Txn-Token in requests or in the token itself. However, if I look at other entries in the OAuth URI Subregistry here (https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml#uri), they use the \"_token\" style for the token types. We also use that style when the subject-token-type is \"self_signed\". So I'd like to propose that we use the URI: \"urn:ietf:params:oauth:token-type:txn_token\" for the transaction token URI.",
      "createdAt": "2024-06-20T01:48:49Z",
      "updatedAt": "2024-06-20T17:02:20Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d3febe84ae8c544e53af7ef8aeeb79419b151467",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "fix-token-type",
      "headRefOid": "f437015f5789969ce423649405b3ee789cc2595d",
      "closedAt": "2024-06-20T17:02:20Z",
      "mergedAt": "2024-06-20T17:02:20Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "15045bf7b3dda66dd648883ae3f3a3eb268eaebc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5-91gC",
          "commit": {
            "abbreviatedOid": "f437015"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Agreed with aligning to the common practices elsewhere.",
          "createdAt": "2024-06-20T11:11:50Z",
          "updatedAt": "2024-06-20T11:11:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5_Ad2I",
          "commit": {
            "abbreviatedOid": "f437015"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-20T16:00:10Z",
          "updatedAt": "2024-06-20T16:00:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOJt_WwM5zNzYE",
      "title": "draft02 files for submission. I have performed the IDNits check, and \u2026",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/104",
      "state": "CLOSED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026the only issue is that there are non-ascii characters",
      "createdAt": "2024-06-21T19:12:03Z",
      "updatedAt": "2024-07-15T21:46:15Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "7d004dd6444511ad0be17d395be56a4b1dab5e60",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "prep-for-submission",
      "headRefOid": "fb81168c371f5bb3bb233f526788f67907d2a1b7",
      "closedAt": "2024-07-15T21:46:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "closing this PR since we have moved to draft-03 now.",
          "createdAt": "2024-07-15T21:46:15Z",
          "updatedAt": "2024-07-15T21:46:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6AEcyL",
          "commit": {
            "abbreviatedOid": "fb81168"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Not sure while the entire doc is shown as green. Approving.",
          "createdAt": "2024-06-28T17:57:18Z",
          "updatedAt": "2024-06-28T17:57:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 105,
      "id": "PR_kwDOJt_WwM5zjuKe",
      "title": "Added HTTP Header registration requirements",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/105",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-25T23:11:34Z",
      "updatedAt": "2024-07-04T00:56:21Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "95f9bdcd0e539c697a05b74a7a3a407834b9f439",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "add-header-iana",
      "headRefOid": "a01b7f975573407c2b960c8692cb5ea0355d1dbe",
      "closedAt": "2024-07-04T00:56:19Z",
      "mergedAt": "2024-07-04T00:56:19Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "6f7b57d26b721974a403231d27414e1943679372"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> Brian Campbell 7:28 AM a new header is not the same thing as a new HTTP Authentication Scheme and there seems to be some conflation of things here\r\n\r\nSwitched to defining a new HTTP header.",
          "createdAt": "2024-06-26T18:30:04Z",
          "updatedAt": "2024-06-26T18:30:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM5_rjhI",
          "commit": {
            "abbreviatedOid": "46a1d23"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-26T14:48:42Z",
          "updatedAt": "2024-06-26T14:48:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM5_r_QW",
          "commit": {
            "abbreviatedOid": "46a1d23"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Atul Tulshibagwale\r\n  5:14 PM\r\nAdded a section that will help register Txn-Token as a new HTTP Authentication Scheme, when this draft progress to WGLC: https://github.com/oauth-wg/oauth-transaction-tokens/pull/105. Please review!\r\n[#105 Added HTTP Authentication Scheme registration requirements](https://github.com/oauth-wg/oauth-transaction-tokens/pull/105)\r\n<https://github.com/[oauth-wg/oauth-transaction-tokens](https://github.com/oauth-wg/oauth-transaction-tokens)|oauth-wg/oauth-transaction-tokens>oauth-wg/oauth-transaction-tokens | Yesterday at 5:11 PM | Added by [GitHub](https://ietf.slack.com/services/B058XLB1MMY)\r\n\r\n\r\nBrian Campbell\r\n  7:28 AM\r\na new header is not the same thing as a new HTTP Authentication Scheme and there seems to be some conflation of things here",
          "createdAt": "2024-06-26T15:30:48Z",
          "updatedAt": "2024-06-26T15:30:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6AEeVt",
          "commit": {
            "abbreviatedOid": "e41a344"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T18:00:31Z",
          "updatedAt": "2024-06-28T18:00:31Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "typo ... use -> used",
              "createdAt": "2024-06-28T18:00:31Z",
              "updatedAt": "2024-06-28T18:00:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6AEenq",
          "commit": {
            "abbreviatedOid": "e41a344"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Left a minor comment. I'm good though I suspect Brian is the review that will be most helpful :) ",
          "createdAt": "2024-06-28T18:01:07Z",
          "updatedAt": "2024-06-28T18:01:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6AcB6I",
          "commit": {
            "abbreviatedOid": "e41a344"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T20:38:06Z",
          "updatedAt": "2024-07-02T20:38:06Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "> typo ... use -> used \r\n\r\nthat and one other spelling thing\r\n\r\n```suggestion\r\n* Comment: The `Authorization` header cannot be used for Txn-tokens because that may be used for service-to-service authorization, and the services may simultaneously require the use of Txn-tokens to convey detailed immutable information such as user identity and details of fine-grained authorization that are included in the Txn-token.\r\n```",
              "createdAt": "2024-07-02T20:38:06Z",
              "updatedAt": "2024-07-02T20:38:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 106,
      "id": "PR_kwDOJt_WwM5z1MFN",
      "title": "Mnr typos",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/106",
      "state": "MERGED",
      "author": "adeinega",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-27T23:36:33Z",
      "updatedAt": "2024-07-02T21:04:06Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "7d004dd6444511ad0be17d395be56a4b1dab5e60",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "2325b94b26bfaef3712a04f084a12a33d0aaa563",
      "closedAt": "2024-07-02T21:04:06Z",
      "mergedAt": "2024-07-02T21:04:06Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "95f9bdcd0e539c697a05b74a7a3a407834b9f439"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6AEdbv",
          "commit": {
            "abbreviatedOid": "2325b94"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you for the careful read!",
          "createdAt": "2024-06-28T17:58:32Z",
          "updatedAt": "2024-06-28T17:58:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6AcLg7",
          "commit": {
            "abbreviatedOid": "2325b94"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-02T21:03:21Z",
          "updatedAt": "2024-07-02T21:03:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOJt_WwM52XT5v",
      "title": "Correct JSON example - address issue #114",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/116",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Correcting the JSON example to use NumericDate for `iat` and `exp` claims. Address issue #114",
      "createdAt": "2024-07-24T16:20:57Z",
      "updatedAt": "2024-07-24T16:31:12Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "ea45852550bdb2b74ea51202196a06bfbc4f31c6",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "json-cleanup",
      "headRefOid": "75d2702f44c545f92779f4cb39f9ed0bc1846583",
      "closedAt": "2024-07-24T16:31:12Z",
      "mergedAt": "2024-07-24T16:31:11Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "bea633c0f9fb6db8521f94063665362cda2673ca"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6C9wwK",
          "commit": {
            "abbreviatedOid": "75d2702"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-24T16:21:39Z",
          "updatedAt": "2024-07-24T16:21:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 122,
      "id": "PR_kwDOJt_WwM53fRrs",
      "title": "added unsigned json subject token type",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/122",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-05T19:33:50Z",
      "updatedAt": "2024-08-29T22:41:11Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "bea633c0f9fb6db8521f94063665362cda2673ca",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "clarify-sub-token",
      "headRefOid": "3e9a2a25c088e86c4a3bd4e2770c3e5e7d4a8e1e",
      "closedAt": "2024-08-29T22:41:10Z",
      "mergedAt": "2024-08-29T22:41:10Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "d7f4a841016c0ae5698f111d5a90f5ce73b67b6f"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Please correct me if I am wrong but the github issue 121 asks \"Add an outline on when self-signed may be useful\". Which line here indicates \"when\" to use signed. Unsigned is in-expensive and low overhead for requesters so why would they ever go with Signed json, especially when in both signed or unsigned case, the Tx token may or may not consider the \"sub\" value in json to create Tx Token. The motivation (or mandate) to use signed json has to come from Tx token service.\r\n> \r\n> If Tx token service is going to use this value to find data about what claims to add or in other words if the claims are going to be determined based on sub value then requester MUST pass signed. If unsigned token is sent to Tx token that depends on signed token, then the claims might be missing from Tx token.\r\n\r\nThe notes copy-pasted from the WG notes do say \"when\", but based on our recollection of the events during that session, the real ask was to clarify that one could use unsigned JSON objects. That is indicated in the action item (i.e. the last line in that issue description)",
          "createdAt": "2024-08-17T00:44:09Z",
          "updatedAt": "2024-08-17T00:44:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6EVHlX",
          "commit": {
            "abbreviatedOid": "749779a"
          },
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Please correct me if I am wrong but the github issue 121 asks \"Add an outline on when self-signed may be useful\". Which line here indicates \"when\" to use signed. Unsigned is in-expensive and low overhead for requesters so why would they ever go with Signed json, especially when in both signed or unsigned case, the Tx token may or may not consider the \"sub\" value in json to create Tx Token. The motivation (or mandate) to use signed json has to come from Tx token service. \r\n\r\nIf Tx token service is going to use this value to find data about what claims to add or in other words if the claims are going to be determined based on sub value then requester MUST pass signed. If unsigned token is sent to Tx token that depends on signed token, then the claims might be missing from Tx token.",
          "createdAt": "2024-08-06T02:05:53Z",
          "updatedAt": "2024-08-06T02:05:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6EYQyt",
          "commit": {
            "abbreviatedOid": "749779a"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T10:49:38Z",
          "updatedAt": "2024-08-06T11:02:08Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "\"Any value used in this parameter MUST be a URI as specified in RFC 8693 {{RFC8693}}.\" This sounds repetitive as it is already stated above: \"The `subject_token_type` parameter value MUST be a URI {{RFC3986}}. It MAY be: ....\"",
              "createdAt": "2024-08-06T10:49:38Z",
              "updatedAt": "2024-08-06T11:02:08Z"
            },
            {
              "originalPosition": 23,
              "body": "Is it mentioned how the Txn-Token Service should handle the exp field? I think the Txn-Token Service should still have the authority over when the issued Txn-Token expires. The exp field in the request should be a mere wish, but it cannot force the Txn-Token Service to grant it. Maybe it makes sense to say whether this would be a maximum expiration time (\"please give me a Txn-Token which expires not later than that\") or minimum time (\"please give me a Token which is valid untilll at least this time\").",
              "createdAt": "2024-08-06T10:55:21Z",
              "updatedAt": "2024-08-06T11:02:08Z"
            },
            {
              "originalPosition": 20,
              "body": "How exactly is the  unsigned JSON encoded? Is it just a JSON string or is it at least base64urll encoded? We may need  to  mention this.",
              "createdAt": "2024-08-06T11:01:45Z",
              "updatedAt": "2024-08-06T11:02:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6EbkkO",
          "commit": {
            "abbreviatedOid": "749779a"
          },
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T16:54:57Z",
          "updatedAt": "2024-08-06T16:54:57Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "That's good callout to encode base64. Our language can be similar to what it says here in https://www.ietf.org/archive/id/draft-jones-json-web-token-02.html#rfc.section.7 \r\n",
              "createdAt": "2024-08-06T16:54:57Z",
              "updatedAt": "2024-08-06T16:54:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6FvdAT",
          "commit": {
            "abbreviatedOid": "749779a"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-17T00:39:49Z",
          "updatedAt": "2024-08-17T00:39:49Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I believe a JWT is always Base64url encoded. It is either a JWS or a JWE, and those specs specify that it is encoded, e.g. in this section: https://datatracker.ietf.org/doc/html/rfc7515#section-5",
              "createdAt": "2024-08-17T00:39:49Z",
              "updatedAt": "2024-08-17T00:39:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6FvgaV",
          "commit": {
            "abbreviatedOid": "749779a"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-17T00:47:04Z",
          "updatedAt": "2024-08-17T00:47:04Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Good point. I've added a line in the Txn-Token Request processing section to clarify.",
              "createdAt": "2024-08-17T00:47:04Z",
              "updatedAt": "2024-08-17T00:47:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6Fvg51",
          "commit": {
            "abbreviatedOid": "749779a"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-17T00:48:06Z",
          "updatedAt": "2024-08-17T00:48:06Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I'm OK with dropping this additional line. I thought someone had brought this up in our discussion at Vancouver, but I'll drop it for now.",
              "createdAt": "2024-08-17T00:48:06Z",
              "updatedAt": "2024-08-17T00:48:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6FwgSA",
          "commit": {
            "abbreviatedOid": "2bed5de"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-08-17T11:03:55Z",
          "updatedAt": "2024-08-17T11:09:54Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n* A URN type name when the subject token is a self-signed JWT, as described below.\r\n* A URN type name when the subject token is an unsigned JSON object, as described below.\r\n```\r\n\r\nClearly the value of this field is not the self-signed JWT itself.",
              "createdAt": "2024-08-17T11:03:55Z",
              "updatedAt": "2024-08-17T11:09:54Z"
            },
            {
              "originalPosition": 74,
              "body": "To represent the requester? Maybe \"to express the properties it desires from the generated Txn-Token\".",
              "createdAt": "2024-08-17T11:09:26Z",
              "updatedAt": "2024-08-17T11:09:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6GAYF7",
          "commit": {
            "abbreviatedOid": "a20f4ab"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-20T14:51:03Z",
          "updatedAt": "2024-08-20T14:51:03Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "add...  `the` -> The type of *the* `subject_token` ...",
              "createdAt": "2024-08-20T14:51:03Z",
              "updatedAt": "2024-08-20T14:51:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6GAZUN",
          "commit": {
            "abbreviatedOid": "a20f4ab"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-20T14:52:55Z",
          "updatedAt": "2024-08-20T14:52:55Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "The \"custom URI\" could also be a URN correct? ",
              "createdAt": "2024-08-20T14:52:55Z",
              "updatedAt": "2024-08-20T14:52:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6GAbUI",
          "commit": {
            "abbreviatedOid": "a20f4ab"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-20T14:55:55Z",
          "updatedAt": "2024-08-20T14:55:56Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I think the exp should the the validity of the unsigned JSON object to keep it semantically equivalent to the self-signed JWT \"The expiration time for the JWT.\"",
              "createdAt": "2024-08-20T14:55:55Z",
              "updatedAt": "2024-08-20T14:55:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6GVElf",
          "commit": {
            "abbreviatedOid": "749779a"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-22T07:08:10Z",
          "updatedAt": "2024-08-22T07:08:10Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "@gffletch Although this would be more in line with JWTs, I'm not sure if this is useful. The unsigned JSON is typically constructed by the workload right before performing the request and it's usuallly a one-off. The server would rread the unsigned JSON and issue the Txn-Token after which it just thows away the unsigned JSON. It may help to detect large clock skews between workload and TTS though.",
              "createdAt": "2024-08-22T07:08:10Z",
              "updatedAt": "2024-08-22T07:08:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6GVFXr",
          "commit": {
            "abbreviatedOid": "749779a"
          },
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-22T07:09:56Z",
          "updatedAt": "2024-08-22T07:09:56Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Yes JWTs are always base64 encoded, but we do not use an unsigned JWT here, but an unsigned JSON object. This is different.",
              "createdAt": "2024-08-22T07:09:56Z",
              "updatedAt": "2024-08-22T07:09:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6F6s0u",
          "commit": {
            "abbreviatedOid": "21d457b"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-20T00:25:45Z",
          "updatedAt": "2024-08-26T23:42:55Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Actually, the `subject_token` is intended to convey to the TTS who the requester is (and possibly what their capabilities are - derived from the details of the subject token). I've updated the text to say \"details of the requester\" to clarify.",
              "createdAt": "2024-08-20T00:25:46Z",
              "updatedAt": "2024-08-26T23:42:55Z"
            },
            {
              "originalPosition": 20,
              "body": "I've added language for Base64encoding the unsigned JSON object.",
              "createdAt": "2024-08-21T19:27:08Z",
              "updatedAt": "2024-08-26T23:42:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6G4w7T",
          "commit": {
            "abbreviatedOid": "749779a"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-27T11:30:57Z",
          "updatedAt": "2024-08-27T11:30:57Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I just don't like changing the semantics of the `exp` field between different token types. What about describing the `exp` value as...\r\n\r\n`exp` : The expiry time of the unsigned JSON object which the TTS MAY use as input to determining the life-time of the Txn-token.\r\n\r\nIf we need a way for the requesting workload to request an expiry time for the Txn-token then we should allow that for all flows and not just this one.",
              "createdAt": "2024-08-27T11:30:57Z",
              "updatedAt": "2024-08-27T11:30:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6G-KWF",
          "commit": {
            "abbreviatedOid": "21d457b"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-27T20:57:42Z",
          "updatedAt": "2024-08-27T20:57:44Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Agreed, used your proposed language.",
              "createdAt": "2024-08-27T20:57:43Z",
              "updatedAt": "2024-08-27T20:57:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6HNXS5",
          "commit": {
            "abbreviatedOid": "be5a1aa"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-29T11:22:21Z",
          "updatedAt": "2024-08-29T11:22:21Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "There's an extra space after the comma :)",
              "createdAt": "2024-08-29T11:22:21Z",
              "updatedAt": "2024-08-29T11:22:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6HNYeW",
          "commit": {
            "abbreviatedOid": "be5a1aa"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-29T11:24:43Z",
          "updatedAt": "2024-08-29T11:24:44Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Maybe change \"`subject_token` field\" to \"`subject_token` parameter\" ?",
              "createdAt": "2024-08-29T11:24:43Z",
              "updatedAt": "2024-08-29T11:24:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6HNYvk",
          "commit": {
            "abbreviatedOid": "be5a1aa"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Just a few very minor comments",
          "createdAt": "2024-08-29T11:25:13Z",
          "updatedAt": "2024-08-29T11:25:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6HUv5H",
          "commit": {
            "abbreviatedOid": "be5a1aa"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-29T22:37:37Z",
          "updatedAt": "2024-08-29T22:37:38Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "done.",
              "createdAt": "2024-08-29T22:37:37Z",
              "updatedAt": "2024-08-29T22:37:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOJt_WwM55gDkX",
      "title": "moved txn field usage information to Security Considerations section",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/123",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-26T23:59:18Z",
      "updatedAt": "2024-09-04T23:20:54Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d7f4a841016c0ae5698f111d5a90f5ce73b67b6f",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "n-a-txn-claim",
      "headRefOid": "62ad115a33b6b29b75dfc3909bc776d2dffb6de3",
      "closedAt": "2024-09-04T23:20:53Z",
      "mergedAt": "2024-09-04T23:20:53Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "b9fa6db2879cfc17ae5ed2a0e000e69c5a57ad4b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6G0io8",
          "commit": {
            "abbreviatedOid": "64b8872"
          },
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-27T01:27:05Z",
          "updatedAt": "2024-08-27T01:27:05Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Txn identifier is useful for auditing and debugging. We have to make sure TTS logs Tx identifier on its end and then every service in call chain also logs Txn identifier, so in case, a Tx token validating party reports some problem like missing claim or security auditors want to verify why some data was allowed/denied access, then its useful to go back to TTS and verify what happened exactly using token issuance using the Tx identifier.\r\n\r\nWe should include TTS logging Txn identifier.",
              "createdAt": "2024-08-27T01:27:05Z",
              "updatedAt": "2024-08-27T01:27:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6G4ofz",
          "commit": {
            "abbreviatedOid": "64b8872"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-27T11:15:49Z",
          "updatedAt": "2024-08-27T11:15:49Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I would recommend \"following an *initial* invocation\" or \"following an *initiating* invocation\" so that we don't bias this toward external calls vs inside-the-perimeter invocations.",
              "createdAt": "2024-08-27T11:15:49Z",
              "updatedAt": "2024-08-27T11:15:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6G4rix",
          "commit": {
            "abbreviatedOid": "64b8872"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-27T11:21:47Z",
          "updatedAt": "2024-08-27T11:21:47Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "What about...\r\n\r\nA Txn-token typically represents the call-chain of workloads necessary to complete a logical function initiated by an external or internal workload. The `txn` claim in the Txn-token provides a unique identifier that when logged by the TTS and each subsequent workload can provide both discovery and auditability of successful and failed transactions. It is therefore strongly RECOMMENDED to use an identifier, unique within the trust domain, for the `txn` value.\r\n",
              "createdAt": "2024-08-27T11:21:47Z",
              "updatedAt": "2024-08-27T11:21:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6H_eiq",
          "commit": {
            "abbreviatedOid": "62ad115"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-04T23:19:09Z",
          "updatedAt": "2024-09-04T23:19:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 125,
      "id": "PR_kwDOJt_WwM56kTYt",
      "title": "clarified logging recommendation",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/125",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-05T19:25:42Z",
      "updatedAt": "2024-09-27T18:08:08Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "b9fa6db2879cfc17ae5ed2a0e000e69c5a57ad4b",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "clarify-logging",
      "headRefOid": "59a0cbda1c885644b1e6c59c325f8f1307a623c2",
      "closedAt": "2024-09-27T18:08:07Z",
      "mergedAt": "2024-09-27T18:08:07Z",
      "mergedBy": "gffletch",
      "mergeCommit": {
        "oid": "d238f18e16364f12206c5ee1ac0001498b5a3822"
      },
      "comments": [
        {
          "author": "obfuscoder",
          "authorAssociation": "COLLABORATOR",
          "body": "Is there a reason why you did not use uppercase terms like MUST NOT or SHOULD? Because it's supposed to be informative?",
          "createdAt": "2024-09-11T06:44:00Z",
          "updatedAt": "2024-09-11T06:44:00Z"
        },
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, the section is non-normative.\r\n\r\nOn Tue, Sep 10, 2024 at 11:44\u202fPM Kai Lehmann ***@***.***>\r\nwrote:\r\n\r\n> Is there a reason why you did not use uppercase terms like MUST NOT or\r\n> SHOULD? Because it's supposed to be informative?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-transaction-tokens/pull/125#issuecomment-2342792520>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB55UG63MMHMIFIJYT4M53LZV7RENAVCNFSM6AAAAABNXE4OQCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNBSG44TENJSGA>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-09-11T15:39:03Z",
          "updatedAt": "2024-09-11T15:39:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6IIsCU",
          "commit": {
            "abbreviatedOid": "eaae10c"
          },
          "author": "ashayraut",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2024-09-05T20:04:40Z",
          "updatedAt": "2024-09-05T20:04:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6IRgFs",
          "commit": {
            "abbreviatedOid": "eaae10c"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-06T13:33:33Z",
          "updatedAt": "2024-09-06T13:33:33Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Removing the signature is one way to make the token not replayable, but it's not the only way to address the logging concerns. For instance, select fields could be extracted from the token and logged. \r\n\r\nComplete Txn-Tokens must not be logged verbatim due to the potential replay risk of tokens extracted from the log files. Additionally, Txn-Tokens may contain PII which should be anonymized or removed before logging the values. There are multiple ways to ensure the logged data can not be replayed for example logging a Txn-Token that does not contain any PII after removing the signature from the base64url encoded token.\r\n\r\nOr something like that?",
              "createdAt": "2024-09-06T13:33:33Z",
              "updatedAt": "2024-09-06T13:33:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6ISYzs",
          "commit": {
            "abbreviatedOid": "eaae10c"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-06T15:11:10Z",
          "updatedAt": "2024-09-06T15:11:10Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think there are multiple forms of abuse, including replay and information leakage.\r\n\r\nI worry about schemes that strip the signature - it limits replay risk (assuming the signature is checked.... if it is not, there are bigger problems), but removes the integrity protection allowing an attacker to manipulate the contents of the token which may make forensic analysis a bit more tricky, so stripping the signature is safe as long as the log file's integrity is protected.\r\n\r\nBuilding on the existing text, something like:\r\n\r\nTxn-Tokens should not be logged by microservices. This is in order to prevent replay of tokens or leakage of PII or other sensitive information via log files. A hash of the Txn-Token may be logged to allow for correlation with the log files of the Txn-Token Service that records issued tokens. Alternatively the JWS payload of a Txn-Token may be logged after the signature has been removed. If the Txn-Token contains PII, then care should be taken in logging the content of the Txn-Token so that the PII does not get logged.\r\n\r\n",
              "createdAt": "2024-09-06T15:11:10Z",
              "updatedAt": "2024-09-06T15:11:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6Ikitt",
          "commit": {
            "abbreviatedOid": "eaae10c"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-10T03:13:03Z",
          "updatedAt": "2024-09-10T03:13:03Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I've incorporated some of both your comments here.",
              "createdAt": "2024-09-10T03:13:03Z",
              "updatedAt": "2024-09-10T03:13:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6IsCha",
          "commit": {
            "abbreviatedOid": "59a0cbd"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-10T17:43:01Z",
          "updatedAt": "2024-09-10T17:43:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6LIzsS",
          "commit": {
            "abbreviatedOid": "59a0cbd"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-27T18:07:51Z",
          "updatedAt": "2024-09-27T18:07:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 126,
      "id": "PR_kwDOJt_WwM56zrOg",
      "title": "Update draft-ietf-oauth-transaction-tokens.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/126",
      "state": "MERGED",
      "author": "federicofdez",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Typo corrected.",
      "createdAt": "2024-09-09T07:26:32Z",
      "updatedAt": "2024-09-09T16:44:07Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "b9fa6db2879cfc17ae5ed2a0e000e69c5a57ad4b",
      "headRepository": "federicofdez/oauth-transaction-tokens",
      "headRefName": "patch-1",
      "headRefOid": "d61da4e0a4de2df336aaf654f69e33d07b374e57",
      "closedAt": "2024-09-09T16:43:43Z",
      "mergedAt": "2024-09-09T16:43:43Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "8b39624909cc857534a55addccc16c3de021de58"
      },
      "comments": [
        {
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "body": "@federicofdez thanks for the PR!",
          "createdAt": "2024-09-09T16:44:05Z",
          "updatedAt": "2024-09-09T16:44:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6Igy9j",
          "commit": {
            "abbreviatedOid": "d61da4e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-09T15:43:49Z",
          "updatedAt": "2024-09-09T15:43:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 136,
      "id": "PR_kwDOJt_WwM586VZm",
      "title": "Editorial changes to the ASCII diagrams",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/136",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See issue #128",
      "createdAt": "2024-09-27T11:49:54Z",
      "updatedAt": "2024-09-27T15:41:36Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8b39624909cc857534a55addccc16c3de021de58",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "6afcd71ec7a43ef18a14e0a4514f5dff99ed8dea",
      "closedAt": "2024-09-27T15:41:34Z",
      "mergedAt": "2024-09-27T15:41:34Z",
      "mergedBy": "gffletch",
      "mergeCommit": {
        "oid": "8fd7f07db2284998d698a8eedaea5a30615e83c7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6LHvAT",
          "commit": {
            "abbreviatedOid": "6afcd71"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2024-09-27T15:32:09Z",
          "updatedAt": "2024-09-27T15:32:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 137,
      "id": "PR_kwDOJt_WwM586Y_h",
      "title": "Clarify Transaction Token Context",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/137",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See issue #127",
      "createdAt": "2024-09-27T11:58:18Z",
      "updatedAt": "2024-09-27T15:49:22Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8b39624909cc857534a55addccc16c3de021de58",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-2",
      "headRefOid": "99ac81f3df87edcef7909eb00454bfc471d0c95f",
      "closedAt": "2024-09-27T15:49:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6LH1-V",
          "commit": {
            "abbreviatedOid": "99ac81f"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-27T15:46:47Z",
          "updatedAt": "2024-09-27T15:46:47Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "In this context of the spec... what needs to be sent to the Txn-Token Service, I believe we want to send the full access token. If not, we should have a longer discussion about what should be sent. My expectation has been that the TTS would validate the access_token for it's authenticity before evaluating the TTS authorization policy to determine whether a TraT should be issued.",
              "createdAt": "2024-09-27T15:46:47Z",
              "updatedAt": "2024-09-27T15:46:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 138,
      "id": "PR_kwDOJt_WwM586cX5",
      "title": "Trust domain clarification",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/138",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See issue #129\r\n\r\nQuestion for reviewers. \r\n\r\n1. Do we need the final sentence on how a workload is invoked? If the sentence was not there would it change how we think about a trust domain?\r\n\r\n2. Do we need the second sentence as an example? Should we add more examples (e.g. trust domains can be defined as all the applications or workloads that recognise a specific issuer).",
      "createdAt": "2024-09-27T12:06:30Z",
      "updatedAt": "2024-09-27T17:18:22Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8b39624909cc857534a55addccc16c3de021de58",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-3",
      "headRefOid": "aaf7713158775938b5d72af9728cd1f3b13a2eb7",
      "closedAt": "2024-09-27T17:18:20Z",
      "mergedAt": "2024-09-27T17:18:20Z",
      "mergedBy": "PieterKas",
      "mergeCommit": {
        "oid": "cc919450cb2f4c47ea9580ab40a24ca5c7f9d209"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6LH0GV",
          "commit": {
            "abbreviatedOid": "aaf7713"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm good with this",
          "createdAt": "2024-09-27T15:42:48Z",
          "updatedAt": "2024-09-27T15:42:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 139,
      "id": "PR_kwDOJt_WwM586nGI",
      "title": "Proposed editorial update to  Txn-Token Response",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/139",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Related to issue #133",
      "createdAt": "2024-09-27T12:28:05Z",
      "updatedAt": "2024-09-27T17:19:50Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8b39624909cc857534a55addccc16c3de021de58",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-4",
      "headRefOid": "9fc6fed52fa49146e72f011e386de3280bacf5b8",
      "closedAt": "2024-09-27T17:19:49Z",
      "mergedAt": "2024-09-27T17:19:49Z",
      "mergedBy": "PieterKas",
      "mergeCommit": {
        "oid": "45e30da1e85cb0f3ee5eec5228aede008101bc83"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6LH1E6",
          "commit": {
            "abbreviatedOid": "9fc6fed"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm good with this",
          "createdAt": "2024-09-27T15:44:54Z",
          "updatedAt": "2024-09-27T15:44:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 140,
      "id": "PR_kwDOJt_WwM588JrW",
      "title": "Clarification on token context",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/140",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See issue #127",
      "createdAt": "2024-09-27T15:52:01Z",
      "updatedAt": "2024-10-03T00:06:21Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8fd7f07db2284998d698a8eedaea5a30615e83c7",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "e7d2bcacfe73a2df795059227f42bbac5f42fc29",
      "closedAt": "2024-10-03T00:06:19Z",
      "mergedAt": "2024-10-03T00:06:19Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "26e1cb85453191b6c735fbaf6bc0c9f86f987518"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6LIx2O",
          "commit": {
            "abbreviatedOid": "e7d2bca"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good.",
          "createdAt": "2024-09-27T18:05:57Z",
          "updatedAt": "2024-09-27T18:05:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6LvJJs",
          "commit": {
            "abbreviatedOid": "e7d2bca"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-03T00:05:56Z",
          "updatedAt": "2024-10-03T00:05:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 141,
      "id": "PR_kwDOJt_WwM588ODg",
      "title": "Additional detail on 'aud' claim",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/141",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See issue #134",
      "createdAt": "2024-09-27T16:03:22Z",
      "updatedAt": "2024-10-04T21:24:22Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8fd7f07db2284998d698a8eedaea5a30615e83c7",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-2",
      "headRefOid": "490abac173ad4e681a745fb3be91e58cf9fb562c",
      "closedAt": "2024-10-04T21:24:20Z",
      "mergedAt": "2024-10-04T21:24:20Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "3ec38046fcd7dc352ab2a79e411e406d6daee68e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6LI7od",
          "commit": {
            "abbreviatedOid": "ec6c176"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2024-09-27T18:26:24Z",
          "updatedAt": "2024-09-27T18:26:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6LvI2o",
          "commit": {
            "abbreviatedOid": "ec6c176"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-03T00:05:19Z",
          "updatedAt": "2024-10-03T00:05:26Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "This is in the \"Txn-Token Request\" section. Do we need to talk about replacement here, or should we have that language in the \"Creating Replacement Txn-Tokens\" section? We perhaps already have this there. Also, if you delete the \"value MUST be set to the Trust Domain name\", then we don't have that constraint listed anywhere else. We should make sure we have that specified somewhere if we want to remove it from here.",
              "createdAt": "2024-10-03T00:05:19Z",
              "updatedAt": "2024-10-03T00:05:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MAQ5a",
          "commit": {
            "abbreviatedOid": "ec6c176"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T18:47:29Z",
          "updatedAt": "2024-10-04T18:47:30Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "When the aud claim is initially defined, it is constrained to the trust domain. Agreed this is in the wrong section. Thanks for catching that. Reading the section on the replacement transaction tokens, it states that the sub and and values must remain unchanged. It may be enough to have the constraint explained in the original definition, so just removing this.,",
              "createdAt": "2024-10-04T18:47:29Z",
              "updatedAt": "2024-10-04T18:59:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MBzlo",
          "commit": {
            "abbreviatedOid": "490abac"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-04T21:24:12Z",
          "updatedAt": "2024-10-04T21:24:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 142,
      "id": "PR_kwDOJt_WwM588nqY",
      "title": "Updated Mutual Authentication Guidance",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/142",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In response to #135 \r\n\r\nUpdated section on:\r\n\r\n1. Mutual Authentication\r\n2. Security Considerations for Client Authentication\r\n3. Added security considerations for protecting the workload configuration\r\n\r\n@gffletch @tulshi ",
      "createdAt": "2024-09-27T17:17:03Z",
      "updatedAt": "2024-10-24T18:12:34Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "8fd7f07db2284998d698a8eedaea5a30615e83c7",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-5",
      "headRefOid": "9b95fcb2494c3d3ab877bd09048796be2d2a76d8",
      "closedAt": "2024-10-24T18:12:31Z",
      "mergedAt": "2024-10-24T18:12:31Z",
      "mergedBy": "PieterKas",
      "mergeCommit": {
        "oid": "c5fa3204880e9926cf6103737e3f1b70a2352c60"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6LI7TN",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks goood",
          "createdAt": "2024-09-27T18:25:30Z",
          "updatedAt": "2024-09-27T18:25:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6LvAE_",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-02T23:48:24Z",
          "updatedAt": "2024-10-03T00:02:04Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "The new line numbers 591 and 592 are essentially the same as the old line numbers 589 and 590. Was there anything specific about the previous language that didn't work for you?",
              "createdAt": "2024-10-02T23:48:24Z",
              "updatedAt": "2024-10-03T00:02:04Z"
            },
            {
              "originalPosition": 4,
              "body": "since we are not defining what is \"strong authentication\", should we just stay with \"TTS must authenticate workloads requesting TraTs\"?",
              "createdAt": "2024-10-02T23:49:30Z",
              "updatedAt": "2024-10-03T00:02:04Z"
            },
            {
              "originalPosition": 18,
              "body": "authenticated -> authenticates",
              "createdAt": "2024-10-02T23:54:24Z",
              "updatedAt": "2024-10-03T00:02:04Z"
            },
            {
              "originalPosition": 15,
              "body": "AFAIK MTLS is only possible with X.509, right? Using JWT with TLS is possible, but that is not the same as MTLS",
              "createdAt": "2024-10-02T23:55:12Z",
              "updatedAt": "2024-10-03T00:02:04Z"
            },
            {
              "originalPosition": 14,
              "body": "workloads credentials -> workload credentials",
              "createdAt": "2024-10-02T23:55:26Z",
              "updatedAt": "2024-10-03T00:02:04Z"
            },
            {
              "originalPosition": 22,
              "body": "The current spec (Section 6) specifies that there is exactly 1 logical TTS per trust domain, so we should drop the new line 600.",
              "createdAt": "2024-10-02T23:57:47Z",
              "updatedAt": "2024-10-03T00:02:04Z"
            },
            {
              "originalPosition": 43,
              "body": "This is conflicting with Section 6, we need to discuss whether we want to change that assumption.",
              "createdAt": "2024-10-03T00:01:49Z",
              "updatedAt": "2024-10-03T00:02:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MAZdG",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T19:06:54Z",
          "updatedAt": "2024-10-04T19:06:54Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "@gffletch your thoughts? I think Atul has a point - we don't define \"strong auth\", and probably shouldn't. However, we also want to steer people away from using shared secrets etc.",
              "createdAt": "2024-10-04T19:06:54Z",
              "updatedAt": "2024-10-04T19:06:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MAmfz",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T19:20:54Z",
          "updatedAt": "2024-10-04T19:20:54Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I was overly focused on teasing out credential formats from authentication protocols. What I tried to say was - use X.509 certs with MTLS or use a JWT over TLS. Perhaps I should just say that.",
              "createdAt": "2024-10-04T19:20:54Z",
              "updatedAt": "2024-10-04T19:20:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MAnKV",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T19:21:38Z",
          "updatedAt": "2024-10-04T19:21:38Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Fixed",
              "createdAt": "2024-10-04T19:21:38Z",
              "updatedAt": "2024-10-04T19:21:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MAtw6",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T19:32:19Z",
          "updatedAt": "2024-10-04T19:32:19Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "@gffletch I think you pointed this out in one of the issues- are you OK with removing this bullet given the limitation in Section 6?",
              "createdAt": "2024-10-04T19:32:19Z",
              "updatedAt": "2024-10-04T19:32:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MAt4e",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T19:32:40Z",
          "updatedAt": "2024-10-04T19:32:40Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Fixed",
              "createdAt": "2024-10-04T19:32:40Z",
              "updatedAt": "2024-10-04T19:32:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MAt-5",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T19:32:57Z",
          "updatedAt": "2024-10-04T19:32:57Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I found the old lines 589 and 590 a little ambiguous and wanted to give a little more guidance. Specifically using terminology like \"authorised workloads\" attempt to communicate that there is a security decision involved in adding a workload to the list. Similarly, requesting workload was an attempt at making it clearer that the requester is a workload (as opposed to say the user). repeating the \"authorisation language\" was likewise an attempt to re-emphaise the security decision and make the link to the list described in the previous bullet more explicit.  ",
              "createdAt": "2024-10-04T19:32:57Z",
              "updatedAt": "2024-10-04T19:32:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MAv5d",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T19:38:32Z",
          "updatedAt": "2024-10-04T19:38:32Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I can see cases where a transaction token service only issues tokens for a single domain, but I can also imagine that one is shared by two or more domains, especially if it is a more centralised model and it is attached to a Authorisation Server that services an entire enterprise, and must issue txn-tokens to many trust domains. \r\n\r\nI do like the simplifications of a single transaction token service per trust domain though, but I wonder if that is how it will get deployed in practice.\r\n\r\nWhat else breaks in the spec if we don't make this assumption? ",
              "createdAt": "2024-10-04T19:38:32Z",
              "updatedAt": "2024-10-04T19:38:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MByaH",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T21:21:06Z",
          "updatedAt": "2024-10-04T21:21:06Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "we can clarify that in the \"Security Considerations\", but not bring that into the normative language here.",
              "createdAt": "2024-10-04T21:21:06Z",
              "updatedAt": "2024-10-04T21:21:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MCFjw",
          "commit": {
            "abbreviatedOid": "2fb9ba4"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T23:05:59Z",
          "updatedAt": "2024-10-04T23:05:59Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I'm fine with saying the TTS must authenticate the requesting workload and then add a security consideration covering the potential exposure if the requesting workload makes a transaction token request from a service that is not the TTS.",
              "createdAt": "2024-10-04T23:05:59Z",
              "updatedAt": "2024-10-04T23:05:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6MCF_o",
          "commit": {
            "abbreviatedOid": "2fb9ba4"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-04T23:10:07Z",
          "updatedAt": "2024-10-04T23:10:07Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "We've talked about a logical TTS which doesn't require a single endpoint. \n\nOtherwise our text about the requesting workload needing to ensure it is talking to the correct TTS should cover this.\n\n(I am doing this from my phone:)",
              "createdAt": "2024-10-04T23:10:07Z",
              "updatedAt": "2024-10-04T23:10:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6OZqNz",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-23T14:58:46Z",
          "updatedAt": "2024-10-23T14:58:46Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Removed the \"strong authentication\" requirement and left \"mutual authentication\"",
              "createdAt": "2024-10-23T14:58:46Z",
              "updatedAt": "2024-10-23T14:58:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6OZuyQ",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-23T15:03:58Z",
          "updatedAt": "2024-10-23T15:03:58Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "OK, so my take here is that we stick with a single logical TTS. I will add a security consideration to remind people why they should make sure they request transaction tokens to the right server (and not some rogue) and delete line 600.",
              "createdAt": "2024-10-23T15:03:58Z",
              "updatedAt": "2024-10-23T15:03:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6OZ_h-",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-23T15:21:58Z",
          "updatedAt": "2024-10-23T15:21:59Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Updated to reflect a single logical transaction token service that may have multiple instances.",
              "createdAt": "2024-10-23T15:21:59Z",
              "updatedAt": "2024-10-23T15:21:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6OaMuc",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-23T15:37:24Z",
          "updatedAt": "2024-10-23T15:37:24Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Updated text",
              "createdAt": "2024-10-23T15:37:24Z",
              "updatedAt": "2024-10-23T15:37:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6OaNDD",
          "commit": {
            "abbreviatedOid": "5301944"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-23T15:37:47Z",
          "updatedAt": "2024-10-23T15:37:47Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Updated text",
              "createdAt": "2024-10-23T15:37:47Z",
              "updatedAt": "2024-10-23T15:37:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6OgLF-",
          "commit": {
            "abbreviatedOid": "e3c2fb8"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-23T22:48:04Z",
          "updatedAt": "2024-10-23T22:48:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6OoCsJ",
          "commit": {
            "abbreviatedOid": "e3c2fb8"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-24T14:35:14Z",
          "updatedAt": "2024-10-24T14:35:14Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Transaction Token Service (there's an extra 's')",
              "createdAt": "2024-10-24T14:35:14Z",
              "updatedAt": "2024-10-24T14:35:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6OoDrk",
          "commit": {
            "abbreviatedOid": "e3c2fb8"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good. There is one minor typo. ",
          "createdAt": "2024-10-24T14:36:06Z",
          "updatedAt": "2024-10-24T14:36:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6OqHlt",
          "commit": {
            "abbreviatedOid": "9b95fcb"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-24T18:10:39Z",
          "updatedAt": "2024-10-24T18:10:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 143,
      "id": "PR_kwDOJt_WwM589lZr",
      "title": "Clarify `subject_token_type` value when requesting a replacement Txn-Token",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/143",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses issue #113 - clarifying the value for `subject_token_type` when requesting a replacement Txn-Token",
      "createdAt": "2024-09-27T20:21:07Z",
      "updatedAt": "2024-11-08T17:12:01Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "d238f18e16364f12206c5ee1ac0001498b5a3822",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "issue-113",
      "headRefOid": "4b94a0d3b1907fba3dab2c74b52697b97f358f6b",
      "closedAt": "2024-10-02T23:39:43Z",
      "mergedAt": "2024-10-02T23:39:43Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "b1db1dc2ddea219d0d013f1bec981160a53cba50"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6Lu-jP",
          "commit": {
            "abbreviatedOid": "4b94a0d"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-02T23:39:32Z",
          "updatedAt": "2024-10-02T23:39:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 144,
      "id": "PR_kwDOJt_WwM59cPvx",
      "title": "Addressed comments from IANA review",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/144",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-03T01:01:25Z",
      "updatedAt": "2024-10-09T05:05:14Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "26e1cb85453191b6c735fbaf6bc0c9f86f987518",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "iana-update",
      "headRefOid": "59847ab9aac5a79d092a57a165542c6e8d4f38b5",
      "closedAt": "2024-10-09T05:05:12Z",
      "mergedAt": "2024-10-09T05:05:12Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "f5c7b549ecd574100edc08eb4c860baaaa56957b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6MCEqs",
          "commit": {
            "abbreviatedOid": "59847ab"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-04T22:58:27Z",
          "updatedAt": "2024-10-04T22:58:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 146,
      "id": "PR_kwDOJt_WwM5-tK91",
      "title": "Affiliation change for Pieter",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/146",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-15T16:59:58Z",
      "updatedAt": "2024-10-15T17:03:15Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "f5c7b549ecd574100edc08eb4c860baaaa56957b",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "b560a234187c03730b6097b918ae1e7b68ca67a9",
      "closedAt": "2024-10-15T17:03:13Z",
      "mergedAt": "2024-10-15T17:03:13Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "e24ef1cd3463f010e7378e4ebc8e2702fbb554a6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6NRA09",
          "commit": {
            "abbreviatedOid": "b560a23"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T17:03:08Z",
          "updatedAt": "2024-10-15T17:03:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 147,
      "id": "PR_kwDOJt_WwM5_NNMb",
      "title": "Update Transaction Token Service responsibility for replacement tokens #110",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/147",
      "state": "MERGED",
      "author": "ashayraut",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update Transaction Token Service responsibility when creating replacement tokens. Also contains minor changes for consistent language. Related https://github.com/oauth-wg/oauth-transaction-tokens/issues/110",
      "createdAt": "2024-10-20T04:26:23Z",
      "updatedAt": "2024-10-23T21:05:09Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "e24ef1cd3463f010e7378e4ebc8e2702fbb554a6",
      "headRepository": "ashayraut/replacement_token_tts",
      "headRefName": "main",
      "headRefOid": "155974cd2794d02bfb5bcb9a5706d5170a66b638",
      "closedAt": "2024-10-23T21:05:08Z",
      "mergedAt": "2024-10-23T21:05:08Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "46a0549d85686b0f766af3f699fb85bc5fb31f0a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6Obr0S",
          "commit": {
            "abbreviatedOid": "155974c"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-23T17:53:13Z",
          "updatedAt": "2024-10-23T17:53:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 148,
      "id": "PR_kwDOJt_WwM6A_cxO",
      "title": "Minor changes",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/148",
      "state": "MERGED",
      "author": "naveencm4u1",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-05T23:49:39Z",
      "updatedAt": "2024-11-08T18:30:54Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "c5fa3204880e9926cf6103737e3f1b70a2352c60",
      "headRepository": "naveencm4u1/oauth-transaction-tokens",
      "headRefName": "tt",
      "headRefOid": "d898e65343483bfd3509a7a8df9f0b73b6762751",
      "closedAt": "2024-11-08T18:30:54Z",
      "mergedAt": "2024-11-08T18:30:54Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "273060dc3b15ab6abfc0c1e81644b11da5098c18"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6QEgv7",
          "commit": {
            "abbreviatedOid": "20b932e"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-06T01:53:00Z",
          "updatedAt": "2024-11-06T01:54:08Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "This one looks grammatically incorrect.",
              "createdAt": "2024-11-06T01:53:00Z",
              "updatedAt": "2024-11-06T01:54:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6QgC_e",
          "commit": {
            "abbreviatedOid": "20b932e"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-08T16:42:03Z",
          "updatedAt": "2024-11-08T16:42:04Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I agree... because Txn-Tokens is plural, help should be singluar.",
              "createdAt": "2024-11-08T16:42:03Z",
              "updatedAt": "2024-11-08T16:42:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6Qgv5o",
          "commit": {
            "abbreviatedOid": "20b932e"
          },
          "author": "naveencm4u1",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-08T17:33:57Z",
          "updatedAt": "2024-11-08T17:33:57Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I've updated it now. Please review again.",
              "createdAt": "2024-11-08T17:33:57Z",
              "updatedAt": "2024-11-08T17:34:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6QhMMI",
          "commit": {
            "abbreviatedOid": "d898e65"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-08T18:30:32Z",
          "updatedAt": "2024-11-08T18:30:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 149,
      "id": "PR_kwDOJt_WwM6B9gPT",
      "title": "Add Batch token for asynchronous long running workloads",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/149",
      "state": "OPEN",
      "author": "ashayraut",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Batch token was discussed here at https://github.com/oauth-wg/oauth-transaction-tokens/issues/111. The PR is first draft to add batch token in RFC.",
      "createdAt": "2024-11-14T18:47:16Z",
      "updatedAt": "2024-11-14T18:47:16Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "273060dc3b15ab6abfc0c1e81644b11da5098c18",
      "headRepository": "ashayraut/replacement_token_tts",
      "headRefName": "main",
      "headRefOid": "e9b366a281db13388238c8e19ad67896a0d3c0b1",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 150,
      "id": "PR_kwDOJt_WwM6FpZqe",
      "title": "Rename azd issue #119",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/150",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Renamed the `azd` claim to `tctx` and cleaned up some wording. This addresses issue #119. I did not add any non-normative text regarding how to use RAR.",
      "createdAt": "2024-12-18T13:12:20Z",
      "updatedAt": "2024-12-29T07:13:36Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "273060dc3b15ab6abfc0c1e81644b11da5098c18",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "rename-azd-119",
      "headRefOid": "ad97c325ec00aaeeb273d3eaf372391750fff387",
      "closedAt": "2024-12-29T07:13:35Z",
      "mergedAt": "2024-12-29T07:13:35Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "83f285756a7ec1670a3d52804ab1a8c2a3bd6f10"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6WfsxF",
          "commit": {
            "abbreviatedOid": "ad97c32"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-29T07:13:28Z",
          "updatedAt": "2024-12-29T07:13:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 151,
      "id": "PR_kwDOJt_WwM6IzIYJ",
      "title": "changed all references to Trust Domain (capitalized)",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/151",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-23T18:08:28Z",
      "updatedAt": "2025-01-31T17:28:52Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "5316d5746659848a9587986e78b80c5c0d184168",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "terminology-cleanup",
      "headRefOid": "3bd865b58684de9d0925b8fc3c2562e5653072e4",
      "closedAt": "2025-01-31T17:28:49Z",
      "mergedAt": "2025-01-31T17:28:49Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "c80325f89cdab78a441c091d9490954524b1d78f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6aMW6B",
          "commit": {
            "abbreviatedOid": "3bd865b"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2025-01-31T14:26:15Z",
          "updatedAt": "2025-01-31T14:26:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6aMnmK",
          "commit": {
            "abbreviatedOid": "3bd865b"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2025-01-31T14:54:15Z",
          "updatedAt": "2025-01-31T14:54:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 152,
      "id": "PR_kwDOJt_WwM6IzXNi",
      "title": "Fixed upload-artifact version.",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/152",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-23T18:43:41Z",
      "updatedAt": "2025-01-23T18:46:34Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "83f285756a7ec1670a3d52804ab1a8c2a3bd6f10",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "fix-build",
      "headRefOid": "ce4f835eaac612155e85f5fab6dcf72df6da77bd",
      "closedAt": "2025-01-23T18:46:33Z",
      "mergedAt": "2025-01-23T18:46:33Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "5316d5746659848a9587986e78b80c5c0d184168"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 153,
      "id": "PR_kwDOJt_WwM6Jp1HY",
      "title": "Transaction token Discovery Security Considerations",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/153",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Security Considerations for Transaction Token Discovery (#95 )",
      "createdAt": "2025-01-31T15:02:47Z",
      "updatedAt": "2025-02-13T22:49:50Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "5316d5746659848a9587986e78b80c5c0d184168",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "9296b02a0084f9c9f69c86cb30813395e9136f1a",
      "closedAt": "2025-02-13T22:49:48Z",
      "mergedAt": "2025-02-13T22:49:48Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "fd62e528427bf2ebe2b839bb46a1ee5775ef231b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6aMxKm",
          "commit": {
            "abbreviatedOid": "d29dc4d"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-31T15:10:49Z",
          "updatedAt": "2025-01-31T15:10:50Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Typo -> wokrload",
              "createdAt": "2025-01-31T15:10:49Z",
              "updatedAt": "2025-01-31T15:10:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6aMxcJ",
          "commit": {
            "abbreviatedOid": "d29dc4d"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks good. Just the one typo :) ",
          "createdAt": "2025-01-31T15:11:14Z",
          "updatedAt": "2025-01-31T15:11:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6adGDa",
          "commit": {
            "abbreviatedOid": "d29dc4d"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-03T22:52:58Z",
          "updatedAt": "2025-02-03T22:53:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Can we say \"should use TLS\" or \"must use TLS\" instead of \"may use TLS\"?",
              "createdAt": "2025-02-03T22:52:58Z",
              "updatedAt": "2025-02-03T22:53:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6b3afc",
          "commit": {
            "abbreviatedOid": "d29dc4d"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-13T13:28:18Z",
          "updatedAt": "2025-02-13T13:28:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Fixed.",
              "createdAt": "2025-02-13T13:28:18Z",
              "updatedAt": "2025-02-13T13:28:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6b3jEA",
          "commit": {
            "abbreviatedOid": "d29dc4d"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-13T13:41:13Z",
          "updatedAt": "2025-02-13T13:41:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Made some changes (including a SHOULd for TLS). I also changed to normative (capitalised) language.\r\n",
              "createdAt": "2025-02-13T13:41:13Z",
              "updatedAt": "2025-02-13T13:41:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6b60Jb",
          "commit": {
            "abbreviatedOid": "9fb756f"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-13T18:20:55Z",
          "updatedAt": "2025-02-13T18:20:56Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "SHOULDuse -> SHOULD use",
              "createdAt": "2025-02-13T18:20:56Z",
              "updatedAt": "2025-02-13T18:20:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6b60RH",
          "commit": {
            "abbreviatedOid": "9fb756f"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-13T18:21:12Z",
          "updatedAt": "2025-02-13T18:21:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJt_WwM6b7qjx",
          "commit": {
            "abbreviatedOid": "9fb756f"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-13T20:07:47Z",
          "updatedAt": "2025-02-13T20:07:47Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Fixed.",
              "createdAt": "2025-02-13T20:07:47Z",
              "updatedAt": "2025-02-13T20:07:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6b8u3r",
          "commit": {
            "abbreviatedOid": "9296b02"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-13T22:49:41Z",
          "updatedAt": "2025-02-13T22:49:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 156,
      "id": "PR_kwDOJt_WwM6NCmGG",
      "title": "Security Considerations: Key Rotation",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/156",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See issue #109",
      "createdAt": "2025-03-01T18:01:19Z",
      "updatedAt": "2025-03-01T20:33:50Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "fd62e528427bf2ebe2b839bb46a1ee5775ef231b",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "95e12199d09afea784ee84e1ca4849b0600b5e44",
      "closedAt": "2025-03-01T20:33:49Z",
      "mergedAt": "2025-03-01T20:33:49Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "06258cdc6cab4cfb0e5b400e3dde4918db962429"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6eGxfG",
          "commit": {
            "abbreviatedOid": "95e1219"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-01T20:33:43Z",
          "updatedAt": "2025-03-01T20:33:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 157,
      "id": "PR_kwDOJt_WwM6NLGpL",
      "title": "Update draft-ietf-oauth-transaction-tokens.md",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/157",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Updated abstract and overview section to be more explicit about supporting internally initiated transacations.",
      "createdAt": "2025-03-03T15:56:21Z",
      "updatedAt": "2025-03-03T18:14:06Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "06258cdc6cab4cfb0e5b400e3dde4918db962429",
      "headRepository": "gffletch/transaction-tokens",
      "headRefName": "internal-use-case",
      "headRefOid": "e4f9a2f0e574b0d71538a111071fda625fadda1d",
      "closedAt": "2025-03-03T18:14:06Z",
      "mergedAt": "2025-03-03T18:14:06Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "a2ee5c86adf0bab164c6af5503b3d55f1eb7578a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6eOUlp",
          "commit": {
            "abbreviatedOid": "e4f9a2f"
          },
          "author": "gffletch",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-03T15:57:34Z",
          "updatedAt": "2025-03-03T15:57:34Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "I removed the reference to the OpenID Connect id_token as it shouldn't be used for authorization. ",
              "createdAt": "2025-03-03T15:57:34Z",
              "updatedAt": "2025-03-03T15:57:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJt_WwM6ePlOJ",
          "commit": {
            "abbreviatedOid": "e4f9a2f"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-03T18:13:59Z",
          "updatedAt": "2025-03-03T18:13:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 158,
      "id": "PR_kwDOJt_WwM6NMUi3",
      "title": "added document history",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/158",
      "state": "MERGED",
      "author": "tulshi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-03T18:32:24Z",
      "updatedAt": "2025-03-03T18:59:46Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "a2ee5c86adf0bab164c6af5503b3d55f1eb7578a",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "add-doc-history",
      "headRefOid": "e48c65a0d39b9ff92d44033a9d47e54edc8041d8",
      "closedAt": "2025-03-03T18:59:44Z",
      "mergedAt": "2025-03-03T18:59:44Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "6b637afd16f4f79b4b78f23d5053ab7676eaf755"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 160,
      "id": "PR_kwDOJt_WwM6PZR7i",
      "title": "Re-wrote abstract",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/160",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As the spec has matured and evolved, I would like to suggest the following abstract to replace the original one.",
      "createdAt": "2025-03-20T05:10:32Z",
      "updatedAt": "2025-03-21T03:16:53Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "6b637afd16f4f79b4b78f23d5053ab7676eaf755",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-1",
      "headRefOid": "e6cdb82f2f3a5061525e3b6a2015e27cccdca433",
      "closedAt": "2025-03-21T03:16:51Z",
      "mergedAt": "2025-03-21T03:16:51Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "8185a14eec8678ed7e12884a40d55d0efb50c4fe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6hNUUy",
          "commit": {
            "abbreviatedOid": "e6cdb82"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T03:16:46Z",
          "updatedAt": "2025-03-21T03:16:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "PR_kwDOJt_WwM6PjSHS",
      "title": "Editorial updates",
      "url": "https://github.com/oauth-wg/oauth-transaction-tokens/pull/161",
      "state": "MERGED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "typo",
      "createdAt": "2025-03-21T02:33:54Z",
      "updatedAt": "2025-03-21T03:15:56Z",
      "baseRepository": "oauth-wg/oauth-transaction-tokens",
      "baseRefName": "main",
      "baseRefOid": "6b637afd16f4f79b4b78f23d5053ab7676eaf755",
      "headRepository": "oauth-wg/oauth-transaction-tokens",
      "headRefName": "PieterKas-patch-2",
      "headRefOid": "7a0708b84bd3fb5955a2c02abc21e42591b74e90",
      "closedAt": "2025-03-21T03:15:55Z",
      "mergedAt": "2025-03-21T03:15:55Z",
      "mergedBy": "tulshi",
      "mergeCommit": {
        "oid": "6958829fcd56b27752c86178011b6f41a58938f6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJt_WwM6hNUJ5",
          "commit": {
            "abbreviatedOid": "7a0708b"
          },
          "author": "tulshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T03:15:49Z",
          "updatedAt": "2025-03-21T03:15:49Z",
          "comments": []
        }
      ]
    }
  ]
}